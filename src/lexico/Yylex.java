/* The following code was generated by JFlex 1.4.3 on 16/04/13 06:56 PM */

package lexico;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Map;
import java.util.TreeMap;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/04/13 06:56 PM from the specification file
 * <tt>/Users/spantons/Documents/workspaceJAVA/Compilador_Cobol/src/lexico/lexer.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\61\1\0\1\62\1\60\22\0\1\63\1\5\1\4"+
    "\1\5\1\51\1\5\1\0\1\6\1\54\1\55\1\46\1\1\1\52"+
    "\1\27\1\3\1\47\1\2\1\36\1\37\1\40\6\2\1\5\1\53"+
    "\1\57\1\50\1\56\1\0\1\5\1\7\1\26\1\10\1\15\1\11"+
    "\1\22\1\21\1\25\1\20\1\44\1\35\1\24\1\33\1\17\1\30"+
    "\1\12\1\41\1\23\1\14\1\13\1\32\1\16\1\31\1\42\1\34"+
    "\1\43\3\5\1\0\1\5\1\0\32\45\3\5\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\20\5\1\6"+
    "\11\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\21\2\0\1\22\1\0\1\5"+
    "\1\23\6\5\1\0\2\5\1\24\1\25\1\5\1\26"+
    "\17\5\1\27\2\5\1\30\7\5\1\31\6\5\1\32"+
    "\5\5\1\33\7\5\1\34\1\5\1\35\1\5\1\36"+
    "\1\37\1\0\4\5\1\40\1\5\1\41\5\5\1\42"+
    "\1\5\1\43\1\44\15\5\1\45\4\5\1\46\1\47"+
    "\1\50\7\5\1\51\11\5\1\52\1\53\1\54\3\5"+
    "\1\55\1\5\1\56\1\57\1\5\1\60\3\5\1\61"+
    "\17\5\1\62\4\5\1\63\1\5\1\64\2\5\1\65"+
    "\1\66\10\5\1\67\22\5\1\70\6\5\1\71\17\5"+
    "\1\72\3\5\1\73\20\5\1\74\10\5\1\75\12\5"+
    "\1\76\22\5\1\77\30\5\1\100\14\5\1\101\13\5"+
    "\1\102\11\5\1\103\2\5\1\104\2\5\1\105\4\5"+
    "\1\106\3\5\1\107\4\5\1\110\6\5\1\0\2\5"+
    "\1\111\4\5\1\112\2\5\1\113\4\5\1\2\3\5"+
    "\1\114\2\5\1\115\1\5\1\116\1\117\1\5\1\120"+
    "\1\121\1\122\1\5\1\123\1\124\1\125\6\5\1\126"+
    "\11\5\1\127\1\130\1\131\1\132\3\5\1\0\1\133"+
    "\1\5\1\134\1\135\1\0\15\5\1\136\6\5\1\137"+
    "\4\5\1\140\6\5\1\0\10\5\1\141\1\5\1\142"+
    "\3\5\1\143\2\5\1\144\21\5\1\145\2\5\1\20"+
    "\1\5\1\146\1\5\1\147\2\5\1\150\1\0\12\5"+
    "\1\151\10\5\1\152\1\5\1\153\3\5\1\154\5\5"+
    "\1\155\3\5\1\156\1\5\1\157\3\5\1\160\1\161"+
    "\5\5\1\162\1\163\1\5\1\164\2\5\1\165\1\5"+
    "\1\166\1\5\1\0\11\5\1\167\1\170\1\5\1\13"+
    "\4\5\1\171\1\5\1\172\15\5\1\173\1\174\1\11"+
    "\5\5\1\0\6\5\1\175\1\5\1\176\1\5\1\177"+
    "\13\5\1\200\3\5\1\201\1\5\1\0\6\5\1\0"+
    "\4\5\1\202\15\5\1\203\5\5\1\204\2\5\1\205"+
    "\7\5\1\206\1\5\1\207\1\210\1\211\1\0\11\5"+
    "\1\212\5\5\1\213\6\5\1\214\1\5\1\215\3\5"+
    "\1\216\1\0\1\5\1\217\3\5\1\0\3\5\1\220"+
    "\1\221\1\222\3\5\1\223\1\5\1\224\4\5\1\225"+
    "\1\226\1\227\1\5\1\230\1\231\1\232\3\5\1\233"+
    "\3\5\1\234\1\235\1\5\1\160\1\5\1\236\1\237"+
    "\1\5\1\240\4\5\1\241\1\242\1\0\12\5\1\243"+
    "\1\5\1\244\3\5\1\245\12\5\1\246\7\5\1\247"+
    "\17\5\1\250\1\251\5\5\1\252\1\5\1\253\1\5"+
    "\1\254\1\5\1\22\1\5\1\255\13\5\1\256\2\5"+
    "\1\257\2\5\1\0\3\5\1\260\3\5\1\203\1\261"+
    "\2\5\1\262\1\5\1\0\10\5\1\263\1\5\1\264"+
    "\2\5\1\265\2\5\1\266\1\5\1\267\1\5\1\270"+
    "\1\271\7\5\1\272\5\5\1\273\1\274\2\5\1\275"+
    "\5\5\1\276\1\277\1\300\1\301\4\5\1\302\5\5"+
    "\1\303\2\5\1\235\12\5\1\304\1\5\1\305\1\306"+
    "\4\5\1\307\3\5\1\310\16\5\1\0\6\5\1\0"+
    "\1\311\1\5\1\312\1\5\1\313\1\5\1\314\2\5"+
    "\1\315\3\5\1\316\1\317\3\5\1\320\5\5\1\0"+
    "\1\321\6\5\1\0\14\5\1\322\1\323\2\5\1\324"+
    "\1\325\1\5\1\326\2\5\1\327\1\5\1\330\1\5"+
    "\1\331\1\5\1\332\2\5\1\17\1\5\1\333\1\5"+
    "\1\334\1\335\1\267\1\336\1\5\1\337\1\5\1\340"+
    "\2\5\1\341\2\5\1\342\1\343\1\5\1\344\1\345"+
    "\1\346\1\0\1\5\1\347\1\5\1\350\6\5\1\0"+
    "\1\351\3\5\1\352\1\353\5\5\1\354\3\5\1\355"+
    "\1\356\1\357\1\360\5\5\1\361\1\362\1\363\11\5"+
    "\1\364\11\5\1\365\2\5\1\366\1\5\1\0\1\367"+
    "\1\370\1\371\1\5\1\372\1\373\1\374\1\375\1\376"+
    "\1\0\1\377\1\5\1\0\1\u0100\2\5\1\u0101\2\5"+
    "\1\u0102\3\5\1\0\13\5\1\u0103\1\5\1\u0104\1\0"+
    "\3\5\1\u0105\1\u0106\2\5\1\u0107\5\5\1\u0108\1\0"+
    "\1\5\1\u0109\7\5\1\u010a\1\u010b\2\5\1\0\1\u010c"+
    "\1\5\1\u010d\1\u010e\1\5\1\u010f\1\u0110\2\5\1\u0111"+
    "\1\5\1\u0112\2\5\1\u0113\6\5\1\u0114\10\5\1\u0115"+
    "\3\5\1\u0116\2\5\1\u0117\1\5\1\u0118\3\5\1\0"+
    "\11\5\1\u0119\2\5\1\u011a\1\u011b\1\u011c\16\5\1\u011d"+
    "\1\u011e\1\u011f\1\5\1\u0120\1\u0121\2\5\1\u0122\1\u0123"+
    "\5\5\1\u0124\1\u0125\1\5\1\u0126\1\5\1\u0127\7\5"+
    "\1\u0128\1\u0129\1\5\1\u012a\1\u012b\1\5\1\u012c\7\5"+
    "\1\u012d\1\u012e\1\5\1\u012f\1\5\1\u0130\1\u0131\1\u0132"+
    "\1\5\1\0\6\5\1\u0133\2\5\1\0\1\u0134\1\u0135"+
    "\1\u0136\1\u0137\4\5\1\u0138\4\5\1\u0139\2\5\1\u0122"+
    "\1\u013a\5\5\1\0\1\u013b\4\5\1\u013c\1\5\1\u013d"+
    "\1\5\1\u013e\1\u013f\1\u0140\2\5\1\u0141\5\5\1\u0142"+
    "\1\u0143\1\u0144\3\5\1\u0145\2\5\1\u0146\1\5\1\u0147"+
    "\1\u0148\1\u0149\4\5\1\u014a\1\5\1\0\3\5\1\u013a"+
    "\1\0\3\5\1\u014b\6\5\1\u014c\1\u014d\1\u014e\1\u014f"+
    "\1\5\1\u0150\3\5\1\133\1\5\1\u0151\1\5\1\u0152"+
    "\3\5\1\u0153\1\u0154\1\u0155\3\5\1\u0156\1\5\1\u0157"+
    "\2\5\1\0\2\5\1\u0158\1\u0159\1\u015a\1\u015b\1\5"+
    "\1\u015c\1\u015d\1\5\1\u015e\1\u015f\4\5\1\u0160\7\5"+
    "\1\u0161\1\5\1\u0162\1\u0163\1\u0164\1\5\1\u0165\6\5"+
    "\1\u0166\2\5\1\u0167\1\u0168\1\5\1\u0169\1\u016a\1\u016b"+
    "\1\u016c\2\5\1\u016d";

  private static int [] zzUnpackAction() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\64\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\150"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\64\0\64\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\u064c\0\u0680\0\u06b4\0\64\0\u06e8\0\320\0\64"+
    "\0\u0104\0\u071c\0\u0548\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0548\0\u0548\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0548"+
    "\0\u0c98\0\u0ccc\0\u0548\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0548\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc"+
    "\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c"+
    "\0\u12b0\0\u0548\0\u12e4\0\u1318\0\u0548\0\u134c\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u0548\0\u1450\0\u0548\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u0548\0\u1588\0\u0548\0\u0548\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u0548\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u0548\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68"+
    "\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08"+
    "\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\64\0\64\0\u06e8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u0548\0\u1da8\0\u0548\0\u0548\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u0548\0\u0888\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8"+
    "\0\u211c\0\u2150\0\u2184\0\u0548\0\u21b8\0\u21ec\0\u2220\0\u2254"+
    "\0\u2288\0\u22bc\0\u0548\0\u22f0\0\u2324\0\u0548\0\u0548\0\u2358"+
    "\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u0548"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804"+
    "\0\u2838\0\u286c\0\u0548\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970"+
    "\0\u29a4\0\u0548\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc"+
    "\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c"+
    "\0\u2cb0\0\u0548\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8"+
    "\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88"+
    "\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0\0\u0548\0\u30f4"+
    "\0\u3128\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294"+
    "\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434"+
    "\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0\0\u35d4"+
    "\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740\0\u3774"+
    "\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878\0\u0548\0\u38ac\0\u38e0"+
    "\0\u3914\0\u3948\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80"+
    "\0\u3ab4\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84\0\u3bb8\0\u3bec\0\u3c20"+
    "\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24\0\u3d58\0\u0548\0\u3d8c"+
    "\0\u3dc0\0\u3df4\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c"+
    "\0\u3f60\0\u3f94\0\u3fc8\0\u0548\0\u3ffc\0\u4030\0\u4064\0\u4098"+
    "\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204\0\u0548"+
    "\0\u4238\0\u426c\0\u42a0\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4"+
    "\0\u43d8\0\u440c\0\u4440\0\u4474\0\u0548\0\u44a8\0\u44dc\0\u0548"+
    "\0\u4510\0\u4544\0\u4578\0\u45ac\0\u45e0\0\u4614\0\u4648\0\u467c"+
    "\0\u46b0\0\u46e4\0\u4718\0\u474c\0\u4780\0\u47b4\0\u47e8\0\u481c"+
    "\0\u4850\0\u4884\0\u48b8\0\u48ec\0\u4920\0\u4954\0\u4988\0\u0548"+
    "\0\u49bc\0\u49f0\0\u4a24\0\u4a58\0\u0548\0\u4a8c\0\u4ac0\0\u4af4"+
    "\0\u4b28\0\u4b5c\0\u4b90\0\u4bc4\0\u0548\0\u4bf8\0\u4c2c\0\u4c60"+
    "\0\u0548\0\u4c94\0\u4cc8\0\u0548\0\u4cfc\0\u0548\0\u4d30\0\u4d64"+
    "\0\u0548\0\u0548\0\u0548\0\u4d98\0\u0548\0\u0548\0\u0548\0\u4dcc"+
    "\0\u4e00\0\u4e34\0\u4e68\0\u4e9c\0\u4ed0\0\u0548\0\u4f04\0\u4f38"+
    "\0\u4f6c\0\u4fa0\0\u4fd4\0\u5008\0\u503c\0\u5070\0\u50a4\0\u0548"+
    "\0\u0548\0\u0548\0\u50d8\0\u510c\0\u5140\0\u5174\0\u51a8\0\u51dc"+
    "\0\u5210\0\u0548\0\u5244\0\u5278\0\u52ac\0\u52e0\0\u5314\0\u5348"+
    "\0\u537c\0\u53b0\0\u53e4\0\u5418\0\u544c\0\u5480\0\u54b4\0\u54e8"+
    "\0\u551c\0\u0548\0\u5550\0\u5584\0\u55b8\0\u55ec\0\u5620\0\u5654"+
    "\0\u0548\0\u5688\0\u56bc\0\u56f0\0\u5724\0\u0548\0\u5758\0\u578c"+
    "\0\u57c0\0\u57f4\0\u5828\0\u585c\0\u5890\0\u58c4\0\u58f8\0\u592c"+
    "\0\u5960\0\u5994\0\u59c8\0\u59fc\0\u5a30\0\u5a64\0\u5a98\0\u0548"+
    "\0\u5acc\0\u5b00\0\u5b34\0\u0548\0\u5b68\0\u5b9c\0\u0548\0\u5bd0"+
    "\0\u5c04\0\u5c38\0\u5c6c\0\u5ca0\0\u5cd4\0\u5d08\0\u5d3c\0\u5d70"+
    "\0\u5da4\0\u5dd8\0\u5e0c\0\u5e40\0\u5e74\0\u5ea8\0\u5edc\0\u5f10"+
    "\0\u0548\0\u5f44\0\u5f78\0\u0548\0\u5fac\0\u0548\0\u5fe0\0\u6014"+
    "\0\u6048\0\u607c\0\u0548\0\u60b0\0\u60e4\0\u6118\0\u614c\0\u6180"+
    "\0\u61b4\0\u61e8\0\u621c\0\u6250\0\u6284\0\u62b8\0\u0548\0\u62ec"+
    "\0\u6320\0\u6354\0\u6388\0\u63bc\0\u63f0\0\u6424\0\u6458\0\u0548"+
    "\0\u648c\0\u0548\0\u64c0\0\u64f4\0\u6528\0\u0548\0\u655c\0\u6590"+
    "\0\u65c4\0\u65f8\0\u662c\0\u0548\0\u6660\0\u6694\0\u66c8\0\u0548"+
    "\0\u66fc\0\u0548\0\u6730\0\u6764\0\u6798\0\u67cc\0\u6800\0\u6834"+
    "\0\u6868\0\u689c\0\u68d0\0\u6904\0\u0548\0\u0548\0\u6938\0\u696c"+
    "\0\u69a0\0\u69d4\0\u0548\0\u6a08\0\u0548\0\u6a3c\0\u6a70\0\u6aa4"+
    "\0\u6ad8\0\u6b0c\0\u6b40\0\u6b74\0\u6ba8\0\u6bdc\0\u6c10\0\u6c44"+
    "\0\u0548\0\u0548\0\u6c78\0\u0548\0\u6cac\0\u6ce0\0\u6d14\0\u6d48"+
    "\0\u0548\0\u6d7c\0\u0548\0\u6db0\0\u6de4\0\u6e18\0\u6e4c\0\u6e80"+
    "\0\u6eb4\0\u6ee8\0\u6f1c\0\u6f50\0\u6f84\0\u6fb8\0\u6fec\0\u7020"+
    "\0\u0548\0\u0548\0\u0548\0\u7054\0\u7088\0\u70bc\0\u70f0\0\u7124"+
    "\0\u7158\0\u718c\0\u71c0\0\u71f4\0\u7228\0\u725c\0\u7290\0\u0548"+
    "\0\u72c4\0\u0548\0\u72f8\0\u0548\0\u732c\0\u7360\0\u7394\0\u73c8"+
    "\0\u73fc\0\u7430\0\u7464\0\u7498\0\u74cc\0\u7500\0\u7534\0\u7568"+
    "\0\u759c\0\u75d0\0\u7604\0\u0548\0\u7638\0\u766c\0\u76a0\0\u76d4"+
    "\0\u7708\0\u773c\0\u7770\0\u77a4\0\u77d8\0\u780c\0\u7840\0\u7874"+
    "\0\u78a8\0\u0548\0\u78dc\0\u7910\0\u7944\0\u7978\0\u79ac\0\u79e0"+
    "\0\u7a14\0\u7a48\0\u7a7c\0\u7ab0\0\u7ae4\0\u7b18\0\u7b4c\0\u7b80"+
    "\0\u7bb4\0\u7be8\0\u7c1c\0\u7c50\0\u7c84\0\u7cb8\0\u7cec\0\u7d20"+
    "\0\u7d54\0\u7d88\0\u7dbc\0\u7df0\0\u7e24\0\u7e58\0\u7e8c\0\u7ec0"+
    "\0\u0548\0\u7ef4\0\u0548\0\u0548\0\u0548\0\u7f28\0\u7f5c\0\u7f90"+
    "\0\u7fc4\0\u7ff8\0\u802c\0\u8060\0\u8094\0\u80c8\0\u80fc\0\u0548"+
    "\0\u8130\0\u8164\0\u8198\0\u81cc\0\u8200\0\u0548\0\u8234\0\u8268"+
    "\0\u829c\0\u82d0\0\u8304\0\u8338\0\u0548\0\u836c\0\u0548\0\u83a0"+
    "\0\u83d4\0\u8408\0\u0548\0\u843c\0\u8470\0\u84a4\0\u84d8\0\u850c"+
    "\0\u8540\0\u8574\0\u85a8\0\u85dc\0\u8610\0\u0548\0\u0548\0\u0548"+
    "\0\u8644\0\u8678\0\u86ac\0\u0548\0\u86e0\0\u0548\0\u8714\0\u8748"+
    "\0\u877c\0\u87b0\0\u0548\0\u0548\0\u0548\0\u87e4\0\u0548\0\u0548"+
    "\0\u0548\0\u8818\0\u884c\0\u8880\0\u0548\0\u88b4\0\u88e8\0\u891c"+
    "\0\u0548\0\u8950\0\u8984\0\u0548\0\u89b8\0\u0548\0\u0548\0\u89ec"+
    "\0\u0548\0\u8a20\0\u8a54\0\u8a88\0\u8abc\0\u0548\0\u0548\0\u8af0"+
    "\0\u8b24\0\u8b58\0\u8b8c\0\u8bc0\0\u8bf4\0\u8c28\0\u8c5c\0\u8c90"+
    "\0\u8cc4\0\u8cf8\0\u0548\0\u8d2c\0\u0548\0\u8d60\0\u8d94\0\u8dc8"+
    "\0\u0548\0\u8dfc\0\u8e30\0\u8e64\0\u8e98\0\u8ecc\0\u8f00\0\u8f34"+
    "\0\u8f68\0\u8f9c\0\u8fd0\0\u0888\0\u9004\0\u9038\0\u906c\0\u90a0"+
    "\0\u90d4\0\u9108\0\u913c\0\u0548\0\u9170\0\u91a4\0\u91d8\0\u920c"+
    "\0\u9240\0\u9274\0\u92a8\0\u92dc\0\u9310\0\u9344\0\u9378\0\u93ac"+
    "\0\u93e0\0\u9414\0\u9448\0\u0548\0\u0548\0\u947c\0\u94b0\0\u94e4"+
    "\0\u9518\0\u954c\0\u0548\0\u9580\0\u0548\0\u95b4\0\u0548\0\u95e8"+
    "\0\u0548\0\u961c\0\u9650\0\u9684\0\u96b8\0\u96ec\0\u9720\0\u9754"+
    "\0\u9788\0\u97bc\0\u97f0\0\u9824\0\u9858\0\u988c\0\u0548\0\u98c0"+
    "\0\u98f4\0\u0548\0\u9928\0\u995c\0\u9990\0\u99c4\0\u99f8\0\u9a2c"+
    "\0\u0548\0\u9a60\0\u9a94\0\u9ac8\0\u0548\0\u0548\0\u9afc\0\u9b30"+
    "\0\u0548\0\u9b64\0\u9b98\0\u9bcc\0\u9c00\0\u9c34\0\u9c68\0\u9c9c"+
    "\0\u9cd0\0\u9d04\0\u9d38\0\u0548\0\u9d6c\0\u0548\0\u9da0\0\u9dd4"+
    "\0\u0548\0\u9e08\0\u9e3c\0\u0548\0\u9e70\0\u9ea4\0\u9ed8\0\u9f0c"+
    "\0\u0548\0\u9f40\0\u9f74\0\u9fa8\0\u9fdc\0\ua010\0\ua044\0\ua078"+
    "\0\u0548\0\ua0ac\0\ua0e0\0\ua114\0\ua148\0\ua17c\0\u0548\0\ua1b0"+
    "\0\ua1e4\0\ua218\0\u0548\0\ua24c\0\ua280\0\ua2b4\0\ua2e8\0\ua31c"+
    "\0\u0548\0\u0548\0\u0548\0\u0548\0\ua350\0\ua384\0\ua3b8\0\ua3ec"+
    "\0\u0548\0\ua420\0\ua454\0\ua488\0\ua4bc\0\ua4f0\0\u0548\0\ua524"+
    "\0\ua558\0\u0548\0\ua58c\0\ua5c0\0\ua5f4\0\ua628\0\ua65c\0\ua690"+
    "\0\ua6c4\0\ua6f8\0\ua72c\0\ua760\0\u0548\0\ua794\0\ua7c8\0\u0548"+
    "\0\ua7fc\0\ua830\0\ua864\0\ua898\0\u0548\0\ua8cc\0\ua900\0\ua934"+
    "\0\u0888\0\ua968\0\ua99c\0\ua9d0\0\uaa04\0\uaa38\0\uaa6c\0\uaaa0"+
    "\0\uaad4\0\uab08\0\uab3c\0\uab70\0\uaba4\0\uabd8\0\uac0c\0\uac40"+
    "\0\uac74\0\uaca8\0\uacdc\0\uad10\0\uad44\0\uad78\0\uadac\0\u0548"+
    "\0\uade0\0\u0548\0\uae14\0\u0548\0\uae48\0\uae7c\0\uaeb0\0\uaee4"+
    "\0\u0548\0\uaf18\0\uaf4c\0\uaf80\0\u0548\0\u0548\0\uafb4\0\uafe8"+
    "\0\ub01c\0\ub050\0\ub084\0\ub0b8\0\ub0ec\0\ub120\0\ub154\0\ub188"+
    "\0\u0548\0\ub1bc\0\ub1f0\0\ub224\0\ub258\0\ub28c\0\ub2c0\0\ub2f4"+
    "\0\ub328\0\ub35c\0\ub390\0\ub3c4\0\ub3f8\0\ub42c\0\ub460\0\ub494"+
    "\0\ub4c8\0\ub4fc\0\ub530\0\ub564\0\u0548\0\u0548\0\ub598\0\ub5cc"+
    "\0\u0548\0\u0548\0\ub600\0\ub634\0\ub668\0\ub69c\0\u0548\0\ub6d0"+
    "\0\u0548\0\ub704\0\u0548\0\ub738\0\ub76c\0\ub7a0\0\ub7d4\0\u0548"+
    "\0\ub808\0\u0888\0\ub83c\0\u0548\0\u0548\0\u0548\0\u0548\0\ub870"+
    "\0\u0548\0\ub8a4\0\u0548\0\ub8d8\0\ub90c\0\u0548\0\ub940\0\ub974"+
    "\0\u0548\0\u0548\0\ub9a8\0\u0548\0\u0548\0\u0548\0\ub9dc\0\uba10"+
    "\0\u0548\0\uba44\0\u0548\0\uba78\0\ubaac\0\ubae0\0\ubb14\0\ubb48"+
    "\0\ubb7c\0\ubbb0\0\u0548\0\ubbe4\0\ubc18\0\ubc4c\0\u0548\0\u0548"+
    "\0\ubc80\0\ubcb4\0\ubce8\0\ubd1c\0\ubd50\0\ubd84\0\ubdb8\0\ubdec"+
    "\0\ube20\0\u0888\0\u0548\0\u0548\0\u0548\0\ube54\0\ube88\0\ubebc"+
    "\0\ubef0\0\ubf24\0\u0548\0\u0548\0\u0888\0\ubf58\0\ubf8c\0\ubfc0"+
    "\0\ubff4\0\uc028\0\uc05c\0\uc090\0\uc0c4\0\uc0f8\0\u0888\0\uc12c"+
    "\0\uc160\0\uc194\0\uc1c8\0\uc1fc\0\uc230\0\uc264\0\uc298\0\uc2cc"+
    "\0\u0548\0\uc300\0\uc334\0\u0548\0\uc368\0\uc39c\0\u0548\0\u0548"+
    "\0\u0548\0\uc3d0\0\u0548\0\u0548\0\u0548\0\u0548\0\u0548\0\uc404"+
    "\0\u0548\0\uc438\0\uc46c\0\uc4a0\0\uc4d4\0\uc508\0\u0548\0\uc53c"+
    "\0\uc570\0\u0548\0\uc5a4\0\uc5d8\0\uc60c\0\uc640\0\uc674\0\uc6a8"+
    "\0\uc6dc\0\uc710\0\uc744\0\uc778\0\uc7ac\0\uc7e0\0\uc814\0\uc848"+
    "\0\uc87c\0\u0548\0\uc8b0\0\u0548\0\uc8e4\0\uc918\0\uc94c\0\uc980"+
    "\0\u0548\0\u0548\0\uc9b4\0\uc9e8\0\u0548\0\uca1c\0\uca50\0\uca84"+
    "\0\ucab8\0\ucaec\0\u0548\0\ucb20\0\ucb54\0\u0548\0\ucb88\0\ucbbc"+
    "\0\ucbf0\0\ucc24\0\ucc58\0\ucc8c\0\uccc0\0\u0548\0\u0548\0\uccf4"+
    "\0\ucd28\0\ucd5c\0\u0548\0\ucd90\0\u0548\0\u0548\0\ucdc4\0\u0548"+
    "\0\u0548\0\ucdf8\0\uce2c\0\u0548\0\uce60\0\uce94\0\ucec8\0\ucefc"+
    "\0\u0548\0\ucf30\0\ucf64\0\ucf98\0\ucfcc\0\ud000\0\ud034\0\u0888"+
    "\0\ud068\0\ud09c\0\ud0d0\0\ud104\0\ud138\0\ud16c\0\ud1a0\0\ud1d4"+
    "\0\u0888\0\ud208\0\ud23c\0\ud270\0\u0548\0\ud2a4\0\ud2d8\0\ud30c"+
    "\0\ud340\0\u0548\0\ud374\0\ud3a8\0\ud3dc\0\ud410\0\ud444\0\ud478"+
    "\0\ud4ac\0\ud4e0\0\ud514\0\ud548\0\ud57c\0\ud5b0\0\ud5e4\0\u0548"+
    "\0\ud618\0\ud64c\0\u0548\0\u0548\0\u0548\0\ud680\0\ud6b4\0\ud6e8"+
    "\0\ud71c\0\ud750\0\ud784\0\ud7b8\0\ud7ec\0\ud820\0\ud854\0\ud888"+
    "\0\ud8bc\0\ud8f0\0\ud924\0\u0548\0\u0548\0\u0548\0\ud958\0\ud98c"+
    "\0\u0548\0\ud9c0\0\ud9f4\0\uda28\0\u0548\0\uda5c\0\uda90\0\udac4"+
    "\0\udaf8\0\udb2c\0\u0548\0\u0548\0\udb60\0\udb94\0\udbc8\0\u0548"+
    "\0\udbfc\0\udc30\0\udc64\0\udc98\0\udccc\0\udd00\0\udd34\0\u0888"+
    "\0\u0888\0\udd68\0\u0888\0\u0888\0\udd9c\0\u0888\0\uddd0\0\ude04"+
    "\0\ude38\0\ude6c\0\udea0\0\uded4\0\udf08\0\u0548\0\u0888\0\udf3c"+
    "\0\u0548\0\udf70\0\u0888\0\u0888\0\u0888\0\udfa4\0\udfd8\0\ue00c"+
    "\0\ue040\0\ue074\0\ue0a8\0\ue0dc\0\ue110\0\u0548\0\ue144\0\ue178"+
    "\0\ue1ac\0\u0888\0\u0888\0\u0888\0\u0548\0\ue1e0\0\ue214\0\ue248"+
    "\0\ue27c\0\u0548\0\ue2b0\0\ue2e4\0\ue318\0\ue34c\0\u0548\0\ue380"+
    "\0\ue3b4\0\u0888\0\ue3e8\0\ue41c\0\ue450\0\ue484\0\ue4b8\0\ue4ec"+
    "\0\ue520\0\u0888\0\ue554\0\ue588\0\ue5bc\0\ue5f0\0\u0888\0\ue624"+
    "\0\u0888\0\ue658\0\u0888\0\u0888\0\u0888\0\ue68c\0\ue6c0\0\u0548"+
    "\0\ue6f4\0\ue728\0\ue75c\0\ue790\0\ue7c4\0\u0888\0\u0888\0\u0888"+
    "\0\ue7f8\0\ue82c\0\ue860\0\u0888\0\ue894\0\ue8c8\0\u0548\0\ue8fc"+
    "\0\u0888\0\u0888\0\u0888\0\ue930\0\ue964\0\ue998\0\ue9cc\0\u0888"+
    "\0\uea00\0\uea34\0\uea68\0\uea9c\0\uead0\0\u0888\0\ueb04\0\ueb38"+
    "\0\ueb6c\0\ueba0\0\uebd4\0\uec08\0\uec3c\0\uec70\0\ueca4\0\uecd8"+
    "\0\ued0c\0\u0888\0\u0888\0\u0888\0\u0888\0\ued40\0\u0888\0\ued74"+
    "\0\ueda8\0\ueddc\0\u0548\0\uee10\0\u0888\0\uee44\0\u0548\0\uee78"+
    "\0\ueeac\0\ueee0\0\u0888\0\u0548\0\u0888\0\uef14\0\uef48\0\uef7c"+
    "\0\u0888\0\uefb0\0\u0548\0\uefe4\0\uf018\0\uf04c\0\uf080\0\uf0b4"+
    "\0\u0548\0\u0548\0\u0548\0\u0548\0\uf0e8\0\u0888\0\u0888\0\uf11c"+
    "\0\u0888\0\u0888\0\uf150\0\uf184\0\uf1b8\0\uf1ec\0\u0888\0\uf220"+
    "\0\uf254\0\uf288\0\uf2bc\0\uf2f0\0\uf324\0\uf358\0\u0888\0\uf38c"+
    "\0\u0888\0\u0888\0\u0548\0\uf3c0\0\u0888\0\uf3f4\0\uf428\0\uf45c"+
    "\0\uf490\0\uf4c4\0\uf4f8\0\u0888\0\uf52c\0\uf560\0\u0888\0\u0888"+
    "\0\uf594\0\u0888\0\u0888\0\u0888\0\u0888\0\uf5c8\0\uf5fc\0\u0888";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\3\4\1\37"+
    "\1\35\1\40\1\41\1\35\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\3\55"+
    "\66\0\1\4\33\0\3\4\25\0\1\4\1\56\32\0"+
    "\3\4\24\0\3\57\1\60\53\57\3\0\1\57\1\0"+
    "\5\61\1\60\51\61\3\0\1\61\7\0\1\35\1\62"+
    "\2\35\1\63\1\64\1\65\1\35\1\66\2\35\1\67"+
    "\1\70\1\71\2\35\1\72\2\35\1\73\3\35\3\0"+
    "\5\35\25\0\1\74\5\35\1\75\4\35\1\76\1\35"+
    "\1\77\1\100\1\35\1\72\1\101\1\35\1\102\3\35"+
    "\3\0\5\35\25\0\5\35\1\103\1\35\1\104\1\105"+
    "\1\35\1\106\1\35\1\107\1\110\2\35\1\72\1\111"+
    "\2\35\1\112\2\35\3\0\1\113\1\114\3\35\25\0"+
    "\1\115\1\35\1\116\6\35\1\117\1\35\1\120\1\121"+
    "\1\122\1\123\1\35\1\72\1\124\1\35\1\125\3\35"+
    "\3\0\5\35\25\0\1\126\1\35\1\127\6\35\1\130"+
    "\2\35\1\131\1\35\1\132\1\35\1\72\1\133\3\35"+
    "\1\134\1\35\3\0\5\35\25\0\1\135\1\136\1\137"+
    "\1\140\1\141\1\35\1\142\2\35\1\143\6\35\1\72"+
    "\1\144\1\35\1\145\1\35\1\146\1\35\3\0\5\35"+
    "\25\0\1\147\1\35\1\150\6\35\1\151\6\35\1\72"+
    "\1\152\1\35\1\153\1\35\1\154\1\35\3\0\5\35"+
    "\25\0\1\155\17\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\156\1\35\1\157\15\35\1\72\1\160\1\35\1\161"+
    "\3\35\3\0\5\35\25\0\5\35\1\162\1\163\1\35"+
    "\1\164\2\35\1\165\4\35\1\166\6\35\3\0\5\35"+
    "\25\0\2\35\1\167\6\35\1\170\2\35\1\171\1\172"+
    "\2\35\1\72\1\173\5\35\3\0\5\35\25\0\1\174"+
    "\5\35\1\175\2\35\1\176\2\35\1\177\3\35\1\72"+
    "\1\200\5\35\3\0\5\35\25\0\1\201\1\35\1\202"+
    "\3\35\1\203\2\35\1\204\1\35\1\205\2\35\1\206"+
    "\1\35\1\72\1\207\1\35\1\210\3\35\3\0\5\35"+
    "\25\0\1\211\1\35\1\212\6\35\1\213\6\35\1\72"+
    "\1\214\5\35\3\0\5\35\25\0\2\35\1\215\6\35"+
    "\1\216\6\35\1\72\6\35\3\0\5\35\25\0\1\217"+
    "\1\35\1\220\6\35\1\221\3\35\1\222\2\35\1\72"+
    "\1\223\3\35\1\224\1\35\3\0\5\35\25\0\1\35"+
    "\1\225\1\35\1\226\1\227\2\35\1\230\1\231\2\35"+
    "\1\232\1\233\2\35\1\234\1\72\2\35\1\235\1\236"+
    "\2\35\3\0\5\35\25\0\11\35\1\237\2\35\1\240"+
    "\1\35\1\241\1\35\1\72\1\242\5\35\3\0\5\35"+
    "\25\0\3\35\1\243\1\35\1\244\2\35\1\245\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\246\15\35"+
    "\1\72\1\247\1\35\1\250\3\35\3\0\5\35\25\0"+
    "\20\35\1\72\6\35\3\0\5\35\25\0\2\35\1\251"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\2\35\1\252\3\35\3\0\5\35\25\0\2\35\1\253"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\2\35\1\254\3\35\3\0\5\35\66\0\1\255\63\0"+
    "\1\256\74\0\1\55\4\0\1\257\33\0\3\257\32\0"+
    "\1\35\1\260\16\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\35\1\261\3\35\1\262\12\35\1\72\6\35\3\0"+
    "\5\35\25\0\6\35\1\263\1\264\10\35\1\72\6\35"+
    "\3\0\5\35\25\0\6\35\1\265\11\35\1\72\4\35"+
    "\1\266\1\35\3\0\5\35\25\0\4\35\1\267\13\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\270\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\3\35\1\271\1\272"+
    "\1\273\7\35\1\274\2\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\20\275\1\72\16\275\25\0\4\35"+
    "\1\276\13\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\277\4\35\1\300\2\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\301\17\35\1\72\1\302\5\35\3\0\5\35"+
    "\25\0\1\303\17\35\1\72\6\35\3\0\5\35\25\0"+
    "\6\35\1\304\1\35\1\305\3\35\1\306\1\307\1\35"+
    "\1\310\1\72\2\35\1\311\1\312\2\35\3\0\5\35"+
    "\25\0\14\35\1\313\3\35\1\72\6\35\3\0\5\35"+
    "\25\0\11\35\1\314\6\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\315\1\35\1\316\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\317\3\35\1\320\1\35\1\321\1\322"+
    "\10\35\1\72\6\35\3\0\5\35\25\0\11\35\1\323"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\14\35\1\324"+
    "\3\35\1\72\6\35\3\0\5\35\25\0\5\35\1\325"+
    "\12\35\1\72\6\35\3\0\5\35\25\0\3\35\1\326"+
    "\14\35\1\72\6\35\3\0\5\35\25\0\11\35\1\327"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\2\35\1\330\3\35\3\0\5\35\25\0\1\35\1\331"+
    "\2\35\1\332\4\35\1\333\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\35\1\334\4\35\1\335\3\35\1\336"+
    "\5\35\1\72\6\35\3\0\5\35\25\0\14\35\1\337"+
    "\3\35\1\72\6\35\3\0\5\35\25\0\1\35\1\340"+
    "\16\35\1\72\6\35\3\0\5\35\25\0\11\35\1\341"+
    "\6\35\1\72\1\342\5\35\3\0\5\35\25\0\20\35"+
    "\1\72\2\35\1\343\3\35\3\0\5\35\25\0\5\35"+
    "\1\344\3\35\1\345\6\35\1\72\6\35\3\0\5\35"+
    "\25\0\14\35\1\346\3\35\1\72\6\35\3\0\5\35"+
    "\25\0\3\35\1\347\11\35\1\350\1\35\1\351\1\72"+
    "\6\35\3\0\5\35\25\0\5\35\1\352\6\35\1\353"+
    "\3\35\1\72\6\35\3\0\1\35\1\354\3\35\25\0"+
    "\20\35\1\72\3\35\1\355\2\35\3\0\5\35\25\0"+
    "\1\356\17\35\1\72\2\35\1\357\3\35\3\0\5\35"+
    "\25\0\1\360\1\35\1\361\11\35\1\362\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\3\35\1\363\14\35\1\72"+
    "\6\35\3\0\5\35\25\0\3\35\1\364\14\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\72\3\35\1\365"+
    "\2\35\3\0\5\35\25\0\14\35\1\366\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\367\1\370\1\35\1\371"+
    "\1\372\3\35\1\373\1\35\1\374\2\35\1\375\2\35"+
    "\1\72\6\35\3\0\1\376\4\35\25\0\1\377\1\35"+
    "\1\u0100\15\35\1\72\6\35\3\0\5\35\25\0\1\u0101"+
    "\13\35\1\u0102\3\35\1\72\1\u0103\5\35\3\0\5\35"+
    "\25\0\12\35\1\u0104\5\35\1\72\6\35\3\0\2\35"+
    "\1\u0105\2\35\25\0\14\35\1\u0106\3\35\1\72\2\35"+
    "\1\u0107\3\35\3\0\5\35\25\0\3\35\1\u0108\13\35"+
    "\1\u0109\1\72\3\35\1\u010a\2\35\3\0\5\35\25\0"+
    "\10\35\1\u010b\7\35\1\72\3\35\1\u010c\2\35\3\0"+
    "\5\35\25\0\4\35\1\u010d\13\35\1\72\4\35\1\u010e"+
    "\1\35\3\0\5\35\25\0\1\35\1\u010f\1\35\1\u0110"+
    "\1\u0111\1\u0112\7\35\1\u0113\1\35\1\u0114\1\72\6\35"+
    "\3\0\5\35\25\0\5\35\1\u0115\1\35\1\u0116\10\35"+
    "\1\72\6\35\3\0\5\35\25\0\20\35\1\72\1\35"+
    "\1\u0117\4\35\3\0\5\35\25\0\3\35\1\u0118\14\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u0119\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\14\35\1\u011a\1\u011b"+
    "\2\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u011c"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\12\35\1\u011d"+
    "\5\35\1\72\6\35\3\0\1\35\1\u011e\3\35\25\0"+
    "\4\35\1\u011f\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\72\3\35\1\u0120\2\35\3\0\5\35\25\0"+
    "\2\35\1\u0121\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\3\35\1\u0122\1\u0123\1\u0124\1\u0125\1\u0126\1\35\1\u0127"+
    "\6\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\20\275\1\72\1\u0128\15\275\25\0\10\35\1\u0129\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\7\35\1\u012a\10\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u012b\15\35"+
    "\1\72\1\u012c\5\35\3\0\5\35\25\0\20\35\1\72"+
    "\1\u012d\5\35\3\0\5\35\25\0\15\35\1\u012e\2\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u012f\3\35"+
    "\1\u0130\1\u0131\2\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\72\1\u0132\5\35\3\0\5\35\25\0\14\35"+
    "\1\u0133\3\35\1\72\1\u0134\5\35\3\0\5\35\25\0"+
    "\10\35\1\u0135\7\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\u0136\1\u0137\1\u0138\1\u0139\1\u013a\1\u013b\1\u013c\1\u013d"+
    "\1\u013e\2\35\1\u013f\1\u0140\1\u0141\2\35\1\72\1\35"+
    "\1\u0142\1\35\1\u0143\2\35\3\0\5\35\25\0\12\35"+
    "\1\u0144\5\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\72\2\35\1\u0145\3\35\3\0\5\35\25\0\10\35"+
    "\1\u0146\7\35\1\72\6\35\3\0\5\35\25\0\5\35"+
    "\1\u0147\11\35\1\u0148\1\72\6\35\3\0\5\35\25\0"+
    "\1\u0149\4\35\1\u014a\2\35\1\u014b\2\35\1\u014c\4\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u014d\7\35"+
    "\1\72\3\35\1\u014e\2\35\3\0\5\35\25\0\1\35"+
    "\1\u014f\16\35\1\72\1\35\1\u0150\4\35\3\0\5\35"+
    "\25\0\1\u0151\17\35\1\72\6\35\3\0\5\35\25\0"+
    "\12\35\1\u0152\5\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\35\1\u0153\16\35\1\72\6\35\3\0\5\35\25\0"+
    "\13\35\1\u0154\4\35\1\72\6\35\3\0\5\35\25\0"+
    "\10\35\1\u0155\7\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\u0156\10\35\1\u0157\6\35\1\72\1\u0158\5\35\3\0"+
    "\5\35\25\0\4\35\1\u0159\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\35\1\u015a\16\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u015b\1\35\1\u015c\13\35\1\72"+
    "\6\35\3\0\5\35\25\0\16\35\1\u015d\1\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u015e\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\13\35\1\u015f\4\35\1\72"+
    "\6\35\3\0\5\35\25\0\6\35\1\u0160\3\35\1\u0161"+
    "\5\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\6\35\3\0\3\35\1\u0162\1\35\25\0\4\35\1\u0163"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u0164"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u0165"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u0166"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u0167"+
    "\6\35\1\u0168\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\14\35\1\u0169\3\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\72\1\u016a\5\35\3\0\5\35\25\0\1\u016b"+
    "\1\35\1\u016c\6\35\1\u016d\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u016e\1\u016f\1\u0170\2\35\1\u0171"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\5\35\1\u0172"+
    "\6\35\1\u0173\3\35\1\72\3\35\1\u0174\2\35\3\0"+
    "\5\35\25\0\6\35\1\u0175\1\u0176\10\35\1\72\6\35"+
    "\3\0\5\35\25\0\15\35\1\u0177\2\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\4\35\1\u0178\1\35"+
    "\3\0\5\35\25\0\2\35\1\u0179\15\35\1\72\1\u017a"+
    "\5\35\3\0\5\35\25\0\14\35\1\u017b\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\5\35\1\u017c\12\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u017d\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u017e\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u017f\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\u0180\17\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u0181\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\1\u0182\17\35\1\72\6\35\3\0"+
    "\5\35\25\0\16\35\1\u0183\1\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u0184\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\1\u0185\5\35\3\0\5\35"+
    "\25\0\16\35\1\u0186\1\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\35\1\u0187\16\35\1\72\6\35\3\0\5\35"+
    "\25\0\15\35\1\u0188\2\35\1\72\6\35\3\0\5\35"+
    "\25\0\5\35\1\u0189\12\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\35\1\u018a\3\35\1\u018b\12\35\1\72\6\35"+
    "\3\0\5\35\25\0\14\35\1\u018c\3\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u018d\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\4\35\1\u018e\1\u018f\5\35\1\u0190"+
    "\4\35\1\72\6\35\3\0\5\35\25\0\14\35\1\u0191"+
    "\3\35\1\72\6\35\3\0\5\35\25\0\15\35\1\u0192"+
    "\2\35\1\72\2\35\1\u0193\3\35\3\0\5\35\25\0"+
    "\20\35\1\72\1\u0194\5\35\3\0\5\35\25\0\10\35"+
    "\1\u0195\7\35\1\72\6\35\3\0\5\35\25\0\3\35"+
    "\1\u0196\14\35\1\72\3\35\1\u0197\2\35\3\0\5\35"+
    "\25\0\14\35\1\u0198\3\35\1\72\6\35\3\0\5\35"+
    "\25\0\15\35\1\u0199\2\35\1\72\6\35\3\0\5\35"+
    "\25\0\14\35\1\u019a\3\35\1\72\6\35\3\0\5\35"+
    "\25\0\17\35\1\u019b\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u019c\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\u019d\6\35\3\0\5\35\25\0\11\35\1\u019e"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\1\u019f\5\35\3\0\5\35\25\0\2\35\1\u01a0\6\35"+
    "\1\u01a1\6\35\1\72\6\35\3\0\5\35\25\0\1\u01a2"+
    "\17\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u01a3"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u01a4"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u01a5"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\5\35\1\u01a6\3\0\5\35\25\0\6\35\1\u01a7\11\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u01a8\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\13\35\1\u01a9\4\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u01aa\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\35\1\u01ab\10\35"+
    "\1\u01ac\5\35\1\72\6\35\3\0\5\35\25\0\5\35"+
    "\1\u01ad\12\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u01ae\6\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u01af\7\35\1\72\6\35\3\0\5\35\25\0\12\35"+
    "\1\u01b0\5\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u01b1\15\35\1\72\6\35\3\0\5\35\25\0\15\35"+
    "\1\u01b2\2\35\1\72\6\35\3\0\5\35\25\0\15\35"+
    "\1\u01b3\2\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u01b4\13\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\72\3\35\1\u01b5\2\35\3\0\5\35\25\0\4\35"+
    "\1\u01b6\13\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u01b7\15\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u01b8\6\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u01b9\15\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u01ba\7\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u01bb\7\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\72\1\u01bc\1\35\1\u01bd\3\35\3\0\5\35\25\0"+
    "\2\35\1\u01be\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u01bf\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u01c0\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\14\35\1\u01c1\3\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u01c2\13\35\1\72\2\35\1\u01c3\3\35\3\0"+
    "\5\35\25\0\1\u01c4\17\35\1\72\6\35\3\0\5\35"+
    "\25\0\4\35\1\u01c5\1\35\1\u01c6\11\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\3\35\1\u01c7\2\35"+
    "\3\0\5\35\25\0\2\35\1\u01c8\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\2\35\1\u01c9\3\35"+
    "\3\0\5\35\25\0\1\35\1\u01ca\16\35\1\72\6\35"+
    "\3\0\5\35\25\0\1\35\1\u01cb\16\35\1\72\6\35"+
    "\3\0\5\35\25\0\4\35\1\u01cc\3\35\1\u01cd\3\35"+
    "\1\u01ce\3\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u01cf\6\35\1\72\6\35\3\0\5\35\25\0\3\35"+
    "\1\u01d0\14\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u01d1\7\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u01d2\15\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u01d3\13\35\1\72\6\35\3\0\5\35\25\0\14\35"+
    "\1\u01d4\3\35\1\72\6\35\3\0\5\35\25\0\14\35"+
    "\1\u01d5\3\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u01d6\13\35\1\u01d7\6\35\3\0\5\35\25\0\1\35"+
    "\1\u01d8\16\35\1\72\6\35\3\0\5\35\25\0\17\35"+
    "\1\u01d9\1\72\6\35\3\0\5\35\25\0\1\u01da\1\35"+
    "\1\u01db\15\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\u01dc\6\35\3\0\5\35\25\0\11\35\1\u01dd\3\35"+
    "\1\u01de\2\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u01df\1\35\1\u01e0\13\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\u01e1\17\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\35\1\u01e2\2\35\1\u01e3\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u01e4\6\35\1\u01e5\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\72\2\35\1\u01e6"+
    "\3\35\3\0\5\35\25\0\1\u01e7\2\35\1\u01e8\14\35"+
    "\1\72\6\35\3\0\5\35\25\0\11\35\1\u01e9\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u01ea\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\15\35\1\u01eb\2\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\u01ec\17\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\72\4\35\1\u01ed"+
    "\1\35\3\0\5\35\25\0\20\35\1\72\2\35\1\u01ee"+
    "\3\35\3\0\5\35\25\0\11\35\1\u01ef\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\u01f0\17\35\1\72\6\35"+
    "\3\0\5\35\25\0\4\35\1\u01f1\13\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u01f2\14\35\1\u01f3\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u01f4\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\72\2\35\1\u01f5"+
    "\3\35\3\0\5\35\25\0\20\35\1\72\1\u01f6\5\35"+
    "\3\0\5\35\25\0\3\35\1\u01f7\1\u01f8\13\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u01f9\6\35\1\u01fa"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\1\u01fb\17\35"+
    "\1\72\6\35\3\0\5\35\25\0\4\35\1\u01fc\13\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\u01fd\16\275\25\0\2\35\1\u01fe\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\11\35\1\u01ff\6\35\1\72\6\35"+
    "\3\0\5\35\25\0\1\u0200\17\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\2\35\1\u0201\3\35\3\0"+
    "\5\35\25\0\17\35\1\u0202\1\72\6\35\3\0\5\35"+
    "\25\0\5\35\1\u0203\12\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\u0204\17\35\1\72\6\35\3\0\5\35\25\0"+
    "\5\35\1\u0205\12\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u0206\12\35\1\u0207\2\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\3\35\1\u0208\2\35\3\0"+
    "\5\35\25\0\2\35\1\u0209\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u020a\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\6\35\1\u020b\11\35\1\72\6\35\3\0"+
    "\5\35\25\0\6\35\1\u020c\11\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u020d\15\35\1\72\1\u020e\5\35"+
    "\3\0\5\35\25\0\15\35\1\u020f\2\35\1\72\6\35"+
    "\3\0\5\35\25\0\15\35\1\u0210\2\35\1\72\1\u0211"+
    "\5\35\3\0\5\35\25\0\20\35\1\72\2\35\1\u0212"+
    "\3\35\3\0\5\35\25\0\2\35\1\u0213\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u0214\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u0215\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\u0216\17\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u0217\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\2\35\1\u0218\3\35"+
    "\3\0\5\35\25\0\1\u0219\1\35\1\u021a\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u021b\2\35\1\u021c"+
    "\3\35\1\72\6\35\3\0\5\35\25\0\1\u021d\17\35"+
    "\1\72\1\u021e\5\35\3\0\5\35\25\0\16\35\1\u021f"+
    "\1\35\1\72\6\35\3\0\5\35\25\0\10\35\1\u0220"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u0221"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u0222"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\6\35\1\u0223"+
    "\11\35\1\72\6\35\3\0\5\35\25\0\5\35\1\u0224"+
    "\12\35\1\72\6\35\3\0\5\35\25\0\12\35\1\u0225"+
    "\5\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u0226"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\1\u0227\1\35"+
    "\1\u0228\15\35\1\72\5\35\1\u0229\3\0\5\35\25\0"+
    "\11\35\1\u022a\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\72\5\35\1\u022b\3\0\5\35\25\0\20\35"+
    "\1\u022c\6\35\3\0\5\35\25\0\6\35\1\u022d\11\35"+
    "\1\72\6\35\3\0\5\35\25\0\16\35\1\u022e\1\35"+
    "\1\72\6\35\3\0\5\35\25\0\20\35\1\72\5\35"+
    "\1\u022f\3\0\5\35\25\0\20\35\1\72\1\u0230\5\35"+
    "\3\0\5\35\25\0\1\u0231\17\35\1\72\6\35\3\0"+
    "\5\35\25\0\10\35\1\u0232\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\10\35\1\u0233\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\35\1\u0234\16\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u0235\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\2\35\1\u0236\3\35\3\0"+
    "\5\35\25\0\10\35\1\u0237\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\11\35\1\u0238\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u0239\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\14\35\1\u023a\3\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u023b\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\u023c\17\35\1\72\6\35\3\0\5\35"+
    "\25\0\2\35\1\u023d\15\35\1\72\6\35\3\0\5\35"+
    "\25\0\3\35\1\u023e\14\35\1\72\6\35\3\0\5\35"+
    "\25\0\4\35\1\u023f\13\35\1\72\6\35\3\0\5\35"+
    "\25\0\16\35\1\u0240\1\35\1\72\6\35\3\0\5\35"+
    "\25\0\4\35\1\u0241\13\35\1\72\6\35\3\0\5\35"+
    "\25\0\10\35\1\u0242\7\35\1\72\6\35\3\0\5\35"+
    "\25\0\15\35\1\u0243\2\35\1\72\6\35\3\0\5\35"+
    "\25\0\6\35\1\u0244\11\35\1\72\5\35\1\u0245\3\0"+
    "\5\35\25\0\10\35\1\u0246\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\12\35\1\u0247\5\35\1\72\6\35\3\0"+
    "\5\35\25\0\10\35\1\u0248\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\11\35\1\u0249\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u024a\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u024b\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u024c\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\5\35\1\u024d\12\35\1\72\6\35\3\0"+
    "\5\35\25\0\12\35\1\u024e\5\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\1\u024f\5\35\3\0\5\35"+
    "\25\0\2\35\1\u0250\15\35\1\72\2\35\1\u0251\3\35"+
    "\3\0\5\35\25\0\2\35\1\u0252\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\4\35\1\u0253\13\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\2\35\1\u0254\3\35"+
    "\3\0\5\35\25\0\4\35\1\u0255\13\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\1\u0256\5\35\3\0"+
    "\5\35\25\0\4\35\1\u0257\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\3\35\1\u0258\1\35\1\u0259\12\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u025a\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\12\35\1\u025b\5\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u025c\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\14\35\1\u025d\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\5\35\1\u025e\12\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\u025f\17\35\1\72\6\35"+
    "\3\0\5\35\25\0\14\35\1\u0260\3\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\1\u0261\5\35\3\0"+
    "\5\35\25\0\2\35\1\u0262\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\5\35\1\u0263\12\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\5\35\1\u0264\3\0\5\35"+
    "\25\0\2\35\1\u0265\15\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\u0266\17\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\u0267\6\35\3\0\5\35\25\0\1\u0268\1\35"+
    "\1\u0269\6\35\1\u026a\2\35\1\u026b\3\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\1\u026c\5\35\3\0"+
    "\5\35\25\0\11\35\1\u026d\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u026e\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\u026f\17\35\1\72\6\35\3\0\5\35"+
    "\25\0\20\35\1\72\3\35\1\u0270\2\35\3\0\5\35"+
    "\25\0\15\35\1\u0271\2\35\1\72\6\35\3\0\5\35"+
    "\25\0\4\35\1\u0272\13\35\1\72\6\35\3\0\5\35"+
    "\25\0\20\35\1\72\2\35\1\u0273\3\35\3\0\5\35"+
    "\25\0\1\u0274\17\35\1\72\1\u0275\1\35\1\u0276\3\35"+
    "\3\0\5\35\25\0\2\35\1\u0277\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\2\35\1\u0278\3\35"+
    "\3\0\5\35\25\0\20\35\1\72\4\35\1\u0279\1\35"+
    "\3\0\5\35\25\0\15\35\1\u027a\2\35\1\72\6\35"+
    "\3\0\5\35\25\0\14\35\1\u027b\3\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\1\u027c\1\u027d\1\u027e"+
    "\1\u027f\1\275\1\u0280\1\u0281\2\275\1\u0282\2\275\1\u0283"+
    "\3\275\1\72\1\u0284\1\u0285\1\u0286\1\u0287\12\275\25\0"+
    "\14\35\1\u0288\3\35\1\72\6\35\3\0\5\35\25\0"+
    "\14\35\1\u0289\3\35\1\72\6\35\3\0\5\35\25\0"+
    "\13\35\1\u028a\4\35\1\72\6\35\3\0\5\35\25\0"+
    "\15\35\1\u028b\2\35\1\72\6\35\3\0\5\35\25\0"+
    "\3\35\1\u028c\14\35\1\72\6\35\3\0\5\35\25\0"+
    "\10\35\1\u028d\3\35\1\u028e\3\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u028f\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\11\35\1\u0290\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\u0291\6\35\3\0\5\35\25\0"+
    "\20\35\1\72\1\u0292\5\35\3\0\5\35\25\0\4\35"+
    "\1\u0293\13\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u0294\15\35\1\72\6\35\3\0\5\35\25\0\14\35"+
    "\1\u0295\3\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u0296\13\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u0297\13\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u0298\15\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\72\4\35\1\u0299\1\35\3\0\5\35\25\0\2\35"+
    "\1\u029a\15\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u029b\6\35\1\72\6\35\3\0\5\35\25\0\5\35"+
    "\1\u029c\12\35\1\72\6\35\3\0\5\35\25\0\15\35"+
    "\1\u029d\2\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\72\2\35\1\u029e\3\35\3\0\5\35\25\0\2\35"+
    "\1\u029f\15\35\1\72\6\35\3\0\5\35\25\0\1\35"+
    "\1\u02a0\16\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u02a1\6\35\1\72\6\35\3\0\5\35\25\0\14\35"+
    "\1\u02a2\3\35\1\72\6\35\3\0\5\35\25\0\14\35"+
    "\1\u02a3\3\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u02a4\15\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u02a5\15\35\1\72\6\35\3\0\5\35\25\0\1\35"+
    "\1\u02a6\16\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u02a7\15\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u02a8\15\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u02a9\6\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\72\2\35\1\u02aa\3\35\3\0\5\35\25\0\6\35"+
    "\1\u02ab\11\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u02ac\13\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u02ad\7\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\u02ae\6\35\3\0\5\35\25\0\1\35\1\u02af\16\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u02b0\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\14\35\1\u02b1\3\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\72\11\275\1\u02b2\4\275\25\0\16\35\1\u02b3\1\35"+
    "\1\72\6\35\3\0\5\35\25\0\20\35\1\72\1\u02b4"+
    "\5\35\3\0\5\35\25\0\20\35\1\u02b5\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\20\275\1\72\1\u02b6\15\275"+
    "\25\0\20\35\1\72\3\35\1\u02b7\2\35\3\0\5\35"+
    "\25\0\1\u02b8\17\35\1\72\6\35\3\0\5\35\25\0"+
    "\10\35\1\u02b9\7\35\1\72\6\35\3\0\5\35\25\0"+
    "\16\35\1\u02ba\1\35\1\72\6\35\3\0\5\35\25\0"+
    "\11\35\1\u02bb\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u02bc\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\11\35\1\u02bd\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u02be\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\72\3\35\1\u02bf\2\35\3\0\5\35\25\0"+
    "\12\35\1\u02c0\5\35\1\72\6\35\3\0\5\35\25\0"+
    "\17\35\1\u02c1\1\72\6\35\3\0\5\35\25\0\15\35"+
    "\1\u02c2\2\35\1\72\6\35\3\0\5\35\25\0\5\35"+
    "\1\u02c3\1\u02c4\11\35\1\72\6\35\3\0\5\35\25\0"+
    "\11\35\1\u02c5\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\72\3\35\1\u02c6\2\35\3\0\5\35\25\0"+
    "\11\35\1\u02c7\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u02c8\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\7\35\1\u02c9\10\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u02ca\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\14\35\1\u02cb\3\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u02cc\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u02cd\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u02ce\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u02cf\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\u02d0\17\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\72\6\35\3\0\1\35\1\u02d1\3\35\25\0\1\35"+
    "\1\u02d2\16\35\1\72\6\35\3\0\5\35\25\0\15\35"+
    "\1\u02d3\2\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u02d4\6\35\1\72\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\1\275\1\u02d5\16\275\1\72\16\275\25\0\14\35"+
    "\1\u02d6\3\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u02d7\7\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u02d8\13\35\1\72\6\35\3\0\5\35\25\0\3\35"+
    "\1\u02d9\14\35\1\72\6\35\3\0\5\35\25\0\1\u02da"+
    "\17\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u02db"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\15\35\1\u02dc"+
    "\2\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u02dd"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\20\35\1\u02de"+
    "\6\35\3\0\5\35\25\0\2\35\1\u02df\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\12\35\1\u02e0\5\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u02e1\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\72\1\u02e2\5\35"+
    "\3\0\5\35\25\0\11\35\1\u02e3\6\35\1\72\6\35"+
    "\3\0\5\35\25\0\14\35\1\u02e4\3\35\1\72\6\35"+
    "\3\0\5\35\25\0\1\u02e5\17\35\1\72\6\35\3\0"+
    "\5\35\25\0\14\35\1\u02e6\3\35\1\72\6\35\3\0"+
    "\5\35\25\0\14\35\1\u02e7\3\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u02e8\7\35\1\u02e9\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\13\35\1\u02ea\4\35\1\72"+
    "\6\35\3\0\5\35\25\0\14\35\1\u02eb\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\72\3\35\1\u02ec"+
    "\2\35\3\0\5\35\25\0\14\35\1\u02ed\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u02ee\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\4\35\1\u02ef\13\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\u02f0\17\35\1\72\6\35"+
    "\3\0\5\35\25\0\10\35\1\u02f1\7\35\1\72\6\35"+
    "\3\0\5\35\25\0\11\35\1\u02f2\6\35\1\72\6\35"+
    "\3\0\5\35\25\0\11\35\1\u02f3\6\35\1\72\6\35"+
    "\3\0\5\35\25\0\7\35\1\u02f4\10\35\1\72\6\35"+
    "\3\0\5\35\25\0\4\35\1\u02f5\13\35\1\72\6\35"+
    "\3\0\5\35\25\0\6\35\1\u02f6\11\35\1\72\6\35"+
    "\3\0\5\35\25\0\15\35\1\u02f7\2\35\1\72\6\35"+
    "\3\0\5\35\25\0\11\35\1\u02f8\6\35\1\72\6\35"+
    "\3\0\5\35\25\0\4\35\1\u02f9\13\35\1\72\6\35"+
    "\3\0\5\35\25\0\12\35\1\u02fa\5\35\1\72\6\35"+
    "\3\0\5\35\25\0\5\35\1\u02fb\12\35\1\u02fc\6\35"+
    "\3\0\5\35\25\0\1\u02fd\17\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u02fe\13\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\7\275\1\u02ff\10\275\1\72"+
    "\16\275\25\0\11\35\1\u0300\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\15\35\1\u0301\2\35\1\u0302\6\35\3\0"+
    "\5\35\25\0\12\35\1\u0303\5\35\1\72\6\35\3\0"+
    "\5\35\25\0\14\35\1\u0304\3\35\1\72\6\35\3\0"+
    "\5\35\25\0\14\35\1\u0305\3\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\5\35\1\u0306\3\0\5\35"+
    "\25\0\20\35\1\72\5\35\1\u0307\3\0\5\35\25\0"+
    "\20\35\1\72\5\35\1\u0308\3\0\5\35\25\0\20\35"+
    "\1\72\1\u0309\5\35\3\0\5\35\25\0\14\35\1\u030a"+
    "\3\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\1\u030b\5\35\3\0\5\35\25\0\14\35\1\u030c\3\35"+
    "\1\72\6\35\3\0\5\35\25\0\13\35\1\u030d\4\35"+
    "\1\72\6\35\3\0\5\35\25\0\14\35\1\u030e\3\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u030f\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\35\1\u0310\16\35"+
    "\1\72\6\35\3\0\5\35\25\0\20\35\1\72\2\35"+
    "\1\u0311\3\35\3\0\5\35\25\0\4\35\1\u0312\13\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u0313\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u0314\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\5\35\1\u0315\12\35"+
    "\1\72\6\35\3\0\5\35\25\0\11\35\1\u0316\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u0317\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\12\35\1\u0318\5\35"+
    "\1\72\6\35\3\0\5\35\25\0\15\35\1\u0319\2\35"+
    "\1\72\6\35\3\0\5\35\25\0\14\35\1\u031a\3\35"+
    "\1\72\6\35\3\0\5\35\25\0\14\35\1\u031b\3\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\u031c\17\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u031d\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\14\35\1\u031e\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\15\35\1\u031f\2\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u0320\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u0321\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u0322\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u0323\2\35\1\u0324"+
    "\12\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u0325"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u0326"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\5\35\1\u0327"+
    "\12\35\1\72\6\35\3\0\5\35\25\0\6\35\1\u0328"+
    "\11\35\1\72\6\35\3\0\5\35\25\0\10\35\1\u0329"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\1\35\1\u032a"+
    "\16\35\1\72\6\35\3\0\5\35\25\0\10\35\1\u032b"+
    "\6\35\1\u032c\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u032d\7\35\1\72\6\35\3\0\5\35\25\0\14\35"+
    "\1\u032e\3\35\1\72\6\35\3\0\5\35\25\0\15\35"+
    "\1\u032f\2\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\u0330\6\35\3\0\5\35\25\0\1\35\1\u0331\16\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\5\275"+
    "\1\u0332\12\275\1\72\16\275\25\0\11\35\1\u0333\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u0334\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u0335\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\20\35\1\72\1\u0336"+
    "\5\35\3\0\5\35\25\0\15\35\1\u0337\2\35\1\72"+
    "\6\35\3\0\5\35\25\0\12\35\1\u0338\5\35\1\72"+
    "\6\35\3\0\5\35\25\0\5\35\1\u0339\12\35\1\72"+
    "\6\35\3\0\5\35\25\0\4\35\1\u033a\13\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u033b\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\4\35\1\u033c\13\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u033d\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u033e\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u033f\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\u0340\17\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u0341\15\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\6\275\1\u0342\11\275"+
    "\1\72\16\275\20\0\1\275\4\0\1\u0343\17\275\1\72"+
    "\1\u0344\15\275\20\0\1\275\4\0\7\275\1\u0345\10\275"+
    "\1\72\16\275\20\0\1\275\4\0\2\275\1\u0346\15\275"+
    "\1\72\16\275\20\0\1\275\4\0\2\275\1\u0347\1\275"+
    "\1\u0348\13\275\1\72\2\275\1\u0349\13\275\20\0\1\275"+
    "\4\0\2\275\1\u034a\6\275\1\u034b\6\275\1\72\16\275"+
    "\20\0\1\275\4\0\13\275\1\u034c\4\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u034d\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\13\275\1\u034e\4\275\1\72\16\275"+
    "\20\0\1\275\4\0\14\275\1\u034f\3\275\1\72\16\275"+
    "\20\0\1\275\4\0\10\275\1\u0350\7\275\1\72\16\275"+
    "\20\0\1\275\4\0\20\275\1\72\2\275\1\u0351\13\275"+
    "\25\0\20\35\1\72\1\u0352\5\35\3\0\5\35\25\0"+
    "\4\35\1\u0353\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\6\35\1\u0354\11\35\1\72\6\35\3\0\5\35\25\0"+
    "\10\35\1\u0355\7\35\1\72\6\35\3\0\5\35\25\0"+
    "\6\35\1\u0356\11\35\1\72\6\35\3\0\5\35\25\0"+
    "\10\35\1\u0357\7\35\1\72\6\35\3\0\5\35\20\0"+
    "\1\275\4\0\1\275\1\u0358\16\275\1\72\16\275\25\0"+
    "\14\35\1\u0359\3\35\1\72\6\35\3\0\5\35\25\0"+
    "\11\35\1\u035a\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u035b\3\35\1\u035c\11\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\u035d\17\35\1\72\6\35\3\0\5\35"+
    "\25\0\11\35\1\u035e\6\35\1\72\6\35\3\0\5\35"+
    "\25\0\2\35\1\u035f\15\35\1\72\6\35\3\0\5\35"+
    "\25\0\11\35\1\u0360\6\35\1\72\6\35\3\0\5\35"+
    "\25\0\10\35\1\u0361\7\35\1\72\6\35\3\0\5\35"+
    "\25\0\11\35\1\u0362\6\35\1\72\6\35\3\0\5\35"+
    "\25\0\12\35\1\u0363\5\35\1\72\6\35\3\0\5\35"+
    "\25\0\10\35\1\u0364\7\35\1\72\6\35\3\0\5\35"+
    "\25\0\16\35\1\u0365\1\35\1\72\6\35\3\0\5\35"+
    "\25\0\20\35\1\72\1\u0366\5\35\3\0\5\35\25\0"+
    "\11\35\1\u0367\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\u0368\17\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u0369\7\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u036a\7\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u036b\13\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u036c\7\35\1\72\6\35\3\0\5\35\25\0\5\35"+
    "\1\u036d\12\35\1\72\6\35\3\0\5\35\25\0\1\u036e"+
    "\17\35\1\72\6\35\3\0\5\35\25\0\5\35\1\u036f"+
    "\12\35\1\72\6\35\3\0\5\35\25\0\1\u0370\17\35"+
    "\1\72\6\35\3\0\5\35\25\0\12\35\1\u0371\5\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\72\3\275\1\u0372\12\275\25\0\2\35\1\u0373\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\5\35\1\u0374\12\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\u0375\17\35\1\72"+
    "\6\35\3\0\5\35\20\0\1\275\4\0\20\275\1\72"+
    "\2\275\1\u0376\13\275\25\0\14\35\1\u0377\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\15\35\1\u0378\2\35\1\72"+
    "\6\35\3\0\5\35\20\0\1\275\4\0\1\275\1\u0379"+
    "\16\275\1\72\1\275\1\u037a\14\275\20\0\1\275\4\0"+
    "\13\275\1\u037b\4\275\1\72\16\275\25\0\1\u037c\17\35"+
    "\1\72\6\35\3\0\5\35\25\0\14\35\1\u037d\3\35"+
    "\1\72\6\35\3\0\5\35\25\0\6\35\1\u037e\11\35"+
    "\1\72\6\35\3\0\5\35\25\0\15\35\1\u037f\2\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u0380\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u0381\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u0382\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\11\35\1\u0383\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\12\35\1\u0384\5\35"+
    "\1\u0385\6\35\3\0\5\35\25\0\15\35\1\u0386\2\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\u0387\17\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u0388\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u0389\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\35\1\u038a\16\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u038b\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u038c\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\5\35\1\u038d\12\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u038e\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u038f\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u0390\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\14\35\1\u0391\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u0392\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\u0393\6\35\3\0"+
    "\5\35\25\0\1\35\1\u0394\16\35\1\72\6\35\3\0"+
    "\5\35\25\0\15\35\1\u0395\2\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u0396\15\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\u0397\17\35\1\72\6\35\3\0\5\35"+
    "\25\0\11\35\1\u0398\6\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\u0399\17\35\1\72\6\35\3\0\5\35\20\0"+
    "\1\275\4\0\20\275\1\72\1\u039a\15\275\25\0\1\u039b"+
    "\17\35\1\72\6\35\3\0\5\35\25\0\12\35\1\u039c"+
    "\5\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u039d"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\15\35\1\u039e"+
    "\2\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\1\275\1\u039f\7\275\1\u03a0\6\275\1\72\16\275\25\0"+
    "\14\35\1\u03a1\3\35\1\72\6\35\3\0\5\35\25\0"+
    "\14\35\1\u03a2\3\35\1\72\6\35\3\0\5\35\25\0"+
    "\10\35\1\u03a3\7\35\1\72\6\35\3\0\5\35\25\0"+
    "\20\35\1\72\3\35\1\u03a4\2\35\3\0\5\35\25\0"+
    "\7\35\1\u03a5\10\35\1\72\6\35\3\0\5\35\25\0"+
    "\6\35\1\u03a6\11\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\35\1\u03a7\16\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u03a8\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\10\35\1\u03a9\7\35\1\72\6\35\3\0\5\35\25\0"+
    "\7\35\1\u03aa\10\35\1\72\6\35\3\0\5\35\25\0"+
    "\11\35\1\u03ab\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\5\35\1\u03ac\12\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u03ad\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u03ae\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\11\35\1\u03af\6\35\1\72\6\35\3\0\5\35\25\0"+
    "\5\35\1\u03b0\12\35\1\72\6\35\3\0\5\35\25\0"+
    "\6\35\1\u03b1\11\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u03b2\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\10\35\1\u03b3\7\35\1\72\6\35\3\0\5\35\25\0"+
    "\1\u03b4\17\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u03b5\15\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u03b6\7\35\1\72\6\35\3\0\5\35\25\0\16\35"+
    "\1\u03b7\1\35\1\72\6\35\3\0\5\35\25\0\2\35"+
    "\1\u03b8\15\35\1\72\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\1\275\1\u03b9\16\275\1\72\16\275\25\0\12\35"+
    "\1\u03ba\5\35\1\72\6\35\3\0\5\35\25\0\5\35"+
    "\1\u03bb\12\35\1\72\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\1\u03bc\17\275\1\72\16\275\25\0\10\35\1\u03bd"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u03be"+
    "\6\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\7\275\1\u03bf\10\275\1\72\16\275\25\0\14\35\1\u03c0"+
    "\3\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u03c1"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\4\35\1\u03c2\1\35\3\0\5\35\25\0\20\35\1\72"+
    "\3\35\1\u03c3\2\35\3\0\5\35\25\0\5\35\1\u03c4"+
    "\12\35\1\72\6\35\3\0\5\35\25\0\10\35\1\u03c5"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\15\35\1\u03c6"+
    "\2\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u03c7"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u03c8"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u03c9"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u03ca"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\10\35\1\u03cb"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u03cc"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\15\35\1\u03cd"+
    "\2\35\1\72\6\35\3\0\5\35\25\0\12\35\1\u03ce"+
    "\5\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\4\35\1\u03cf\1\35\3\0\5\35\25\0\2\35\1\u03d0"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\3\35\1\u03d1"+
    "\14\35\1\72\6\35\3\0\5\35\25\0\5\35\1\u03d2"+
    "\12\35\1\72\6\35\3\0\5\35\25\0\5\35\1\u0324"+
    "\12\35\1\72\6\35\3\0\5\35\25\0\13\35\1\u03d3"+
    "\4\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u03d4"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u03d5"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\2\35\1\u03d6\3\35\3\0\5\35\25\0\2\35\1\u03d7"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\1\u03d8\17\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\72\2\275\1\u03d9\13\275\25\0\4\35\1\u03da\13\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\2\275"+
    "\1\u03db\15\275\1\72\16\275\25\0\10\35\1\u03dc\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\4\35\1\u03dd\13\35"+
    "\1\72\6\35\3\0\5\35\25\0\20\35\1\72\2\35"+
    "\1\u03de\3\35\3\0\5\35\25\0\15\35\1\u03df\2\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u03e0\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\20\35\1\72\2\35"+
    "\1\u03e1\3\35\3\0\5\35\25\0\3\35\1\u03e2\14\35"+
    "\1\72\6\35\3\0\5\35\25\0\11\35\1\u03e3\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\u03e4\1\35\1\u03e5"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u03e6"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\1\35\1\u03e7"+
    "\16\35\1\72\6\35\3\0\5\35\25\0\4\35\1\u03e8"+
    "\13\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\6\275\1\u03e9\11\275\1\72\16\275\20\0\1\275\4\0"+
    "\15\275\1\u03ea\2\275\1\72\16\275\20\0\1\275\4\0"+
    "\20\275\1\72\3\275\1\u03eb\12\275\20\0\1\275\4\0"+
    "\1\u03ec\17\275\1\72\16\275\20\0\1\275\4\0\14\275"+
    "\1\u03ed\3\275\1\72\16\275\20\0\1\275\4\0\1\u03ee"+
    "\17\275\1\72\16\275\20\0\1\275\4\0\1\u03ef\13\275"+
    "\1\u03f0\3\275\1\72\16\275\20\0\1\275\4\0\17\275"+
    "\1\u03f1\1\72\16\275\20\0\1\275\4\0\15\275\1\u03f2"+
    "\2\275\1\72\16\275\20\0\1\275\4\0\7\275\1\u03f3"+
    "\10\275\1\72\16\275\20\0\1\275\4\0\1\u03f4\1\u03f5"+
    "\2\275\1\u03f6\13\275\1\72\1\275\1\u03f7\14\275\20\0"+
    "\1\275\4\0\20\275\1\u03f8\16\275\20\0\1\275\4\0"+
    "\11\275\1\u03f9\6\275\1\72\16\275\20\0\1\275\4\0"+
    "\5\275\1\u03fa\12\275\1\72\16\275\20\0\1\275\4\0"+
    "\15\275\1\u03fb\2\275\1\72\16\275\25\0\10\35\1\u03fc"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u03fd"+
    "\6\35\1\72\6\35\3\0\5\35\25\0\1\u03fe\17\35"+
    "\1\72\6\35\3\0\5\35\25\0\20\35\1\u03ff\6\35"+
    "\3\0\5\35\25\0\12\35\1\u0400\5\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\20\275\1\72\1\u0401"+
    "\15\275\25\0\20\35\1\72\3\35\1\u0402\2\35\3\0"+
    "\5\35\25\0\10\35\1\u0403\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\6\35\1\u0404\11\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\2\35\1\u0405\3\35\3\0"+
    "\5\35\25\0\20\35\1\72\3\35\1\u0406\2\35\3\0"+
    "\5\35\25\0\7\35\1\u0407\10\35\1\72\1\u0408\5\35"+
    "\3\0\5\35\25\0\14\35\1\u0409\3\35\1\72\6\35"+
    "\3\0\5\35\25\0\10\35\1\u040a\7\35\1\72\6\35"+
    "\3\0\5\35\25\0\1\u040b\17\35\1\72\6\35\3\0"+
    "\5\35\25\0\10\35\1\u040c\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\16\35\1\u040d\1\35\1\72\6\35\3\0"+
    "\5\35\25\0\10\35\1\u040e\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u040f\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u0410\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\35\1\u0411\16\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u0412\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\35\1\u0413\2\35\1\u0414\13\35\1\72"+
    "\6\35\3\0\5\35\25\0\15\35\1\u0415\2\35\1\72"+
    "\6\35\3\0\5\35\25\0\14\35\1\u0416\3\35\1\72"+
    "\6\35\3\0\5\35\20\0\1\275\4\0\2\275\1\u0417"+
    "\15\275\1\72\16\275\25\0\20\35\1\u0418\6\35\3\0"+
    "\5\35\25\0\5\35\1\u0419\12\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\35\1\u041a\16\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\2\275\1\u041b\15\275\1\72"+
    "\16\275\25\0\20\35\1\72\1\u041c\5\35\3\0\5\35"+
    "\25\0\11\35\1\u041d\6\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\20\275\1\72\1\u041e\15\275\20\0"+
    "\1\275\4\0\14\275\1\u041f\3\275\1\72\16\275\20\0"+
    "\1\275\4\0\20\275\1\u0420\16\275\25\0\15\35\1\u0421"+
    "\2\35\1\72\6\35\3\0\5\35\25\0\1\u0422\17\35"+
    "\1\72\6\35\3\0\5\35\25\0\11\35\1\u0423\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\6\35\1\u0424\11\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\u0425\17\35\1\72"+
    "\6\35\3\0\5\35\25\0\4\35\1\u0426\13\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u0427\6\35\1\72"+
    "\6\35\3\0\5\35\20\0\1\275\4\0\1\275\1\u0428"+
    "\3\275\1\u0429\2\275\1\u042a\1\u042b\3\275\1\u042c\2\275"+
    "\1\72\16\275\25\0\2\35\1\u042d\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\4\35\1\u042e\1\35"+
    "\3\0\5\35\25\0\20\35\1\72\1\u042f\5\35\3\0"+
    "\5\35\25\0\1\u0430\17\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\35\1\u0431\16\35\1\72\6\35\3\0\5\35"+
    "\25\0\12\35\1\u0432\5\35\1\72\6\35\3\0\5\35"+
    "\25\0\7\35\1\u0433\10\35\1\72\6\35\3\0\5\35"+
    "\25\0\1\35\1\u0434\16\35\1\72\6\35\3\0\5\35"+
    "\25\0\13\35\1\u0435\4\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\20\275\1\72\1\u0436\15\275\25\0"+
    "\4\35\1\u0437\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\15\35\1\u0438\2\35\1\72\6\35\3\0\5\35\25\0"+
    "\6\35\1\u0439\11\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u043a\13\35\1\72\6\35\3\0\5\35\25\0"+
    "\6\35\1\u043b\11\35\1\72\6\35\3\0\5\35\25\0"+
    "\4\35\1\u043c\10\35\1\u043d\2\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\10\275\1\u043e\7\275\1\72"+
    "\16\275\25\0\4\35\1\u043f\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\14\35\1\u0440\3\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\20\275\1\72\1\u0441\15\275"+
    "\20\0\1\275\4\0\6\275\1\u0442\11\275\1\72\16\275"+
    "\25\0\20\35\1\72\1\u0443\5\35\3\0\5\35\25\0"+
    "\12\35\1\u0444\5\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u0445\15\35\1\72\6\35\3\0\5\35\25\0"+
    "\5\35\1\u0446\12\35\1\72\6\35\3\0\5\35\25\0"+
    "\2\35\1\u0447\6\35\1\u0448\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\5\35\1\u0449\3\35\1\u044a\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u044b\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u044c\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u044d\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\5\35\1\u044e\12\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u044f\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\7\35\1\u0450\10\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u0451\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\2\35\1\u0452\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\6\35\1\u0453\11\35\1\72"+
    "\6\35\3\0\5\35\25\0\15\35\1\u0454\2\35\1\72"+
    "\6\35\3\0\5\35\25\0\6\35\1\u0455\11\35\1\72"+
    "\6\35\3\0\5\35\25\0\12\35\1\u0456\5\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\u0457\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\20\275\1\72\1\u0458\15\275"+
    "\25\0\2\35\1\u0459\15\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\15\275\1\u045a\2\275\1\72\16\275"+
    "\25\0\12\35\1\u045b\5\35\1\72\6\35\3\0\5\35"+
    "\25\0\12\35\1\u045c\5\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\1\u045d\17\275\1\72\16\275\25\0"+
    "\20\35\1\72\1\u045e\5\35\3\0\5\35\25\0\1\u045f"+
    "\17\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\1\u0460\5\35\3\0\5\35\25\0\20\35\1\72\6\35"+
    "\3\0\2\35\1\u0461\2\35\25\0\20\35\1\u0462\6\35"+
    "\3\0\5\35\25\0\6\35\1\u0463\11\35\1\72\6\35"+
    "\3\0\5\35\25\0\12\35\1\u0464\5\35\1\72\6\35"+
    "\3\0\5\35\25\0\10\35\1\u0465\7\35\1\72\6\35"+
    "\3\0\5\35\25\0\11\35\1\u0466\6\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u0467\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\5\35\1\u0468\12\35\1\72\6\35"+
    "\3\0\5\35\25\0\15\35\1\u0469\2\35\1\72\6\35"+
    "\3\0\5\35\25\0\11\35\1\u046a\6\35\1\72\6\35"+
    "\3\0\5\35\25\0\10\35\1\u046b\7\35\1\72\6\35"+
    "\3\0\5\35\25\0\10\35\1\u046c\7\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\3\35\1\u046d\2\35"+
    "\3\0\5\35\25\0\4\35\1\u046e\13\35\1\72\6\35"+
    "\3\0\5\35\25\0\4\35\1\u046f\13\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\10\275\1\u0470\7\275"+
    "\1\72\16\275\25\0\2\35\1\u0471\15\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\4\275\1\u0472\13\275"+
    "\1\72\16\275\25\0\5\35\1\u0473\12\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u0474\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\5\35\1\u0475\12\35\1\72\6\35"+
    "\3\0\5\35\25\0\14\35\1\u0476\3\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\1\u0477\5\35\3\0"+
    "\5\35\25\0\10\35\1\u0478\7\35\1\72\6\35\3\0"+
    "\5\35\25\0\4\35\1\u0479\13\35\1\72\6\35\3\0"+
    "\5\35\25\0\1\35\1\u047a\16\35\1\72\6\35\3\0"+
    "\5\35\25\0\20\35\1\72\4\35\1\u047b\1\35\3\0"+
    "\5\35\25\0\2\35\1\u047c\15\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\15\275\1\u047d\2\275\1\72"+
    "\16\275\20\0\1\275\4\0\3\275\1\u047e\14\275\1\72"+
    "\16\275\20\0\1\275\4\0\15\275\1\u047f\2\275\1\72"+
    "\16\275\20\0\1\275\4\0\13\275\1\u0480\4\275\1\72"+
    "\16\275\20\0\1\275\4\0\14\275\1\u0481\3\275\1\72"+
    "\16\275\20\0\1\275\4\0\14\275\1\u0482\3\275\1\72"+
    "\16\275\20\0\1\275\4\0\11\275\1\u0483\6\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u0484\13\275\1\72"+
    "\16\275\20\0\1\275\4\0\2\275\1\u0485\15\275\1\72"+
    "\16\275\20\0\1\275\4\0\11\275\1\u0486\6\275\1\72"+
    "\16\275\20\0\1\275\4\0\6\275\1\u0487\11\275\1\72"+
    "\16\275\20\0\1\275\4\0\2\275\1\u0488\15\275\1\72"+
    "\16\275\20\0\1\275\4\0\20\275\1\72\2\275\1\u0489"+
    "\13\275\20\0\1\275\4\0\14\275\1\u048a\3\275\1\72"+
    "\16\275\20\0\1\275\4\0\3\275\1\u048b\14\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u048c\13\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u048d\13\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u048e\13\275\1\72"+
    "\16\275\25\0\20\35\1\72\3\35\1\u048f\2\35\3\0"+
    "\5\35\25\0\20\35\1\72\1\u0490\5\35\3\0\5\35"+
    "\25\0\15\35\1\u0491\2\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\6\275\1\u0492\11\275\1\72\16\275"+
    "\20\0\1\275\4\0\20\275\1\72\2\275\1\u0493\13\275"+
    "\25\0\12\35\1\u0494\5\35\1\72\6\35\3\0\5\35"+
    "\25\0\14\35\1\u0495\3\35\1\72\6\35\3\0\5\35"+
    "\25\0\20\35\1\u0496\6\35\3\0\5\35\25\0\2\35"+
    "\1\u0497\15\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u0498\7\35\1\72\6\35\3\0\5\35\25\0\12\35"+
    "\1\u0499\5\35\1\72\6\35\3\0\5\35\25\0\4\35"+
    "\1\u049a\10\35\1\u049b\2\35\1\72\6\35\3\0\5\35"+
    "\25\0\12\35\1\u049c\5\35\1\72\6\35\3\0\5\35"+
    "\25\0\20\35\1\72\4\35\1\u049d\1\35\3\0\5\35"+
    "\25\0\2\35\1\u049e\15\35\1\72\6\35\3\0\5\35"+
    "\25\0\2\35\1\u049f\15\35\1\72\6\35\3\0\5\35"+
    "\25\0\20\35\1\u04a0\6\35\3\0\5\35\25\0\2\35"+
    "\1\u04a1\15\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u04a2\6\35\1\72\6\35\3\0\5\35\25\0\20\35"+
    "\1\u04a3\6\35\3\0\5\35\25\0\6\35\1\u04a4\11\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\14\275"+
    "\1\u04a5\3\275\1\72\16\275\20\0\1\275\4\0\1\275"+
    "\1\u04a6\16\275\1\72\16\275\25\0\4\35\1\u04a7\13\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\72\2\275\1\u04a8\13\275\25\0\10\35\1\u04a9\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\35\1\u04aa\16\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\72\3\275\1\u04ab\12\275\20\0\1\275\4\0\11\275"+
    "\1\u04ac\6\275\1\72\16\275\20\0\1\275\4\0\20\275"+
    "\1\72\1\275\1\u04ad\14\275\25\0\20\35\1\u04ae\6\35"+
    "\3\0\5\35\25\0\4\35\1\u04af\13\35\1\72\6\35"+
    "\3\0\5\35\25\0\10\35\1\u04b0\7\35\1\72\6\35"+
    "\3\0\5\35\25\0\11\35\1\u04b1\6\35\1\72\6\35"+
    "\3\0\5\35\25\0\4\35\1\u04b2\13\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u04b3\15\35\1\72\6\35"+
    "\3\0\5\35\25\0\10\35\1\u04b4\7\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\20\275\1\72\1\u04b5"+
    "\15\275\20\0\1\275\4\0\20\275\1\72\2\275\1\u04b6"+
    "\13\275\20\0\1\275\4\0\1\u04b7\17\275\1\72\16\275"+
    "\20\0\1\275\4\0\4\275\1\u04b8\13\275\1\72\16\275"+
    "\20\0\1\275\4\0\11\275\1\u04b9\6\275\1\72\16\275"+
    "\25\0\10\35\1\u04ba\7\35\1\72\6\35\3\0\5\35"+
    "\25\0\4\35\1\u04bb\13\35\1\72\6\35\3\0\5\35"+
    "\25\0\2\35\1\u04bc\15\35\1\72\6\35\3\0\5\35"+
    "\25\0\20\35\1\u04bd\6\35\3\0\5\35\25\0\11\35"+
    "\1\u04be\6\35\1\72\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\20\275\1\72\2\275\1\u04bf\13\275\25\0\1\u04c0"+
    "\17\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u04c1"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u04c2"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\11\35\1\u04c3"+
    "\6\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\4\275\1\u04c4\13\275\1\72\16\275\25\0\2\35\1\u04c5"+
    "\15\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\10\275\1\u04c6\7\275\1\72\16\275\25\0\20\35\1\72"+
    "\2\35\1\u04c7\3\35\3\0\5\35\25\0\10\35\1\u04c8"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\10\35\1\u04c9"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u04ca"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\6\35\1\u04cb"+
    "\11\35\1\u04cc\6\35\3\0\5\35\25\0\1\35\1\u04cd"+
    "\16\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u04ce"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\2\35\1\u04cf"+
    "\15\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\1\275\1\u04d0\16\275\1\72\16\275\20\0\1\275\4\0"+
    "\20\275\1\72\2\275\1\u04d1\13\275\20\0\1\275\4\0"+
    "\20\275\1\72\2\275\1\u04d2\13\275\25\0\16\35\1\u04d3"+
    "\1\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\15\275\1\u04d4\2\275\1\72\16\275\25\0\20\35\1\72"+
    "\2\35\1\u04d5\3\35\3\0\5\35\25\0\15\35\1\u04d6"+
    "\2\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\1\35\1\u04d7\4\35\3\0\5\35\25\0\1\u04d8\17\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\1\275"+
    "\1\u04d9\16\275\1\72\16\275\25\0\20\35\1\u04da\6\35"+
    "\3\0\5\35\25\0\12\35\1\u04db\5\35\1\72\6\35"+
    "\3\0\5\35\25\0\10\35\1\u04dc\7\35\1\72\6\35"+
    "\3\0\5\35\25\0\2\35\1\u04dd\15\35\1\72\4\35"+
    "\1\u04de\1\35\3\0\5\35\25\0\2\35\1\u04df\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\12\35\1\u04e0\5\35"+
    "\1\72\6\35\3\0\5\35\25\0\12\35\1\u04e1\5\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u04e2\15\35"+
    "\1\72\6\35\3\0\5\35\25\0\11\35\1\u04e3\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\2\35\1\u04e4\15\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\11\275"+
    "\1\u04e5\6\275\1\72\16\275\25\0\14\35\1\u04e6\3\35"+
    "\1\72\6\35\3\0\5\35\25\0\1\u04e7\17\35\1\72"+
    "\6\35\3\0\5\35\25\0\10\35\1\u04e8\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\12\35\1\u04e9\5\35\1\72"+
    "\6\35\3\0\5\35\25\0\11\35\1\u04ea\6\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\u04eb\17\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\20\275\1\72\2\275"+
    "\1\u04ec\13\275\20\0\1\275\4\0\20\275\1\72\2\275"+
    "\1\u04ed\13\275\20\0\1\275\4\0\20\275\1\72\1\u04ee"+
    "\15\275\20\0\1\275\4\0\1\275\1\u04ef\16\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u04f0\13\275\1\72"+
    "\16\275\20\0\1\275\4\0\10\275\1\u04f1\7\275\1\72"+
    "\16\275\20\0\1\275\4\0\14\275\1\u04f2\3\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u04f3\13\275\1\72"+
    "\16\275\20\0\1\275\4\0\6\275\1\u04f4\11\275\1\72"+
    "\16\275\20\0\1\275\4\0\11\275\1\u04f5\6\275\1\72"+
    "\16\275\20\0\1\275\4\0\14\275\1\u04f6\3\275\1\72"+
    "\16\275\20\0\1\275\4\0\11\275\1\u04f7\6\275\1\72"+
    "\16\275\20\0\1\275\4\0\1\u04f8\17\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u04f9\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\14\275\1\u04fa\3\275\1\72\16\275"+
    "\20\0\1\275\4\0\11\275\1\u04fb\6\275\1\72\16\275"+
    "\25\0\2\35\1\u04fc\15\35\1\72\6\35\3\0\5\35"+
    "\25\0\10\35\1\u04fd\7\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\2\275\1\u04fe\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\10\275\1\u04ff\7\275\1\72\16\275"+
    "\25\0\2\35\1\u0500\15\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\11\275\1\u0501\6\275\1\72\16\275"+
    "\25\0\2\35\1\u0502\15\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\15\275\1\u0503\2\275\1\72\16\275"+
    "\25\0\1\u0504\17\35\1\72\6\35\3\0\5\35\20\0"+
    "\1\275\4\0\10\275\1\u0505\7\275\1\72\16\275\25\0"+
    "\20\35\1\u0506\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\12\275\1\u0507\5\275\1\72\16\275\20\0\1\275\4\0"+
    "\20\275\1\72\1\u0508\15\275\20\0\1\275\4\0\2\275"+
    "\1\u0509\15\275\1\72\16\275\25\0\11\35\1\u050a\6\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\3\275"+
    "\1\u050b\14\275\1\72\16\275\20\0\1\275\4\0\4\275"+
    "\1\u050c\13\275\1\72\16\275\20\0\1\275\4\0\2\275"+
    "\1\u050d\15\275\1\72\16\275\20\0\1\275\4\0\3\275"+
    "\1\u050e\14\275\1\72\16\275\25\0\11\35\1\u050f\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\12\35\1\u0510\5\35"+
    "\1\72\6\35\3\0\5\35\25\0\10\35\1\u0511\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\11\35\1\u0512\6\35"+
    "\1\72\6\35\3\0\5\35\25\0\6\35\1\u0513\5\35"+
    "\1\u0514\3\35\1\72\6\35\3\0\5\35\25\0\12\35"+
    "\1\u0515\5\35\1\72\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\10\275\1\u0516\7\275\1\72\16\275\20\0\1\275"+
    "\4\0\17\275\1\u0517\1\72\16\275\20\0\1\275\4\0"+
    "\20\275\1\72\3\275\1\u0518\12\275\20\0\1\275\4\0"+
    "\2\275\1\u0519\15\275\1\72\16\275\20\0\1\275\4\0"+
    "\10\275\1\u051a\7\275\1\72\16\275\25\0\2\35\1\u051b"+
    "\15\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\2\275\1\u051c\15\275\1\72\16\275\25\0\1\35\1\u051d"+
    "\16\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\4\275\1\u051e\13\275\1\72\16\275\25\0\4\35\1\u051f"+
    "\13\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\6\35\3\0\2\35\1\u0520\2\35\20\0\1\275\4\0"+
    "\14\275\1\u0521\3\275\1\72\16\275\20\0\1\275\4\0"+
    "\4\275\1\u0522\13\275\1\72\16\275\25\0\10\35\1\u0523"+
    "\7\35\1\72\6\35\3\0\5\35\25\0\12\35\1\u0524"+
    "\5\35\1\72\6\35\3\0\5\35\25\0\12\35\1\u0525"+
    "\5\35\1\72\6\35\3\0\5\35\25\0\5\35\1\u0526"+
    "\12\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\7\275\1\u0527\10\275\1\72\16\275\25\0\2\35\1\u0528"+
    "\15\35\1\72\6\35\3\0\5\35\25\0\14\35\1\u0529"+
    "\3\35\1\72\6\35\3\0\5\35\20\0\1\275\4\0"+
    "\20\275\1\72\1\u052a\15\275\20\0\1\275\4\0\10\275"+
    "\1\u052b\7\275\1\72\16\275\20\0\1\275\4\0\2\275"+
    "\1\u052c\15\275\1\72\16\275\25\0\4\35\1\u052d\13\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\72\2\275\1\u052e\13\275\25\0\10\35\1\u052f\7\35"+
    "\1\72\6\35\3\0\5\35\25\0\4\35\1\u0530\13\35"+
    "\1\72\6\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\72\1\u0531\15\275\20\0\1\275\4\0\5\275\1\u0532"+
    "\12\275\1\72\16\275\25\0\2\35\1\u0533\15\35\1\72"+
    "\6\35\3\0\5\35\25\0\6\35\1\u0534\11\35\1\72"+
    "\6\35\3\0\5\35\25\0\14\35\1\u0535\3\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\35\1\u0536\16\35\1\72"+
    "\6\35\3\0\5\35\20\0\1\275\4\0\4\275\1\u0537"+
    "\13\275\1\72\16\275\25\0\5\35\1\u0538\12\35\1\72"+
    "\6\35\3\0\5\35\25\0\4\35\1\u0539\13\35\1\72"+
    "\6\35\3\0\5\35\25\0\6\35\1\u053a\11\35\1\72"+
    "\6\35\3\0\5\35\25\0\20\35\1\72\1\u053b\5\35"+
    "\3\0\5\35\25\0\4\35\1\u053c\13\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\4\275\1\u053d\13\275"+
    "\1\72\16\275\20\0\1\275\4\0\1\u053e\17\275\1\72"+
    "\16\275\20\0\1\275\4\0\14\275\1\u053f\3\275\1\72"+
    "\16\275\20\0\1\275\4\0\16\275\1\u0540\1\275\1\72"+
    "\16\275\20\0\1\275\4\0\12\275\1\u0541\5\275\1\72"+
    "\16\275\20\0\1\275\4\0\1\u0542\17\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u0543\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u0544\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\7\275\1\u0545\10\275\1\72\16\275"+
    "\20\0\1\275\4\0\10\275\1\u0546\7\275\1\72\16\275"+
    "\20\0\1\275\4\0\4\275\1\u0547\13\275\1\72\16\275"+
    "\20\0\1\275\4\0\12\275\1\u0548\5\275\1\72\16\275"+
    "\20\0\1\275\4\0\11\275\1\u0549\6\275\1\72\16\275"+
    "\20\0\1\275\4\0\3\275\1\u054a\14\275\1\72\16\275"+
    "\25\0\10\35\1\u054b\7\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\1\275\1\u054c\16\275\1\72\16\275"+
    "\20\0\1\275\4\0\4\275\1\u054d\13\275\1\72\16\275"+
    "\25\0\5\35\1\u054e\12\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\6\275\1\u054f\11\275\1\72\16\275"+
    "\20\0\1\275\4\0\11\275\1\u0550\6\275\1\72\16\275"+
    "\25\0\15\35\1\u0551\2\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\1\u0552\17\275\1\72\16\275\20\0"+
    "\1\275\4\0\20\275\1\72\6\275\1\u0553\1\u0554\6\275"+
    "\20\0\1\275\4\0\2\275\1\u0555\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\20\275\1\72\3\275\1\u0556\12\275"+
    "\20\0\1\275\4\0\20\275\1\u0557\16\275\25\0\20\35"+
    "\1\72\6\35\3\0\2\35\1\u0558\2\35\20\0\1\275"+
    "\4\0\11\275\1\u0559\6\275\1\72\16\275\20\0\1\275"+
    "\4\0\4\275\1\u055a\13\275\1\72\16\275\20\0\1\275"+
    "\4\0\2\275\1\u055b\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\20\275\1\72\1\u055c\15\275\25\0\7\35\1\u055d"+
    "\10\35\1\72\6\35\3\0\5\35\25\0\12\35\1\u055e"+
    "\5\35\1\72\6\35\3\0\5\35\25\0\20\35\1\72"+
    "\1\u055f\5\35\3\0\5\35\20\0\1\275\4\0\4\275"+
    "\1\u0560\13\275\1\72\16\275\20\0\1\275\4\0\20\275"+
    "\1\u0561\16\275\20\0\1\275\4\0\2\275\1\u0562\15\275"+
    "\1\72\16\275\20\0\1\275\4\0\20\275\1\72\3\275"+
    "\1\u0563\12\275\20\0\1\275\4\0\2\275\1\u0564\15\275"+
    "\1\72\16\275\25\0\5\35\1\u0565\12\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\6\275\1\u0566\11\275"+
    "\1\72\16\275\25\0\1\u0567\17\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\3\275\1\u0568\14\275\1\72"+
    "\16\275\25\0\11\35\1\u0569\6\35\1\72\6\35\3\0"+
    "\5\35\25\0\2\35\1\u056a\15\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\20\275\1\72\1\u056b\15\275"+
    "\20\0\1\275\4\0\14\275\1\u056c\3\275\1\72\16\275"+
    "\25\0\6\35\1\u056d\11\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\11\275\1\u056e\6\275\1\72\16\275"+
    "\25\0\5\35\1\u056f\12\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\20\275\1\72\2\275\1\u0570\13\275"+
    "\20\0\1\275\4\0\4\275\1\u0571\13\275\1\72\16\275"+
    "\20\0\1\275\4\0\5\275\1\u0572\12\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u0573\15\275\1\72\16\275"+
    "\25\0\6\35\1\u0574\11\35\1\72\6\35\3\0\5\35"+
    "\25\0\11\35\1\u0575\6\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\20\275\1\72\3\275\1\u0576\12\275"+
    "\20\0\1\275\4\0\4\275\1\u0577\13\275\1\72\16\275"+
    "\25\0\11\35\1\u0578\6\35\1\72\6\35\3\0\5\35"+
    "\25\0\20\35\1\u0579\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\5\275\1\u057a\12\275\1\72\16\275\25\0\11\35"+
    "\1\u057b\6\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u057c\6\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u057d\7\35\1\72\6\35\3\0\5\35\25\0\11\35"+
    "\1\u057e\6\35\1\72\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\2\275\1\u057f\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\4\275\1\u0580\13\275\1\72\16\275\20\0\1\275"+
    "\4\0\20\275\1\72\3\275\1\u0581\12\275\20\0\1\275"+
    "\4\0\1\275\1\u0582\16\275\1\72\16\275\20\0\1\275"+
    "\4\0\2\275\1\u0583\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\2\275\1\u0584\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\2\275\1\u0585\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\10\275\1\u0586\7\275\1\72\16\275\20\0\1\275"+
    "\4\0\15\275\1\u0587\2\275\1\72\16\275\25\0\4\35"+
    "\1\u0588\13\35\1\72\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\11\275\1\u0589\6\275\1\72\16\275\20\0\1\275"+
    "\4\0\2\275\1\u058a\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\20\275\1\72\3\275\1\u058b\12\275\20\0\1\275"+
    "\4\0\20\275\1\72\3\275\1\u058c\12\275\20\0\1\275"+
    "\4\0\3\275\1\u058d\14\275\1\72\16\275\20\0\1\275"+
    "\4\0\20\275\1\72\6\275\1\u058e\1\u058f\1\u0590\5\275"+
    "\25\0\2\35\1\u0591\15\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\15\275\1\u0592\2\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u0593\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\20\275\1\72\5\275\1\u0594\10\275"+
    "\20\0\1\275\4\0\11\275\1\u0595\6\275\1\72\16\275"+
    "\25\0\2\35\1\u0596\15\35\1\72\6\35\3\0\5\35"+
    "\25\0\10\35\1\u0597\7\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\2\275\1\u0598\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\20\275\1\72\6\275\1\u0599\1\u059a"+
    "\1\u059b\5\275\20\0\1\275\4\0\11\275\1\u059c\6\275"+
    "\1\72\16\275\25\0\4\35\1\u059d\13\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\20\275\1\72\2\275"+
    "\1\u059e\13\275\25\0\20\35\1\72\1\u059f\5\35\3\0"+
    "\5\35\20\0\1\275\4\0\15\275\1\u05a0\2\275\1\72"+
    "\16\275\20\0\1\275\4\0\20\275\1\72\1\u05a1\15\275"+
    "\25\0\20\35\1\u05a2\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\6\275\1\u05a3\11\275\1\72\16\275\20\0\1\275"+
    "\4\0\10\275\1\u05a4\7\275\1\72\16\275\20\0\1\275"+
    "\4\0\2\275\1\u05a5\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\5\275\1\u05a6\12\275\1\72\16\275\25\0\20\35"+
    "\1\u05a7\6\35\3\0\5\35\25\0\20\35\1\72\1\u05a8"+
    "\5\35\3\0\5\35\20\0\1\275\4\0\3\275\1\u05a9"+
    "\14\275\1\72\16\275\20\0\1\275\4\0\20\275\1\72"+
    "\1\u05aa\15\275\25\0\1\35\1\u05ab\16\35\1\72\6\35"+
    "\3\0\5\35\20\0\1\275\4\0\15\275\1\u05ac\2\275"+
    "\1\72\2\275\1\u05ad\13\275\25\0\20\35\1\72\1\u05ae"+
    "\5\35\3\0\5\35\25\0\10\35\1\u05af\7\35\1\72"+
    "\6\35\3\0\5\35\25\0\1\u05b0\17\35\1\72\6\35"+
    "\3\0\5\35\25\0\20\35\1\72\1\u05b1\5\35\3\0"+
    "\5\35\20\0\1\275\4\0\2\275\1\u05b2\15\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u05b3\13\275\1\72"+
    "\16\275\20\0\1\275\4\0\12\275\1\u05b4\5\275\1\72"+
    "\16\275\20\0\1\275\4\0\20\275\1\72\4\275\1\u05b5"+
    "\11\275\20\0\1\275\4\0\20\275\1\72\3\275\1\u05b6"+
    "\12\275\20\0\1\275\4\0\14\275\1\u05b7\3\275\1\72"+
    "\16\275\20\0\1\275\4\0\11\275\1\u05b8\6\275\1\72"+
    "\16\275\20\0\1\275\4\0\2\275\1\u05b9\15\275\1\72"+
    "\16\275\20\0\1\275\4\0\20\275\1\72\2\275\1\u05ba"+
    "\13\275\25\0\6\35\1\u05bb\11\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\2\275\1\u05bc\15\275\1\72"+
    "\16\275\20\0\1\275\4\0\10\275\1\u05bd\7\275\1\72"+
    "\16\275\20\0\1\275\4\0\10\275\1\u05be\7\275\1\72"+
    "\16\275\25\0\5\35\1\u05bf\12\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\10\275\1\u05c0\7\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u05c1\13\275\1\72"+
    "\16\275\25\0\11\35\1\u05c2\6\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\4\275\1\u05c3\13\275\1\72"+
    "\16\275\25\0\10\35\1\u05c4\7\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\15\275\1\u05c5\2\275\1\72"+
    "\16\275\20\0\1\275\4\0\1\275\1\u05c6\16\275\1\72"+
    "\16\275\20\0\1\275\4\0\2\275\1\u05c7\15\275\1\72"+
    "\16\275\20\0\1\275\4\0\4\275\1\u05c8\13\275\1\72"+
    "\16\275\20\0\1\275\4\0\14\275\1\u05c9\3\275\1\72"+
    "\16\275\20\0\1\275\4\0\1\275\1\u05ca\16\275\1\72"+
    "\16\275\25\0\10\35\1\u05cb\7\35\1\72\6\35\3\0"+
    "\5\35\20\0\1\275\4\0\20\275\1\72\2\275\1\u05cc"+
    "\13\275\20\0\1\275\4\0\14\275\1\u05cd\3\275\1\72"+
    "\16\275\25\0\20\35\1\u05ce\6\35\3\0\5\35\20\0"+
    "\1\275\4\0\20\275\1\72\1\u05cf\15\275\20\0\1\275"+
    "\4\0\3\275\1\u05d0\14\275\1\72\16\275\25\0\10\35"+
    "\1\u05d1\7\35\1\72\6\35\3\0\5\35\25\0\12\35"+
    "\1\u05d2\5\35\1\72\6\35\3\0\5\35\25\0\15\35"+
    "\1\u05d3\2\35\1\72\6\35\3\0\5\35\25\0\10\35"+
    "\1\u05d4\7\35\1\72\6\35\3\0\5\35\20\0\1\275"+
    "\4\0\1\u05d5\17\275\1\72\16\275\20\0\1\275\4\0"+
    "\4\275\1\u05d6\13\275\1\72\16\275\20\0\1\275\4\0"+
    "\5\275\1\u05d7\12\275\1\72\16\275\20\0\1\275\4\0"+
    "\4\275\1\u05d8\13\275\1\72\16\275\20\0\1\275\4\0"+
    "\6\275\1\u05d9\11\275\1\72\16\275\20\0\1\275\4\0"+
    "\4\275\1\u05da\13\275\1\72\16\275\20\0\1\275\4\0"+
    "\4\275\1\u05db\13\275\1\72\16\275\20\0\1\275\4\0"+
    "\2\275\1\u05dc\15\275\1\72\16\275\25\0\20\35\1\72"+
    "\1\u05dd\5\35\3\0\5\35\20\0\1\275\4\0\20\275"+
    "\1\72\1\u05de\15\275\20\0\1\275\4\0\20\275\1\72"+
    "\1\u05df\15\275\20\0\1\275\4\0\2\275\1\u05e0\15\275"+
    "\1\72\16\275\20\0\1\275\4\0\20\275\1\72\1\u05e1"+
    "\15\275\20\0\1\275\4\0\4\275\1\u05e2\13\275\1\72"+
    "\16\275\20\0\1\275\4\0\1\u05e3\17\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u05e4\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\20\275\1\72\1\275\1\u05e5\14\275"+
    "\20\0\1\275\4\0\3\275\1\u05e6\14\275\1\72\16\275"+
    "\20\0\1\275\4\0\15\275\1\u05e7\2\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u05e8\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\5\275\1\u05e9\12\275\1\72\16\275"+
    "\20\0\1\275\4\0\6\275\1\u05ea\11\275\1\72\16\275"+
    "\25\0\10\35\1\u05eb\7\35\1\72\6\35\3\0\5\35"+
    "\20\0\1\275\4\0\15\275\1\u05ec\2\275\1\72\16\275"+
    "\20\0\1\275\4\0\14\275\1\u05ed\3\275\1\72\16\275"+
    "\20\0\1\275\4\0\15\275\1\u05ee\2\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u05ef\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\12\275\1\u05f0\5\275\1\72\16\275"+
    "\20\0\1\275\4\0\6\275\1\u05f1\11\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u05f2\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\2\275\1\u05f3\15\275\1\72\16\275"+
    "\20\0\1\275\4\0\14\275\1\u05f4\3\275\1\72\16\275"+
    "\20\0\1\275\4\0\20\275\1\72\1\u05f5\15\275\20\0"+
    "\1\275\4\0\20\275\1\72\1\u05f6\15\275\20\0\1\275"+
    "\4\0\14\275\1\u05f7\3\275\1\72\16\275\20\0\1\275"+
    "\4\0\2\275\1\u05f8\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\11\275\1\u05f9\6\275\1\72\16\275\20\0\1\275"+
    "\4\0\14\275\1\u05fa\3\275\1\72\16\275\20\0\1\275"+
    "\4\0\14\275\1\u05fb\3\275\1\72\16\275\20\0\1\275"+
    "\4\0\14\275\1\u05fc\3\275\1\72\16\275\20\0\1\275"+
    "\4\0\14\275\1\u05fd\3\275\1\72\16\275\20\0\1\275"+
    "\4\0\4\275\1\u05fe\13\275\1\72\16\275\20\0\1\275"+
    "\4\0\2\275\1\u05ff\15\275\1\72\16\275\20\0\1\275"+
    "\4\0\6\275\1\u0600\11\275\1\72\16\275\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[63024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\34\1\10\11\3\1\1\11"+
    "\2\0\1\11\1\0\10\1\1\0\73\1\1\0\66\1"+
    "\2\11\356\1\1\0\71\1\1\0\4\1\1\0\40\1"+
    "\1\0\56\1\1\0\72\1\1\0\51\1\1\0\34\1"+
    "\1\0\6\1\1\0\50\1\1\0\35\1\1\0\5\1"+
    "\1\0\55\1\1\0\124\1\1\0\15\1\1\0\144\1"+
    "\1\0\6\1\1\0\30\1\1\0\7\1\1\0\66\1"+
    "\1\0\12\1\1\0\63\1\1\0\11\1\1\0\2\1"+
    "\1\0\12\1\1\0\16\1\1\0\16\1\1\0\15\1"+
    "\1\0\53\1\1\0\120\1\1\0\11\1\1\0\27\1"+
    "\1\0\50\1\1\0\4\1\1\0\46\1\1\0\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  @SuppressWarnings("unused")
private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  @SuppressWarnings("unused")
private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  @SuppressWarnings("unused")
private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  @SuppressWarnings("unused")
private boolean zzEOFDone;

  /* user code: */

	public static Map<String, String> tablaSimbolos = new TreeMap<String, String>();
	FileWriter fw = null;
	PrintWriter pw = null;
	FileWriter fw2 = null;
	PrintWriter pw2 = null;
	FileWriter fw3 = null;
	PrintWriter pw3 = null;
	
	final int yyline() {
		return yyline + 1;
    }
    
    public void toString(String Token) {
		try {
				fw = new FileWriter("src/salidas/out.txt", true);
				pw = new PrintWriter(fw);
				pw.println(Token+ " | " +yytext());
				
				fw2 = new FileWriter("src/salidas/tabla_simbolos.txt",true);
				
				if(Token == "TOK_IDENTIFIER"){
					pw2 = new PrintWriter(fw2);
					pw2.println(Token+ " | " +yytext());
				}
		} catch (Exception e){
				e.printStackTrace();
		} finally {
			try {
				if (null != fw) {
					fw.close();
					fw2.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
    
    public void manejoErrores(String Error){
		try {
				fw3 = new FileWriter("src/salidas/errores_lex.txt", true);
				pw3 = new PrintWriter(fw3);
				pw3.println(Error);
				System.err.println(Error);
		} catch (Exception e){
				e.printStackTrace();
		} finally {
			try {
				if (null != fw) {
					fw3.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
    
    public static void main(String[] args){
		 
		Yylex analizadorLexico =new Yylex(new InputStreamReader(System.in));
		try{
			analizadorLexico.yylex(); 
		}catch(IOException e){
			System.err.println(e);
		} 
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 313: 
          { System.out.println("TOK_REFERENCES"); toString("TOK_REFERENCES");
          }
        case 366: break;
        case 180: 
          { System.out.println("TOK_GLOBAL"); toString("TOK_GLOBAL");
          }
        case 367: break;
        case 67: 
          { System.out.println("TOK_AREA"); toString("TOK_AREA");
          }
        case 368: break;
        case 214: 
          { System.out.println("TOK_NUMERIC"); toString("TOK_NUMERIC");
          }
        case 369: break;
        case 298: 
          { System.out.println("TOK_END_DELETE"); toString("TOK_END_DELETE");
          }
        case 370: break;
        case 335: 
          { System.out.println("TOK_END_MULTIPLY"); toString("TOK_END_MULTIPLY");
          }
        case 371: break;
        case 297: 
          { System.out.println("TOK_END_STRING"); toString("TOK_END_STRING");
          }
        case 372: break;
        case 1: 
          { try {
			manejoErrores("Linea: " + yyline()+ " Caracter No Permitido: \"" + yytext()+ "\"");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
          }
        case 373: break;
        case 325: 
          { System.out.println("TOK_DAY_OF_WEEK"); toString("TOK_DAY_OF_WEEK");
          }
        case 374: break;
        case 66: 
          { System.out.println("TOK_KEY"); toString("TOK_KEY");
          }
        case 375: break;
        case 51: 
          { System.out.println("TOK_END"); toString("TOK_END");
          }
        case 376: break;
        case 223: 
          { System.out.println("TOK_REPORTS"); toString("TOK_REPORTS");
          }
        case 377: break;
        case 71: 
          { System.out.println("TOK_CORR"); toString("TOK_CORR");
          }
        case 378: break;
        case 167: 
          { System.out.println("TOK_EXTEND"); toString("TOK_EXTEND");
          }
        case 379: break;
        case 163: 
          { System.out.println("TOK_COLUMN"); toString("TOK_COLUMN");
          }
        case 380: break;
        case 52: 
          { System.out.println("TOK_EGI"); toString("TOK_EGI");
          }
        case 381: break;
        case 25: 
          { System.out.println("TOK_TO"); toString("TOK_TO");
          }
        case 382: break;
        case 62: 
          { System.out.println("TOK_FOR"); toString("TOK_FOR");
          }
        case 383: break;
        case 353: 
          { System.out.println("TOK_PACKED_DECIMAL"); toString("TOK_PACKED_DECIMAL");
          }
        case 384: break;
        case 80: 
          { System.out.println("TOK_TRUE"); toString("TOK_TRUE");
          }
        case 385: break;
        case 350: 
          { System.out.println("TOK_DATE_COMPILED"); toString("TOK_DATE_COMPILED");
          }
        case 386: break;
        case 33: 
          { System.out.println("TOK_FD"); toString("TOK_FD");
          }
        case 387: break;
        case 248: 
          { System.out.println("TOK_POSITION"); toString("TOK_POSITION");
          }
        case 388: break;
        case 105: 
          { System.out.println("TOK_OPEN"); toString("TOK_OPEN");
          }
        case 389: break;
        case 164: 
          { System.out.println("TOK_COMMON"); toString("TOK_COMMON");
          }
        case 390: break;
        case 6: 
          { System.out.println("TOK_MINUS"); toString("TOK_MINUS");
          }
        case 391: break;
        case 36: 
          { System.out.println("TOK_RH"); toString("TOK_RH");
          }
        case 392: break;
        case 199: 
          { System.out.println("TOK_COMPUTE"); toString("TOK_COMPUTE");
          }
        case 393: break;
        case 154: 
          { System.out.println("TOK_UNTIL"); toString("TOK_UNTIL");
          }
        case 394: break;
        case 237: 
          { System.out.println("TOK_CODE_SET"); toString("TOK_CODE_SET");
          }
        case 395: break;
        case 11: 
          { System.out.println("TOK_COMMA"); toString("TOK_COMMA");
          }
        case 396: break;
        case 55: 
          { System.out.println("TOK_PIC"); toString("TOK_PIC");
          }
        case 397: break;
        case 340: 
          { System.out.println("TOK_INSTALLATION"); toString("TOK_INSTALLATION");
          }
        case 398: break;
        case 27: 
          { System.out.println("TOK_DE"); toString("TOK_DE");
          }
        case 399: break;
        case 10: 
          { System.out.println("TOK_DOLLAR"); toString("TOK_DOLLAR");
          }
        case 400: break;
        case 357: 
          { System.out.println("TOK_LINAGE_COUNTER"); toString("TOK_LINAGE_COUNTER");
          }
        case 401: break;
        case 132: 
          { System.out.println("TOK_INPUT"); toString("TOK_INPUT");
          }
        case 402: break;
        case 302: 
          { System.out.println("TOK_PROGRAM_ID"); toString("TOK_PROGRAM_ID");
          }
        case 403: break;
        case 296: 
          { System.out.println("TOK_END_SEARCH"); toString("TOK_END_SEARCH");
          }
        case 404: break;
        case 68: 
          { System.out.println("TOK_ALSO"); toString("TOK_ALSO");
          }
        case 405: break;
        case 131: 
          { System.out.println("TOK_VALUE"); toString("TOK_VALUE");
          }
        case 406: break;
        case 57: 
          { System.out.println("TOK_SET"); toString("TOK_SET");
          }
        case 407: break;
        case 119: 
          { System.out.println("TOK_COBOL"); toString("TOK_COBOL");
          }
        case 408: break;
        case 234: 
          { System.out.println("TOK_MESSAGE"); toString("TOK_MESSAGE");
          }
        case 409: break;
        case 172: 
          { System.out.println("TOK_STATUS"); toString("TOK_STATUS");
          }
        case 410: break;
        case 123: 
          { System.out.println("TOK_ERROR"); toString("TOK_ERROR");
          }
        case 411: break;
        case 50: 
          { System.out.println("TOK_ESI"); toString("TOK_ESI");
          }
        case 412: break;
        case 104: 
          { System.out.println("TOK_LOCK"); toString("TOK_LOCK");
          }
        case 413: break;
        case 256: 
          { System.out.println("TOK_STANDARD"); toString("TOK_STANDARD");
          }
        case 414: break;
        case 82: 
          { System.out.println("TOK_THEN"); toString("TOK_THEN");
          }
        case 415: break;
        case 152: 
          { System.out.println("TOK_USAGE"); toString("TOK_USAGE");
          }
        case 416: break;
        case 165: 
          { System.out.println("TOK_ENABLE"); toString("TOK_ENABLE");
          }
        case 417: break;
        case 184: 
          { System.out.println("TOK_REPORT"); toString("TOK_REPORT");
          }
        case 418: break;
        case 264: 
          { System.out.println("TOK_REVERSED"); toString("TOK_REVERSED");
          }
        case 419: break;
        case 144: 
          { System.out.println("TOK_BLANK"); toString("TOK_BLANK");
          }
        case 420: break;
        case 205: 
          { System.out.println("TOK_POINTER"); toString("TOK_POINTER");
          }
        case 421: break;
        case 252: 
          { System.out.println("TOK_SECURITY"); toString("TOK_SECURITY");
          }
        case 422: break;
        case 92: 
          { System.out.println("TOK_DATA"); toString("TOK_DATA");
          }
        case 423: break;
        case 222: 
          { System.out.println("TOK_REPLACE"); toString("TOK_REPLACE");
          }
        case 424: break;
        case 191: 
          { System.out.println("TOK_BINARY"); toString("TOK_BINARY");
          }
        case 425: break;
        case 295: 
          { System.out.println("TOK_CHARACTERS"); toString("TOK_CHARACTERS");
          }
        case 426: break;
        case 169: 
          { System.out.println("TOK_SEARCH"); toString("TOK_SEARCH");
          }
        case 427: break;
        case 245: 
          { System.out.println("TOK_EXTERNAL"); toString("TOK_EXTERNAL");
          }
        case 428: break;
        case 160: 
          { System.out.println("TOK_ASSIGN"); toString("TOK_ASSIGN");
          }
        case 429: break;
        case 124: 
          { System.out.println("TOK_ELSIF"); toString("TOK_ELSIF");
          }
        case 430: break;
        case 208: 
          { System.out.println("TOK_SEGMENT"); toString("TOK_SEGMENT");
          }
        case 431: break;
        case 64: 
          { System.out.println("TOK_OFF"); toString("TOK_OFF");
          }
        case 432: break;
        case 268: 
          { System.out.println("TOK_UNSTRING"); toString("TOK_UNSTRING");
          }
        case 433: break;
        case 182: 
          { System.out.println("TOK_RANDOM"); toString("TOK_RANDOM");
          }
        case 434: break;
        case 294: 
          { System.out.println("TOK_ALPHABETIC"); toString("TOK_ALPHABETIC");
          }
        case 435: break;
        case 142: 
          { System.out.println("TOK_LINES"); toString("TOK_LINES");
          }
        case 436: break;
        case 181: 
          { System.out.println("TOK_FILLER"); toString("TOK_FILLER");
          }
        case 437: break;
        case 20: 
          { System.out.println("TOK_CD"); toString("TOK_CD");
          }
        case 438: break;
        case 269: 
          { System.out.println("TOK_MULTIPLE"); toString("TOK_MULTIPLE");
          }
        case 439: break;
        case 157: 
          { System.out.println("TOK_QUOTE"); toString("TOK_QUOTE");
          }
        case 440: break;
        case 306: 
          { System.out.println("TOK_SORT_MERGE"); toString("TOK_SORT_MERGE");
          }
        case 441: break;
        case 4: 
          { System.out.println("TOK_PERIOD"); toString("TOK_PERIOD");
          }
        case 442: break;
        case 218: 
          { System.out.println("TOK_INITIAL"); toString("TOK_INITIAL");
          }
        case 443: break;
        case 96: 
          { System.out.println("TOK_INTO"); toString("TOK_INTO");
          }
        case 444: break;
        case 159: 
          { System.out.println("TOK_ACCESS"); toString("TOK_ACCESS");
          }
        case 445: break;
        case 106: 
          { System.out.println("TOK_WITH"); toString("TOK_WITH");
          }
        case 446: break;
        case 166: 
          { System.out.println("TOK_END_IF"); toString("TOK_END_IF");
          }
        case 447: break;
        case 281: 
          { System.out.println("TOK_DEPENDING"); toString("TOK_DEPENDING");
          }
        case 448: break;
        case 249: 
          { System.out.println("TOK_TALLYING"); toString("TOK_TALLYING");
          }
        case 449: break;
        case 125: 
          { System.out.println("TOK_PURGE"); toString("TOK_PURGE");
          }
        case 450: break;
        case 140: 
          { System.out.println("TOK_RIGHT"); toString("TOK_RIGHT");
          }
        case 451: break;
        case 14: 
          { System.out.println("TOK_RPAREN"); toString("TOK_RPAREN");
          }
        case 452: break;
        case 261: 
          { System.out.println("TOK_INDICATE"); toString("TOK_INDICATE");
          }
        case 453: break;
        case 272: 
          { System.out.println("TOK_ADVANCING"); toString("TOK_ADVANCING");
          }
        case 454: break;
        case 339: 
          { System.out.println("TOK_INPUT_OUTPUT"); toString("TOK_INPUT_OUTPUT");
          }
        case 455: break;
        case 45: 
          { System.out.println("TOK_ADD"); toString("TOK_ADD");
          }
        case 456: break;
        case 170: 
          { System.out.println("TOK_SELECT"); toString("TOK_SELECT");
          }
        case 457: break;
        case 23: 
          { System.out.println("TOK_PF"); toString("TOK_PF");
          }
        case 458: break;
        case 323: 
          { System.out.println("TOK_SUB_QUEUE_2"); toString("TOK_SUB_QUEUE_2");
          }
        case 459: break;
        case 121: 
          { System.out.println("TOK_EVERY"); toString("TOK_EVERY");
          }
        case 460: break;
        case 247: 
          { System.out.println("TOK_POSITIVE"); toString("TOK_POSITIVE");
          }
        case 461: break;
        case 362: 
          { System.out.println("TOK_ALPHABETIC_UPPER"); toString("TOK_ALPHABETIC_UPPER");
          }
        case 462: break;
        case 91: 
          { System.out.println("TOK_SYNC"); toString("TOK_SYNC");
          }
        case 463: break;
        case 83: 
          { System.out.println("TOK_THRU"); toString("TOK_THRU");
          }
        case 464: break;
        case 220: 
          { System.out.println("TOK_FOOTING"); toString("TOK_FOOTING");
          }
        case 465: break;
        case 266: 
          { System.out.println("TOK_OPTIONAL"); toString("TOK_OPTIONAL");
          }
        case 466: break;
        case 216: 
          { System.out.println("TOK_INDEXED"); toString("TOK_INDEXED");
          }
        case 467: break;
        case 319: 
          { System.out.println("TOK_END_REWRITE"); toString("TOK_END_REWRITE");
          }
        case 468: break;
        case 18: 
          { System.out.println("TOK_STRING"); toString("TOK_STRING");
          }
        case 469: break;
        case 137: 
          { System.out.println("TOK_FIRST"); toString("TOK_FIRST");
          }
        case 470: break;
        case 210: 
          { System.out.println("TOK_DISABLE"); toString("TOK_DISABLE");
          }
        case 471: break;
        case 28: 
          { System.out.println("TOK_NO"); toString("TOK_NO");
          }
        case 472: break;
        case 143: 
          { System.out.println("TOK_LIMIT"); toString("TOK_LIMIT");
          }
        case 473: break;
        case 115: 
          { System.out.println("TOK_AREAS"); toString("TOK_AREAS");
          }
        case 474: break;
        case 29: 
          { System.out.println("TOK_IS"); toString("TOK_IS");
          }
        case 475: break;
        case 70: 
          { System.out.println("TOK_CODE"); toString("TOK_CODE");
          }
        case 476: break;
        case 327: 
          { System.out.println("TOK_DEBUG_SUB_1"); toString("TOK_DEBUG_SUB_1");
          }
        case 477: break;
        case 146: 
          { System.out.println("TOK_BLOCK"); toString("TOK_BLOCK");
          }
        case 478: break;
        case 176: 
          { System.out.println("TOK_DIVIDE"); toString("TOK_DIVIDE");
          }
        case 479: break;
        case 37: 
          { System.out.println("TOK_BY"); toString("TOK_BY");
          }
        case 480: break;
        case 241: 
          { System.out.println("TOK_CURRENCY"); toString("TOK_CURRENCY");
          }
        case 481: break;
        case 81: 
          { System.out.println("TOK_THAN"); toString("TOK_THAN");
          }
        case 482: break;
        case 99: 
          { System.out.println("TOK_READ"); toString("TOK_READ");
          }
        case 483: break;
        case 258: 
          { System.out.println("TOK_SYMBOLIC"); toString("TOK_SYMBOLIC");
          }
        case 484: break;
        case 332: 
          { System.out.println("TOK_END_EVALUATE"); toString("TOK_END_EVALUATE");
          }
        case 485: break;
        case 39: 
          { System.out.println("TOK_OF"); toString("TOK_OF");
          }
        case 486: break;
        case 355: 
          { System.out.println("TOK_NUMERIC_EDITED"); toString("TOK_NUMERIC_EDITED");
          }
        case 487: break;
        case 315: 
          { System.out.println("TOK_CLOCK_UNITS"); toString("TOK_CLOCK_UNITS");
          }
        case 488: break;
        case 148: 
          { System.out.println("TOK_ORDER"); toString("TOK_ORDER");
          }
        case 489: break;
        case 197: 
          { System.out.println("TOK_CONTROL"); toString("TOK_CONTROL");
          }
        case 490: break;
        case 303: 
          { System.out.println("TOK_SEQUENTIAL"); toString("TOK_SEQUENTIAL");
          }
        case 491: break;
        case 158: 
          { System.out.println("TOK_ACCEPT"); toString("TOK_ACCEPT");
          }
        case 492: break;
        case 348: 
          { System.out.println("TOK_SEGMENT_LIMIT"); toString("TOK_SEGMENT_LIMIT");
          }
        case 493: break;
        case 293: 
          { System.out.println("TOK_JUSTIFIED"); toString("TOK_JUSTIFIED");
          }
        case 494: break;
        case 233: 
          { System.out.println("TOK_OMITTED"); toString("TOK_OMITTED");
          }
        case 495: break;
        case 22: 
          { System.out.println("TOK_CH"); toString("TOK_CH");
          }
        case 496: break;
        case 342: 
          { System.out.println("TOK_LINE_COUNTER"); toString("TOK_LINE_COUNTER");
          }
        case 497: break;
        case 102: 
          { System.out.println("TOK_LEFT"); toString("TOK_LEFT");
          }
        case 498: break;
        case 185: 
          { System.out.println("TOK_RETURN"); toString("TOK_RETURN");
          }
        case 499: break;
        case 240: 
          { System.out.println("TOK_CONTROLS"); toString("TOK_CONTROLS");
          }
        case 500: break;
        case 280: 
          { System.out.println("TOK_TERMINATE"); toString("TOK_TERMINATE");
          }
        case 501: break;
        case 270: 
          { System.out.println("TOK_MULTIPLY"); toString("TOK_MULTIPLY");
          }
        case 502: break;
        case 213: 
          { System.out.println("TOK_VARYING"); toString("TOK_VARYING");
          }
        case 503: break;
        case 110: 
          { System.out.println("TOK_MODE"); toString("TOK_MODE");
          }
        case 504: break;
        case 113: 
          { System.out.println("TOK_JUST"); toString("TOK_JUST");
          }
        case 505: break;
        case 219: 
          { System.out.println("TOK_FILE_ID"); toString("TOK_FILE_ID");
          }
        case 506: break;
        case 108: 
          { System.out.println("TOK_UPON"); toString("TOK_UPON");
          }
        case 507: break;
        case 84: 
          { System.out.println("TOK_TYPE"); toString("TOK_TYPE");
          }
        case 508: break;
        case 211: 
          { System.out.println("TOK_DISPLAY"); toString("TOK_DISPLAY");
          }
        case 509: break;
        case 254: 
          { System.out.println("TOK_SENTENCE"); toString("TOK_SENTENCE");
          }
        case 510: break;
        case 232: 
          { System.out.println("TOK_HEADING"); toString("TOK_HEADING");
          }
        case 511: break;
        case 365: 
          { System.out.println("TOK_ALPHANUMERIC_EDITED"); toString("TOK_ALPHANUMERIC_EDITED");
          }
        case 512: break;
        case 318: 
          { System.out.println("TOK_END_RECEIVE"); toString("TOK_END_RECEIVE");
          }
        case 513: break;
        case 262: 
          { System.out.println("TOK_INITIATE"); toString("TOK_INITIATE");
          }
        case 514: break;
        case 321: 
          { System.out.println("TOK_ENVIRONMENT"); toString("TOK_ENVIRONMENT");
          }
        case 515: break;
        case 265: 
          { System.out.println("TOK_RELATIVE"); toString("TOK_RELATIVE");
          }
        case 516: break;
        case 133: 
          { System.out.println("TOK_INDEX"); toString("TOK_INDEX");
          }
        case 517: break;
        case 43: 
          { System.out.println("TOK_LESS_EQ"); toString("TOK_LESS_EQ");
          }
        case 518: break;
        case 347: 
          { System.out.println("TOK_COMMUNICATION"); toString("TOK_COMMUNICATION");
          }
        case 519: break;
        case 3: 
          { System.out.println("TOK_INTEGER"); toString("TOK_INTEGER");
          }
        case 520: break;
        case 107: 
          { System.out.println("TOK_WHEN"); toString("TOK_WHEN");
          }
        case 521: break;
        case 97: 
          { System.out.println("TOK_FILE"); toString("TOK_FILE");
          }
        case 522: break;
        case 291: 
          { System.out.println("TOK_HIGHLIGHT"); toString("TOK_HIGHLIGHT");
          }
        case 523: break;
        case 100: 
          { System.out.println("TOK_REEL"); toString("TOK_REEL");
          }
        case 524: break;
        case 276: 
          { System.out.println("TOK_END_START"); toString("TOK_END_START");
          }
        case 525: break;
        case 207: 
          { System.out.println("TOK_SECTION"); toString("TOK_SECTION");
          }
        case 526: break;
        case 60: 
          { System.out.println("TOK_NOT"); toString("TOK_NOT");
          }
        case 527: break;
        case 217: 
          { System.out.println("TOK_INVALID"); toString("TOK_INVALID");
          }
        case 528: break;
        case 346: 
          { System.out.println("TOK_COMPUTATIONAL"); toString("TOK_COMPUTATIONAL");
          }
        case 529: break;
        case 190: 
          { System.out.println("TOK_BEFORE"); toString("TOK_BEFORE");
          }
        case 530: break;
        case 126: 
          { System.out.println("TOK_TABLE"); toString("TOK_TABLE");
          }
        case 531: break;
        case 174: 
          { System.out.println("TOK_DETAIL"); toString("TOK_DETAIL");
          }
        case 532: break;
        case 183: 
          { System.out.println("TOK_RECORD"); toString("TOK_RECORD");
          }
        case 533: break;
        case 221: 
          { System.out.println("TOK_RECEIVE"); toString("TOK_RECEIVE");
          }
        case 534: break;
        case 58: 
          { System.out.println("TOK_SUM"); toString("TOK_SUM");
          }
        case 535: break;
        case 15: 
          { System.out.println("TOK_GREATER"); toString("TOK_GREATER");
          }
        case 536: break;
        case 203: 
          { System.out.println("TOK_PROCEED"); toString("TOK_PROCEED");
          }
        case 537: break;
        case 16: 
          { System.out.println("TOK_LESS"); toString("TOK_LESS");
          }
        case 538: break;
        case 127: 
          { System.out.println("TOK_TIMES"); toString("TOK_TIMES");
          }
        case 539: break;
        case 271: 
          { System.out.println("TOK_ASCENDING"); toString("TOK_ASCENDING");
          }
        case 540: break;
        case 103: 
          { System.out.println("TOK_LINE"); toString("TOK_LINE");
          }
        case 541: break;
        case 162: 
          { System.out.println("TOK_CANCEL"); toString("TOK_CANCEL");
          }
        case 542: break;
        case 337: 
          { System.out.println("TOK_DATE_WRITTEN"); toString("TOK_DATE_WRITTEN");
          }
        case 543: break;
        case 69: 
          { System.out.println("TOK_CALL"); toString("TOK_CALL");
          }
        case 544: break;
        case 326: 
          { System.out.println("TOK_DESTINATION"); toString("TOK_DESTINATION");
          }
        case 545: break;
        case 87: 
          { System.out.println("TOK_STOP"); toString("TOK_STOP");
          }
        case 546: break;
        case 130: 
          { System.out.println("TOK_DEPTH"); toString("TOK_DEPTH");
          }
        case 547: break;
        case 250: 
          { System.out.println("TOK_TERMINAL"); toString("TOK_TERMINAL");
          }
        case 548: break;
        case 200: 
          { System.out.println("TOK_END_ADD"); toString("TOK_END_ADD");
          }
        case 549: break;
        case 235: 
          { System.out.println("TOK_MODULES"); toString("TOK_MODULES");
          }
        case 550: break;
        case 364: 
          { System.out.println("TOK_BACKGROUND_COLOR"); toString("TOK_BACKGROUND_COLOR");
          }
        case 551: break;
        case 352: 
          { System.out.println("TOK_REVERSE_VIDEO"); toString("TOK_REVERSE_VIDEO");
          }
        case 552: break;
        case 317: 
          { System.out.println("TOK_END_PERFORM"); toString("TOK_END_PERFORM");
          }
        case 553: break;
        case 238: 
          { System.out.println("TOK_CONTAINS"); toString("TOK_CONTAINS");
          }
        case 554: break;
        case 243: 
          { System.out.println("TOK_END_CALL"); toString("TOK_END_CALL");
          }
        case 555: break;
        case 273: 
          { System.out.println("TOK_ALTERNATE"); toString("TOK_ALTERNATE");
          }
        case 556: break;
        case 278: 
          { System.out.println("TOK_EXCEPTION"); toString("TOK_EXCEPTION");
          }
        case 557: break;
        case 35: 
          { System.out.println("TOK_RF"); toString("TOK_RF");
          }
        case 558: break;
        case 196: 
          { System.out.println("TOK_CONTENT"); toString("TOK_CONTENT");
          }
        case 559: break;
        case 63: 
          { System.out.println("TOK_RUN"); toString("TOK_RUN");
          }
        case 560: break;
        case 46: 
          { System.out.println("TOK_AND"); toString("TOK_AND");
          }
        case 561: break;
        case 255: 
          { System.out.println("TOK_SEQUENCE"); toString("TOK_SEQUENCE");
          }
        case 562: break;
        case 145: 
          { System.out.println("TOK_BLINK"); toString("TOK_BLINK");
          }
        case 563: break;
        case 324: 
          { System.out.println("TOK_SUB_QUEUE_3"); toString("TOK_SUB_QUEUE_3");
          }
        case 564: break;
        case 24: 
          { System.out.println("TOK_PH"); toString("TOK_PH");
          }
        case 565: break;
        case 212: 
          { System.out.println("TOK_DYNAMIC"); toString("TOK_DYNAMIC");
          }
        case 566: break;
        case 17: 
          { /* no hacer nada */
          }
        case 567: break;
        case 150: 
          { System.out.println("TOK_WHILE"); toString("TOK_WHILE");
          }
        case 568: break;
        case 47: 
          { System.out.println("TOK_ANY"); toString("TOK_ANY");
          }
        case 569: break;
        case 120: 
          { System.out.println("TOK_COUNT"); toString("TOK_COUNT");
          }
        case 570: break;
        case 259: 
          { System.out.println("TOK_DIVISION"); toString("TOK_DIVISION");
          }
        case 571: break;
        case 289: 
          { System.out.println("TOK_REMAINDER"); toString("TOK_REMAINDER");
          }
        case 572: break;
        case 19: 
          { System.out.println("TOK_AT"); toString("TOK_AT");
          }
        case 573: break;
        case 5: 
          { System.out.println("TOK_IDENTIFIER"); 
		toString("TOK_IDENTIFIER");
		tablaSimbolos.put(yytext(),"TOK_IDENTIFIER");
          }
        case 574: break;
        case 31: 
          { System.out.println("TOK_IF"); toString("TOK_IF");
          }
        case 575: break;
        case 53: 
          { System.out.println("TOK_EOP"); toString("TOK_EOP");
          }
        case 576: break;
        case 227: 
          { System.out.println("TOK_REWRITE"); toString("TOK_REWRITE");
          }
        case 577: break;
        case 341: 
          { System.out.println("TOK_FILE_CONTROL"); toString("TOK_FILE_CONTROL");
          }
        case 578: break;
        case 344: 
          { System.out.println("TOK_CONFIGURATION"); toString("TOK_CONFIGURATION");
          }
        case 579: break;
        case 9: 
          { System.out.println("TOK_EQUAL"); toString("TOK_EQUAL");
          }
        case 580: break;
        case 8: 
          { System.out.println("TOK_SLASH"); toString("TOK_SLASH");
          }
        case 581: break;
        case 215: 
          { System.out.println("TOK_INSPECT"); toString("TOK_INSPECT");
          }
        case 582: break;
        case 26: 
          { System.out.println("TOK_SD"); toString("TOK_SD");
          }
        case 583: break;
        case 225: 
          { System.out.println("TOK_RENAMES"); toString("TOK_RENAMES");
          }
        case 584: break;
        case 328: 
          { System.out.println("TOK_DEBUG_SUB_2"); toString("TOK_DEBUG_SUB_2");
          }
        case 585: break;
        case 194: 
          { System.out.println("TOK_OUTPUT"); toString("TOK_OUTPUT");
          }
        case 586: break;
        case 358: 
          { System.out.println("TOK_SOURCE_COMPUTER"); toString("TOK_SOURCE_COMPUTER");
          }
        case 587: break;
        case 275: 
          { System.out.println("TOK_COLLATING"); toString("TOK_COLLATING");
          }
        case 588: break;
        case 292: 
          { System.out.println("TOK_UNDERLINE"); toString("TOK_UNDERLINE");
          }
        case 589: break;
        case 204: 
          { System.out.println("TOK_PROGRAM"); toString("TOK_PROGRAM");
          }
        case 590: break;
        case 49: 
          { System.out.println("TOK_ALL"); toString("TOK_ALL");
          }
        case 591: break;
        case 149: 
          { System.out.println("TOK_WRITE"); toString("TOK_WRITE");
          }
        case 592: break;
        case 42: 
          { System.out.println("TOK_GREATER_EQ"); toString("TOK_GREATER_EQ");
          }
        case 593: break;
        case 59: 
          { System.out.println("TOK_DAY"); toString("TOK_DAY");
          }
        case 594: break;
        case 231: 
          { System.out.println("TOK_LINKAGE"); toString("TOK_LINKAGE");
          }
        case 595: break;
        case 186: 
          { System.out.println("TOK_REWIND"); toString("TOK_REWIND");
          }
        case 596: break;
        case 334: 
          { System.out.println("TOK_END_UNSTRING"); toString("TOK_END_UNSTRING");
          }
        case 597: break;
        case 253: 
          { System.out.println("TOK_SEPARATE"); toString("TOK_SEPARATE");
          }
        case 598: break;
        case 286: 
          { System.out.println("TOK_REPORTING"); toString("TOK_REPORTING");
          }
        case 599: break;
        case 88: 
          { System.out.println("TOK_SIGN"); toString("TOK_SIGN");
          }
        case 600: break;
        case 310: 
          { System.out.println("TOK_DEBUG_LINE"); toString("TOK_DEBUG_LINE");
          }
        case 601: break;
        case 111: 
          { System.out.println("TOK_MOVE"); toString("TOK_MOVE");
          }
        case 602: break;
        case 356: 
          { System.out.println("TOK_IDENTIFICATION"); toString("TOK_IDENTIFICATION");
          }
        case 603: break;
        case 112: 
          { System.out.println("TOK_ZERO");toString("TOK_ZERO");
          }
        case 604: break;
        case 38: 
          { System.out.println("TOK_ON"); toString("TOK_ON");
          }
        case 605: break;
        case 209: 
          { System.out.println("TOK_SUPRESS"); toString("TOK_SUPRESS");
          }
        case 606: break;
        case 44: 
          { System.out.println("TOK_FLOAT"); toString("TOK_FLOAT");
          }
        case 607: break;
        case 226: 
          { System.out.println("TOK_RELEASE"); toString("TOK_RELEASE");
          }
        case 608: break;
        case 284: 
          { System.out.println("TOK_DEBUGGING"); toString("TOK_DEBUGGING");
          }
        case 609: break;
        case 168: 
          { System.out.println("TOK_SCREEN"); toString("TOK_SCREEN");
          }
        case 610: break;
        case 141: 
          { System.out.println("TOK_LABEL"); toString("TOK_LABEL");
          }
        case 611: break;
        case 288: 
          { System.out.println("TOK_REFERENCE"); toString("TOK_REFERENCE");
          }
        case 612: break;
        case 349: 
          { System.out.println("TOK_SPECIAL_NAMES"); toString("TOK_TOK_SPECIAL_NAMES");
          }
        case 613: break;
        case 94: 
          { System.out.println("TOK_DOWN"); toString("TOK_DOWN");
          }
        case 614: break;
        case 7: 
          { System.out.println("TOK_ASTERISK"); toString("TOK_ASTERISK");
          }
        case 615: break;
        case 90: 
          { System.out.println("TOK_SORT"); toString("TOK_SORT");
          }
        case 616: break;
        case 188: 
          { System.out.println("TOK_LINAGE"); toString("TOK_LINAGE");
          }
        case 617: break;
        case 93: 
          { System.out.println("TOK_DATE"); toString("TOK_DATE");
          }
        case 618: break;
        case 311: 
          { System.out.println("TOK_DUPLICATES"); toString("TOK_DUPLICATES");
          }
        case 619: break;
        case 136: 
          { System.out.println("TOK_FINAL"); toString("TOK_FINAL");
          }
        case 620: break;
        case 230: 
          { System.out.println("TOK_LEADING"); toString("TOK_LEADING");
          }
        case 621: break;
        case 155: 
          { System.out.println("TOK_MERGE"); toString("TOK_MERGE");
          }
        case 622: break;
        case 86: 
          { System.out.println("TOK_SEND"); toString("TOK_SEND");
          }
        case 623: break;
        case 75: 
          { System.out.println("TOK_PAGE"); toString("TOK_PAGE");
          }
        case 624: break;
        case 312: 
          { System.out.println("TOK_INITIALIZE"); toString("TOK_INITIALIZE");
          }
        case 625: break;
        case 161: 
          { System.out.println("TOK_AUTHOR"); toString("TOK_AUTHOR");
          }
        case 626: break;
        case 242: 
          { System.out.println("TOK_EVALUATE"); toString("TOK_EVALUATE");
          }
        case 627: break;
        case 287: 
          { System.out.println("TOK_REDEFINES"); toString("TOK_REDEFINES");
          }
        case 628: break;
        case 236: 
          { System.out.println("TOK_ALPHABET"); toString("TOK_ALPHABET");
          }
        case 629: break;
        case 206: 
          { System.out.println("TOK_THROUGH"); toString("TOK_THROUGH");
          }
        case 630: break;
        case 301: 
          { System.out.println("TOK_PROCEDURES"); toString("TOK_PROCEDURES");
          }
        case 631: break;
        case 151: 
          { System.out.println("TOK_WORDS"); toString("TOK_WORDS");
          }
        case 632: break;
        case 299: 
          { System.out.println("TOK_END_DIVIDE"); toString("TOK_END_DIVIDE");
          }
        case 633: break;
        case 138: 
          { System.out.println("TOK_RESET"); toString("TOK_RESET");
          }
        case 634: break;
        case 309: 
          { System.out.println("TOK_DEBUG_ITEM"); toString("TOK_DEBUG_ITEM");
          }
        case 635: break;
        case 359: 
          { System.out.println("TOK_OBJECT_COMPUTER"); toString("TOK_OBJECT_COMPUTER");
          }
        case 636: break;
        case 228: 
          { System.out.println("TOK_REMOVAL"); toString("TOK_REMOVAL");
          }
        case 637: break;
        case 74: 
          { System.out.println("TOK_EXIT"); toString("TOK_EXIT");
          }
        case 638: break;
        case 98: 
          { System.out.println("TOK_FROM"); toString("TOK_FROM");
          }
        case 639: break;
        case 65: 
          { System.out.println("TOK_USE"); toString("TOK_USE");
          }
        case 640: break;
        case 267: 
          { System.out.println("TOK_OVERFLOW"); toString("TOK_OVERFLOW");
          }
        case 641: break;
        case 202: 
          { System.out.println("TOK_PERFORM"); toString("TOK_PERFORM");
          }
        case 642: break;
        case 336: 
          { System.out.println("TOK_PAGE_COUNTER"); toString("TOK_PAGE_COUNTER");
          }
        case 643: break;
        case 195: 
          { System.out.println("TOK_MEMORY"); toString("TOK_MEMORY");
          }
        case 644: break;
        case 129: 
          { System.out.println("TOK_START"); toString("TOK_START");
          }
        case 645: break;
        case 338: 
          { System.out.println("TOK_DECLARATIVES"); toString("TOK_DECLARATIVES");
          }
        case 646: break;
        case 354: 
          { System.out.println("TOK_DEBUG_CONTENTS"); toString("TOK_DEBUG_CONTENTS");
          }
        case 647: break;
        case 54: 
          { System.out.println("TOK_EMI"); toString("TOK_EMI");
          }
        case 648: break;
        case 316: 
          { System.out.println("TOK_END_COMPUTE"); toString("TOK_END_COMPUTE");
          }
        case 649: break;
        case 12: 
          { System.out.println("TOK_SEMICOLON"); toString("TOK_SEMICOLON");
          }
        case 650: break;
        case 179: 
          { System.out.println("TOK_GIVING"); toString("TOK_GIVING");
          }
        case 651: break;
        case 13: 
          { System.out.println("TOK_LPAREN"); toString("TOK_LPAREN");
          }
        case 652: break;
        case 277: 
          { System.out.println("TOK_END_WRITE"); toString("TOK_END_WRITE");
          }
        case 653: break;
        case 246: 
          { System.out.println("TOK_PRINTING"); toString("TOK_PRINTING");
          }
        case 654: break;
        case 21: 
          { System.out.println("TOK_CF"); toString("TOK_CF");
          }
        case 655: break;
        case 56: 
          { System.out.println("TOK_TOP"); toString("TOK_TOP");
          }
        case 656: break;
        case 351: 
          { System.out.println("TOK_DECIMAL_POINT"); toString("TOK_DECIMAL_POINT");
          }
        case 657: break;
        case 77: 
          { System.out.println("TOK_TEST"); toString("TOK_TEST");
          }
        case 658: break;
        case 79: 
          { System.out.println("TOK_TIME"); toString("TOK_TIME");
          }
        case 659: break;
        case 40: 
          { System.out.println("TOK_OR"); toString("TOK_OR");
          }
        case 660: break;
        case 78: 
          { System.out.println("TOK_TEXT"); toString("TOK_TEXT");
          }
        case 661: break;
        case 283: 
          { System.out.println("TOK_DELIMITER"); toString("TOK_DELIMITER");
          }
        case 662: break;
        case 320: 
          { System.out.println("TOK_END_OF_PAGE"); toString("TOK_END_OF_PAGE");
          }
        case 663: break;
        case 72: 
          { System.out.println("TOK_COMP"); toString("TOK_COMP");
          }
        case 664: break;
        case 95: 
          { System.out.println("TOK_NEXT"); toString("TOK_NEXT");
          }
        case 665: break;
        case 128: 
          { System.out.println("TOK_SPACE");toString("TOK_SPACE");
          }
        case 666: break;
        case 175: 
          { System.out.println("TOK_DELETE"); toString("TOK_DELETE");
          }
        case 667: break;
        case 343: 
          { System.out.println("TOK_ORGANIZATION"); toString("TOK_ORGANIZATION");
          }
        case 668: break;
        case 193: 
          { System.out.println("TOK_OCCURS"); toString("TOK_OCCURS");
          }
        case 669: break;
        case 305: 
          { System.out.println("TOK_STANDARD_2"); toString("TOK_STANDARD_2");
          }
        case 670: break;
        case 290: 
          { System.out.println("TOK_LOW_VALUE"); toString("TOK_LOW_VALUE");
          }
        case 671: break;
        case 260: 
          { System.out.println("TOK_NEGATIVE"); toString("TOK_NEGATIVE");
          }
        case 672: break;
        case 333: 
          { System.out.println("TOK_END_SUBTRACT"); toString("TOK_END_SUBTRACT");
          }
        case 673: break;
        case 134: 
          { System.out.println("TOK_GROUP"); toString("TOK_GROUP");
          }
        case 674: break;
        case 329: 
          { System.out.println("TOK_DEBUG_SUB_3"); toString("TOK_DEBUG_SUB_3");
          }
        case 675: break;
        case 101: 
          { System.out.println("TOK_LAST"); toString("TOK_LAST");
          }
        case 676: break;
        case 304: 
          { System.out.println("TOK_STANDARD_1"); toString("TOK_STANDARD_1");
          }
        case 677: break;
        case 257: 
          { System.out.println("TOK_SUBTRACT"); toString("TOK_SUBTRACT");
          }
        case 678: break;
        case 30: 
          { System.out.println("TOK_IN"); toString("TOK_IN");
          }
        case 679: break;
        case 85: 
          { System.out.println("TOK_SAME"); toString("TOK_SAME");
          }
        case 680: break;
        case 147: 
          { System.out.println("TOK_OTHER"); toString("TOK_OTHER");
          }
        case 681: break;
        case 171: 
          { System.out.println("TOK_SPACES");toString("TOK_SPACES");
          }
        case 682: break;
        case 360: 
          { System.out.println("TOK_WORKING_STORAGE"); toString("TOK_WORKING_STORAGE");
          }
        case 683: break;
        case 153: 
          { System.out.println("TOK_USING"); toString("TOK_USING");
          }
        case 684: break;
        case 330: 
          { System.out.println("TOK_I_O_CONTROL"); toString("TOK_I_O_CONTROL");
          }
        case 685: break;
        case 201: 
          { System.out.println("TOK_PADDING"); toString("TOK_PADDING");
          }
        case 686: break;
        case 244: 
          { System.out.println("TOK_END_READ"); toString("TOK_END_READ");
          }
        case 687: break;
        case 279: 
          { System.out.println("TOK_PROCEDURE"); toString("TOK_PROCEDURE");
          }
        case 688: break;
        case 61: 
          { System.out.println("TOK_I_O"); toString("TOK_I_O");
          }
        case 689: break;
        case 173: 
          { System.out.println("TOK_SOURCE"); toString("TOK_SOURCE");
          }
        case 690: break;
        case 32: 
          { System.out.println("TOK_GO"); toString("TOK_GO");
          }
        case 691: break;
        case 282: 
          { System.out.println("TOK_DELIMITED"); toString("TOK_DELIMITED");
          }
        case 692: break;
        case 239: 
          { System.out.println("TOK_CONTINUE"); toString("TOK_CONTINUE");
          }
        case 693: break;
        case 178: 
          { System.out.println("TOK_NUMBER"); toString("TOK_NUMBER");
          }
        case 694: break;
        case 308: 
          { System.out.println("TOK_DEBUG_NAME"); toString("TOK_DEBUG_NAME");
          }
        case 695: break;
        case 76: 
          { System.out.println("TOK_TAPE"); toString("TOK_TAPE");
          }
        case 696: break;
        case 224: 
          { System.out.println("TOK_RESERVE"); toString("TOK_RESERVE");
          }
        case 697: break;
        case 192: 
          { System.out.println("TOK_BOTTOM"); toString("TOK_BOTTOM");
          }
        case 698: break;
        case 345: 
          { System.out.println("TOK_CORRESPONDING"); toString("TOK_CORRESPONDING");
          }
        case 699: break;
        case 314: 
          { System.out.println("TOK_HIGH_VALUE"); toString("TOK_HIGH_VALUE");
          }
        case 700: break;
        case 109: 
          { System.out.println("TOK_UNIT"); toString("TOK_UNIT");
          }
        case 701: break;
        case 198: 
          { System.out.println("TOK_CONSOLE"); toString("TOK_CONSOLE");
          }
        case 702: break;
        case 307: 
          { System.out.println("TOK_DESCENDING"); toString("TOK_DESCENDING");
          }
        case 703: break;
        case 139: 
          { System.out.println("TOK_RERUN"); toString("TOK_RERUN");
          }
        case 704: break;
        case 135: 
          { System.out.println("TOK_FALSE"); toString("TOK_FALSE");
          }
        case 705: break;
        case 89: 
          { System.out.println("TOK_SIZE"); toString("TOK_SIZE");
          }
        case 706: break;
        case 229: 
          { System.out.println("TOK_ROUNDED"); toString("TOK_ROUNDED");
          }
        case 707: break;
        case 187: 
          { System.out.println("TOK_LENGTH"); toString("TOK_LENGTH");
          }
        case 708: break;
        case 34: 
          { System.out.println("TOK_RD"); toString("TOK_RD");
          }
        case 709: break;
        case 2: 
          { System.out.println("TOK_PLUS"); toString("TOK_PLUS");
          }
        case 710: break;
        case 117: 
          { System.out.println("TOK_CLASS"); toString("TOK_CLASS");
          }
        case 711: break;
        case 331: 
          { System.out.println("TOK_ALPHANUMERIC"); toString("TOK_ALPHANUMERIC");
          }
        case 712: break;
        case 118: 
          { System.out.println("TOK_CLOSE"); toString("TOK_CLOSE");
          }
        case 713: break;
        case 73: 
          { System.out.println("TOK_ELSE"); toString("TOK_ELSE");
          }
        case 714: break;
        case 300: 
          { System.out.println("TOK_END_RETURN"); toString("TOK_END_RETURN");
          }
        case 715: break;
        case 116: 
          { System.out.println("TOK_ALTER"); toString("TOK_ALTER");
          }
        case 716: break;
        case 363: 
          { System.out.println("TOK_FOREGROUND_COLOR"); toString("TOK_FOREGROUND_COLOR");
          }
        case 717: break;
        case 361: 
          { System.out.println("TOK_ALPHABETIC_LOWER"); toString("TOK_ALPHABETIC_LOWER");
          }
        case 718: break;
        case 189: 
          { System.out.println("TOK_LIMITS"); toString("TOK_LIMITS");
          }
        case 719: break;
        case 48: 
          { System.out.println("TOK_ARE"); toString("TOK_ARE");
          }
        case 720: break;
        case 251: 
          { System.out.println("TOK_TRAILING"); toString("TOK_TRAILING");
          }
        case 721: break;
        case 122: 
          { System.out.println("TOK_ENTER"); toString("TOK_ENTER");
          }
        case 722: break;
        case 177: 
          { System.out.println("TOK_NATIVE"); toString("TOK_NATIVE");
          }
        case 723: break;
        case 41: 
          { System.out.println("TOK_UP"); toString("TOK_UP");
          }
        case 724: break;
        case 156: 
          { System.out.println("TOK_QUEUE"); toString("TOK_QUEUE");
          }
        case 725: break;
        case 263: 
          { System.out.println("TOK_GENERATE"); toString("TOK_GENERATE");
          }
        case 726: break;
        case 285: 
          { System.out.println("TOK_REPLACING"); toString("TOK_REPLACING");
          }
        case 727: break;
        case 114: 
          { System.out.println("TOK_AFTER"); toString("TOK_AFTER");
          }
        case 728: break;
        case 322: 
          { System.out.println("TOK_SUB_QUEUE_1"); toString("TOK_SUB_QUEUE_1");
          }
        case 729: break;
        case 274: 
          { System.out.println("TOK_CHARACTER"); toString("TOK_CHARACTER");
          }
        case 730: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

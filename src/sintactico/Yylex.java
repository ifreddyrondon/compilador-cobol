/* The following code was generated by JFlex 1.4.3 on 02/10/13 10:04 PM */

package sintactico;
import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.PrintWriter;

import utilidades.TablaSimbolos;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02/10/13 10:04 PM from the specification file
 * <tt>/Users/spantons/Documents/workspaceJAVA/Compilador_Cobol/src/sintactico/flexer_sintactico.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMMENT_STATE = 4;
  public static final int YYINITIAL = 0;
  public static final int PICTURE_STATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\63\1\62\22\0\1\2\1\10\1\7"+
    "\1\10\1\53\1\10\1\0\1\11\1\56\1\57\1\3\1\4\1\54"+
    "\1\32\1\6\1\51\1\64\1\41\1\42\1\43\5\5\1\64\1\10"+
    "\1\55\1\61\1\52\1\60\1\0\1\10\1\12\1\31\1\13\1\20"+
    "\1\14\1\25\1\24\1\30\1\23\1\47\1\40\1\27\1\36\1\22"+
    "\1\33\1\15\1\44\1\26\1\17\1\16\1\35\1\21\1\34\1\45"+
    "\1\37\1\46\3\10\1\0\1\10\1\0\2\65\15\50\1\65\2\50"+
    "\1\65\2\50\1\65\1\50\1\65\1\50\1\65\3\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\20\7\1\10\11\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\2\1\22\1\23\1\24"+
    "\2\23\1\25\2\0\1\26\1\0\1\7\1\27\6\7"+
    "\1\0\2\7\1\30\1\31\1\7\1\32\17\7\1\33"+
    "\2\7\1\34\7\7\1\35\6\7\1\36\5\7\1\37"+
    "\7\7\1\40\1\7\1\41\1\7\1\42\1\43\1\0"+
    "\4\7\1\44\1\7\1\45\5\7\1\46\1\7\1\47"+
    "\1\50\15\7\1\51\4\7\1\52\1\53\1\54\7\7"+
    "\1\55\11\7\1\56\1\57\3\0\1\41\1\60\3\7"+
    "\1\61\1\7\1\62\1\63\1\7\1\64\3\7\1\65"+
    "\17\7\1\66\4\7\1\67\1\7\1\70\2\7\1\71"+
    "\1\72\10\7\1\73\22\7\1\74\6\7\1\75\17\7"+
    "\1\76\3\7\1\77\20\7\1\100\10\7\1\101\12\7"+
    "\1\102\22\7\1\103\30\7\1\104\14\7\1\105\13\7"+
    "\1\106\4\7\1\0\5\7\1\107\2\7\1\110\2\7"+
    "\1\111\4\7\1\112\3\7\1\113\4\7\1\114\6\7"+
    "\1\0\2\7\1\115\4\7\1\116\2\7\1\117\5\7"+
    "\1\4\3\7\1\120\2\7\1\121\1\7\1\122\1\123"+
    "\1\7\1\124\1\125\1\126\1\7\1\127\1\130\1\131"+
    "\6\7\1\132\11\7\1\133\1\134\1\135\1\136\3\7"+
    "\1\0\1\137\1\7\1\140\1\141\1\0\15\7\1\142"+
    "\6\7\1\143\4\7\1\144\6\7\1\0\10\7\1\145"+
    "\1\7\1\146\3\7\1\147\2\7\1\150\21\7\1\151"+
    "\2\7\1\21\1\7\1\152\1\7\1\153\2\7\1\154"+
    "\1\0\12\7\1\155\10\7\1\156\1\7\1\157\3\7"+
    "\1\160\5\7\1\161\3\7\1\162\1\7\1\163\3\7"+
    "\1\164\1\165\1\24\5\7\1\166\1\167\1\7\1\170"+
    "\2\7\1\171\1\7\1\172\1\7\1\0\11\7\1\173"+
    "\1\174\1\7\1\14\4\7\1\175\1\7\1\176\15\7"+
    "\1\177\1\200\1\12\5\7\1\0\7\7\1\201\1\7"+
    "\1\202\1\7\1\203\13\7\1\204\3\7\1\205\1\7"+
    "\1\0\6\7\1\0\4\7\1\206\15\7\1\207\5\7"+
    "\1\210\2\7\1\211\7\7\1\212\1\7\1\213\1\214"+
    "\1\215\1\0\11\7\1\216\5\7\1\217\6\7\1\220"+
    "\1\7\1\221\3\7\1\222\1\0\1\7\1\223\3\7"+
    "\1\0\3\7\1\224\1\225\1\226\3\7\1\227\1\7"+
    "\1\230\4\7\1\231\1\232\1\233\1\7\1\234\1\235"+
    "\1\236\3\7\1\237\3\7\1\240\1\241\1\7\1\164"+
    "\1\7\1\242\1\243\1\7\1\244\4\7\1\245\1\246"+
    "\1\0\12\7\1\247\1\7\1\250\3\7\1\251\12\7"+
    "\1\252\7\7\1\253\20\7\1\254\1\255\5\7\1\256"+
    "\1\7\1\257\1\7\1\260\1\7\1\26\1\7\1\261"+
    "\13\7\1\262\2\7\1\263\2\7\1\0\3\7\1\264"+
    "\3\7\1\207\1\265\2\7\1\266\1\7\1\0\10\7"+
    "\1\267\1\7\1\270\2\7\1\271\2\7\1\272\1\7"+
    "\1\273\1\7\1\274\1\275\7\7\1\276\5\7\1\277"+
    "\1\300\2\7\1\301\5\7\1\302\1\303\1\304\1\305"+
    "\4\7\1\306\5\7\1\307\2\7\1\241\12\7\1\310"+
    "\1\7\1\311\1\312\4\7\1\313\3\7\1\314\16\7"+
    "\1\0\6\7\1\0\1\315\1\7\1\316\1\73\1\7"+
    "\1\317\1\7\1\320\2\7\1\321\3\7\1\322\1\323"+
    "\3\7\1\324\5\7\1\0\1\325\6\7\1\0\14\7"+
    "\1\326\1\327\2\7\1\330\1\331\1\7\1\332\2\7"+
    "\1\333\1\7\1\334\1\7\1\335\1\7\1\336\2\7"+
    "\1\20\1\7\1\337\1\7\1\340\1\341\1\273\1\342"+
    "\1\7\1\343\1\7\1\344\2\7\1\345\2\7\1\346"+
    "\1\347\1\7\1\350\1\351\1\352\1\0\1\7\1\353"+
    "\1\7\1\354\6\7\1\0\1\355\3\7\1\356\1\357"+
    "\5\7\1\360\3\7\1\361\1\362\1\363\1\364\5\7"+
    "\1\365\1\366\1\367\11\7\1\370\11\7\1\371\2\7"+
    "\1\372\1\7\1\0\1\373\1\374\1\375\1\7\1\376"+
    "\1\377\1\u0100\1\u0101\1\u0102\1\0\1\u0103\1\7\1\0"+
    "\1\u0104\2\7\1\u0105\2\7\1\u0106\3\7\1\0\13\7"+
    "\1\u0107\1\7\1\u0108\1\0\3\7\1\u0109\1\u010a\2\7"+
    "\1\u010b\5\7\1\u010c\1\0\1\7\1\u010d\7\7\1\u010e"+
    "\1\u010f\2\7\1\0\1\u0110\1\7\1\u0111\1\u0112\1\7"+
    "\1\u0113\1\u0114\2\7\1\u0115\1\7\1\u0116\2\7\1\u0117"+
    "\6\7\1\u0118\10\7\1\u0119\3\7\1\u011a\2\7\1\u011b"+
    "\1\7\1\u011c\3\7\1\0\11\7\1\u011d\2\7\1\u011e"+
    "\1\u011f\1\u0120\16\7\1\u0121\1\u0122\1\u0123\1\7\1\u0124"+
    "\1\u0125\2\7\1\u0126\1\u0127\5\7\1\u0128\1\u0129\1\7"+
    "\1\u012a\1\7\1\u012b\7\7\1\u012c\1\u012d\1\7\1\u012e"+
    "\1\u012f\1\7\1\u0130\7\7\1\u0131\1\u0132\1\7\1\u0133"+
    "\1\7\1\u0134\1\u0135\1\u0136\1\7\1\0\6\7\1\u0137"+
    "\2\7\1\0\1\u0138\1\u0139\1\u013a\1\u013b\4\7\1\u013c"+
    "\4\7\1\u013d\2\7\1\u0126\1\u013e\5\7\1\0\1\u013f"+
    "\4\7\1\u0140\1\7\1\u0141\1\7\1\u0142\1\u0143\1\u0144"+
    "\2\7\1\u0145\5\7\1\u0146\1\u0147\1\u0148\3\7\1\u0149"+
    "\2\7\1\u014a\1\7\1\u014b\1\u014c\1\u014d\4\7\1\u014e"+
    "\1\7\1\0\3\7\1\u013e\1\0\3\7\1\u014f\6\7"+
    "\1\u0150\1\u0151\1\u0152\1\u0153\1\7\1\u0154\3\7\1\137"+
    "\1\7\1\u0155\1\7\1\u0156\3\7\1\u0157\1\u0158\1\u0159"+
    "\3\7\1\u015a\1\7\1\u015b\2\7\1\0\2\7\1\u015c"+
    "\1\u015d\1\u015e\1\u015f\1\7\1\u0160\1\u0161\1\7\1\u0162"+
    "\1\u0163\4\7\1\u0164\7\7\1\u0165\1\7\1\u0166\1\u0167"+
    "\1\u0168\1\7\1\u0169\6\7\1\u016a\2\7\1\u016b\1\u016c"+
    "\1\7\1\u016d\1\u016e\1\u016f\1\u0170\2\7\1\u0171";

  private static int [] zzUnpackAction() {
    int [] result = new int[1556];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\330\0\330\0\u010e"+
    "\0\u0144\0\330\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u010e\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\330\0\330"+
    "\0\330\0\330\0\330\0\330\0\330\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\330\0\330\0\u0804\0\u083a\0\u0870\0\330\0\u08a6"+
    "\0\u017a\0\330\0\u01b0\0\u08dc\0\u061e\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u061e\0\u061e"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u061e\0\u0e8e\0\u0ec4\0\u061e\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u061e\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u061e\0\u1518\0\u154e\0\u061e\0\u1584"+
    "\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u061e\0\u1692\0\u061e\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u061e\0\u17d6\0\u061e\0\u061e"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u061e\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u061e\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\330\0\330"+
    "\0\u07ce\0\u083a\0\u1fa4\0\330\0\u08a6\0\u1fda\0\u2010\0\u2046"+
    "\0\u061e\0\u207c\0\u061e\0\u061e\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u218a\0\u061e\0\u0a56\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448"+
    "\0\u247e\0\u061e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2"+
    "\0\u061e\0\u25f8\0\u262e\0\u061e\0\u061e\0\u2664\0\u269a\0\u26d0"+
    "\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0"+
    "\0\u061e\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u061e"+
    "\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4"+
    "\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u061e"+
    "\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe"+
    "\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae"+
    "\0\u33e4\0\u341a\0\u3450\0\u3486\0\u061e\0\u34bc\0\u34f2\0\u3528"+
    "\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8"+
    "\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888"+
    "\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38"+
    "\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8"+
    "\0\u3c1e\0\u3c54\0\u3c8a\0\u061e\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62"+
    "\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12"+
    "\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2"+
    "\0\u40f8\0\u412e\0\u4164\0\u419a\0\u061e\0\u41d0\0\u4206\0\u423c"+
    "\0\u4272\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec"+
    "\0\u4422\0\u061e\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566"+
    "\0\u459c\0\u45d2\0\u4608\0\u463e\0\u4674\0\u061e\0\u46aa\0\u46e0"+
    "\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890"+
    "\0\u48c6\0\u48fc\0\u4932\0\u061e\0\u4968\0\u499e\0\u061e\0\u49d4"+
    "\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\u4b4e\0\u4b84"+
    "\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe\0\u4d34"+
    "\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78\0\u061e\0\u4eae"+
    "\0\u4ee4\0\u4f1a\0\u4f50\0\u061e\0\u4f86\0\u4fbc\0\u4ff2\0\u5028"+
    "\0\u505e\0\u5094\0\u50ca\0\u5100\0\u061e\0\u5136\0\u516c\0\u51a2"+
    "\0\u061e\0\u51d8\0\u520e\0\u061e\0\u5244\0\u061e\0\u527a\0\u52b0"+
    "\0\u061e\0\u061e\0\u061e\0\u52e6\0\u061e\0\u061e\0\u061e\0\u531c"+
    "\0\u5352\0\u5388\0\u53be\0\u53f4\0\u542a\0\u061e\0\u5460\0\u5496"+
    "\0\u54cc\0\u5502\0\u5538\0\u556e\0\u55a4\0\u55da\0\u5610\0\u061e"+
    "\0\u061e\0\u061e\0\u5646\0\u567c\0\u56b2\0\u56e8\0\u571e\0\u5754"+
    "\0\u578a\0\u061e\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898\0\u58ce"+
    "\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u5a48\0\u5a7e"+
    "\0\u5ab4\0\u061e\0\u5aea\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2\0\u5bf8"+
    "\0\u061e\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u061e\0\u5d06\0\u5d3c"+
    "\0\u5d72\0\u5da8\0\u5dde\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec"+
    "\0\u5f22\0\u5f58\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\u061e"+
    "\0\u609c\0\u60d2\0\u6108\0\u061e\0\u613e\0\u6174\0\u061e\0\u61aa"+
    "\0\u61e0\0\u6216\0\u624c\0\u6282\0\u62b8\0\u62ee\0\u6324\0\u635a"+
    "\0\u6390\0\u63c6\0\u63fc\0\u6432\0\u6468\0\u649e\0\u64d4\0\u650a"+
    "\0\u061e\0\u6540\0\u6576\0\u061e\0\u65ac\0\u061e\0\u65e2\0\u6618"+
    "\0\u664e\0\u6684\0\u061e\0\u66ba\0\u66f0\0\u6726\0\u675c\0\u6792"+
    "\0\u67c8\0\u67fe\0\u6834\0\u686a\0\u68a0\0\u68d6\0\u061e\0\u690c"+
    "\0\u6942\0\u6978\0\u69ae\0\u69e4\0\u6a1a\0\u6a50\0\u6a86\0\u061e"+
    "\0\u6abc\0\u061e\0\u6af2\0\u6b28\0\u6b5e\0\u061e\0\u6b94\0\u6bca"+
    "\0\u6c00\0\u6c36\0\u6c6c\0\u061e\0\u6ca2\0\u6cd8\0\u6d0e\0\u061e"+
    "\0\u6d44\0\u061e\0\u6d7a\0\u6db0\0\u6de6\0\u6e1c\0\u6e52\0\u083a"+
    "\0\u6e88\0\u6ebe\0\u6ef4\0\u6f2a\0\u6f60\0\u061e\0\u061e\0\u6f96"+
    "\0\u6fcc\0\u7002\0\u7038\0\u061e\0\u706e\0\u061e\0\u70a4\0\u70da"+
    "\0\u7110\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e\0\u7254\0\u728a"+
    "\0\u72c0\0\u061e\0\u061e\0\u72f6\0\u061e\0\u732c\0\u7362\0\u7398"+
    "\0\u73ce\0\u061e\0\u7404\0\u061e\0\u743a\0\u7470\0\u74a6\0\u74dc"+
    "\0\u7512\0\u7548\0\u757e\0\u75b4\0\u75ea\0\u7620\0\u7656\0\u768c"+
    "\0\u76c2\0\u061e\0\u061e\0\u061e\0\u76f8\0\u772e\0\u7764\0\u779a"+
    "\0\u77d0\0\u7806\0\u783c\0\u7872\0\u78a8\0\u78de\0\u7914\0\u794a"+
    "\0\u7980\0\u061e\0\u79b6\0\u061e\0\u79ec\0\u061e\0\u7a22\0\u7a58"+
    "\0\u7a8e\0\u7ac4\0\u7afa\0\u7b30\0\u7b66\0\u7b9c\0\u7bd2\0\u7c08"+
    "\0\u7c3e\0\u7c74\0\u7caa\0\u7ce0\0\u7d16\0\u061e\0\u7d4c\0\u7d82"+
    "\0\u7db8\0\u7dee\0\u7e24\0\u7e5a\0\u7e90\0\u7ec6\0\u7efc\0\u7f32"+
    "\0\u7f68\0\u7f9e\0\u7fd4\0\u061e\0\u800a\0\u8040\0\u8076\0\u80ac"+
    "\0\u80e2\0\u8118\0\u814e\0\u8184\0\u81ba\0\u81f0\0\u8226\0\u825c"+
    "\0\u8292\0\u82c8\0\u82fe\0\u8334\0\u836a\0\u83a0\0\u83d6\0\u840c"+
    "\0\u8442\0\u8478\0\u84ae\0\u84e4\0\u851a\0\u8550\0\u8586\0\u85bc"+
    "\0\u85f2\0\u8628\0\u061e\0\u865e\0\u061e\0\u061e\0\u061e\0\u8694"+
    "\0\u86ca\0\u8700\0\u8736\0\u876c\0\u87a2\0\u87d8\0\u880e\0\u8844"+
    "\0\u887a\0\u061e\0\u88b0\0\u88e6\0\u891c\0\u8952\0\u8988\0\u061e"+
    "\0\u89be\0\u89f4\0\u8a2a\0\u8a60\0\u8a96\0\u8acc\0\u061e\0\u8b02"+
    "\0\u061e\0\u8b38\0\u8b6e\0\u8ba4\0\u061e\0\u8bda\0\u8c10\0\u8c46"+
    "\0\u8c7c\0\u8cb2\0\u8ce8\0\u8d1e\0\u8d54\0\u8d8a\0\u8dc0\0\u061e"+
    "\0\u061e\0\u061e\0\u8df6\0\u8e2c\0\u8e62\0\u061e\0\u8e98\0\u061e"+
    "\0\u8ece\0\u8f04\0\u8f3a\0\u8f70\0\u061e\0\u061e\0\u061e\0\u8fa6"+
    "\0\u061e\0\u061e\0\u061e\0\u8fdc\0\u9012\0\u9048\0\u061e\0\u907e"+
    "\0\u90b4\0\u90ea\0\u061e\0\u9120\0\u9156\0\u061e\0\u918c\0\u061e"+
    "\0\u061e\0\u91c2\0\u061e\0\u91f8\0\u922e\0\u9264\0\u929a\0\u061e"+
    "\0\u061e\0\u92d0\0\u9306\0\u933c\0\u9372\0\u93a8\0\u93de\0\u9414"+
    "\0\u944a\0\u9480\0\u94b6\0\u94ec\0\u061e\0\u9522\0\u061e\0\u9558"+
    "\0\u958e\0\u95c4\0\u061e\0\u95fa\0\u9630\0\u9666\0\u969c\0\u96d2"+
    "\0\u9708\0\u973e\0\u9774\0\u97aa\0\u97e0\0\u0a56\0\u9816\0\u984c"+
    "\0\u9882\0\u98b8\0\u98ee\0\u9924\0\u995a\0\u061e\0\u9990\0\u99c6"+
    "\0\u99fc\0\u9a32\0\u9a68\0\u9a9e\0\u9ad4\0\u9b0a\0\u9b40\0\u9b76"+
    "\0\u9bac\0\u9be2\0\u9c18\0\u9c4e\0\u9c84\0\u9cba\0\u061e\0\u061e"+
    "\0\u9cf0\0\u9d26\0\u9d5c\0\u9d92\0\u9dc8\0\u061e\0\u9dfe\0\u061e"+
    "\0\u9e34\0\u061e\0\u9e6a\0\u061e\0\u9ea0\0\u9ed6\0\u9f0c\0\u9f42"+
    "\0\u9f78\0\u9fae\0\u9fe4\0\ua01a\0\ua050\0\ua086\0\ua0bc\0\ua0f2"+
    "\0\ua128\0\u061e\0\ua15e\0\ua194\0\u061e\0\ua1ca\0\ua200\0\ua236"+
    "\0\ua26c\0\ua2a2\0\ua2d8\0\u061e\0\ua30e\0\ua344\0\ua37a\0\u061e"+
    "\0\u061e\0\ua3b0\0\ua3e6\0\u061e\0\ua41c\0\ua452\0\ua488\0\ua4be"+
    "\0\ua4f4\0\ua52a\0\ua560\0\ua596\0\ua5cc\0\ua602\0\u061e\0\ua638"+
    "\0\u061e\0\ua66e\0\ua6a4\0\u061e\0\ua6da\0\ua710\0\u061e\0\ua746"+
    "\0\ua77c\0\ua7b2\0\ua7e8\0\u061e\0\ua81e\0\ua854\0\ua88a\0\ua8c0"+
    "\0\ua8f6\0\ua92c\0\ua962\0\u061e\0\ua998\0\ua9ce\0\uaa04\0\uaa3a"+
    "\0\uaa70\0\u061e\0\uaaa6\0\uaadc\0\uab12\0\u061e\0\uab48\0\uab7e"+
    "\0\uabb4\0\uabea\0\uac20\0\u061e\0\u061e\0\u061e\0\u061e\0\uac56"+
    "\0\uac8c\0\uacc2\0\uacf8\0\u061e\0\uad2e\0\uad64\0\uad9a\0\uadd0"+
    "\0\uae06\0\u061e\0\uae3c\0\uae72\0\u061e\0\uaea8\0\uaede\0\uaf14"+
    "\0\uaf4a\0\uaf80\0\uafb6\0\uafec\0\ub022\0\ub058\0\ub08e\0\u061e"+
    "\0\ub0c4\0\ub0fa\0\u061e\0\ub130\0\ub166\0\ub19c\0\ub1d2\0\u061e"+
    "\0\ub208\0\ub23e\0\ub274\0\u0a56\0\ub2aa\0\ub2e0\0\ub316\0\ub34c"+
    "\0\ub382\0\ub3b8\0\ub3ee\0\ub424\0\ub45a\0\ub490\0\ub4c6\0\ub4fc"+
    "\0\ub532\0\ub568\0\ub59e\0\ub5d4\0\ub60a\0\ub640\0\ub676\0\ub6ac"+
    "\0\ub6e2\0\ub718\0\u061e\0\ub74e\0\u061e\0\u061e\0\ub784\0\u061e"+
    "\0\ub7ba\0\ub7f0\0\ub826\0\ub85c\0\u061e\0\ub892\0\ub8c8\0\ub8fe"+
    "\0\u061e\0\u061e\0\ub934\0\ub96a\0\ub9a0\0\ub9d6\0\uba0c\0\uba42"+
    "\0\uba78\0\ubaae\0\ubae4\0\ubb1a\0\u061e\0\ubb50\0\ubb86\0\ubbbc"+
    "\0\ubbf2\0\ubc28\0\ubc5e\0\ubc94\0\ubcca\0\ubd00\0\ubd36\0\ubd6c"+
    "\0\ubda2\0\ubdd8\0\ube0e\0\ube44\0\ube7a\0\ubeb0\0\ubee6\0\ubf1c"+
    "\0\u061e\0\u061e\0\ubf52\0\ubf88\0\u061e\0\u061e\0\ubfbe\0\ubff4"+
    "\0\uc02a\0\uc060\0\u061e\0\uc096\0\u061e\0\uc0cc\0\u061e\0\uc102"+
    "\0\uc138\0\uc16e\0\uc1a4\0\u061e\0\uc1da\0\u0a56\0\uc210\0\u061e"+
    "\0\u061e\0\u061e\0\u061e\0\uc246\0\u061e\0\uc27c\0\u061e\0\uc2b2"+
    "\0\uc2e8\0\u061e\0\uc31e\0\uc354\0\u061e\0\u061e\0\uc38a\0\u061e"+
    "\0\u061e\0\u061e\0\uc3c0\0\uc3f6\0\u061e\0\uc42c\0\u061e\0\uc462"+
    "\0\uc498\0\uc4ce\0\uc504\0\uc53a\0\uc570\0\uc5a6\0\u061e\0\uc5dc"+
    "\0\uc612\0\uc648\0\u061e\0\u061e\0\uc67e\0\uc6b4\0\uc6ea\0\uc720"+
    "\0\uc756\0\uc78c\0\uc7c2\0\uc7f8\0\uc82e\0\u0a56\0\u061e\0\u061e"+
    "\0\u061e\0\uc864\0\uc89a\0\uc8d0\0\uc906\0\uc93c\0\u061e\0\u061e"+
    "\0\u0a56\0\uc972\0\uc9a8\0\uc9de\0\uca14\0\uca4a\0\uca80\0\ucab6"+
    "\0\ucaec\0\ucb22\0\u0a56\0\ucb58\0\ucb8e\0\ucbc4\0\ucbfa\0\ucc30"+
    "\0\ucc66\0\ucc9c\0\uccd2\0\ucd08\0\u061e\0\ucd3e\0\ucd74\0\u061e"+
    "\0\ucdaa\0\ucde0\0\u061e\0\u061e\0\u061e\0\uce16\0\u061e\0\u061e"+
    "\0\u061e\0\u061e\0\u061e\0\uce4c\0\u061e\0\uce82\0\uceb8\0\uceee"+
    "\0\ucf24\0\ucf5a\0\u061e\0\ucf90\0\ucfc6\0\u061e\0\ucffc\0\ud032"+
    "\0\ud068\0\ud09e\0\ud0d4\0\ud10a\0\ud140\0\ud176\0\ud1ac\0\ud1e2"+
    "\0\ud218\0\ud24e\0\ud284\0\ud2ba\0\ud2f0\0\u061e\0\ud326\0\u061e"+
    "\0\ud35c\0\ud392\0\ud3c8\0\ud3fe\0\u061e\0\u061e\0\ud434\0\ud46a"+
    "\0\u061e\0\ud4a0\0\ud4d6\0\ud50c\0\ud542\0\ud578\0\u061e\0\ud5ae"+
    "\0\ud5e4\0\u061e\0\ud61a\0\ud650\0\ud686\0\ud6bc\0\ud6f2\0\ud728"+
    "\0\ud75e\0\u061e\0\u061e\0\ud794\0\ud7ca\0\ud800\0\u061e\0\ud836"+
    "\0\u061e\0\u061e\0\ud86c\0\u061e\0\u061e\0\ud8a2\0\ud8d8\0\u061e"+
    "\0\ud90e\0\ud944\0\ud97a\0\ud9b0\0\u061e\0\ud9e6\0\uda1c\0\uda52"+
    "\0\uda88\0\udabe\0\udaf4\0\u0a56\0\udb2a\0\udb60\0\udb96\0\udbcc"+
    "\0\udc02\0\udc38\0\udc6e\0\udca4\0\u0a56\0\udcda\0\udd10\0\udd46"+
    "\0\u061e\0\udd7c\0\uddb2\0\udde8\0\ude1e\0\u061e\0\ude54\0\ude8a"+
    "\0\udec0\0\udef6\0\udf2c\0\udf62\0\udf98\0\udfce\0\ue004\0\ue03a"+
    "\0\ue070\0\ue0a6\0\ue0dc\0\u061e\0\ue112\0\ue148\0\u061e\0\u061e"+
    "\0\u061e\0\ue17e\0\ue1b4\0\ue1ea\0\ue220\0\ue256\0\ue28c\0\ue2c2"+
    "\0\ue2f8\0\ue32e\0\ue364\0\ue39a\0\ue3d0\0\ue406\0\ue43c\0\u061e"+
    "\0\u061e\0\u061e\0\ue472\0\ue4a8\0\u061e\0\ue4de\0\ue514\0\ue54a"+
    "\0\u061e\0\ue580\0\ue5b6\0\ue5ec\0\ue622\0\ue658\0\u061e\0\u061e"+
    "\0\ue68e\0\ue6c4\0\ue6fa\0\u061e\0\ue730\0\ue766\0\ue79c\0\ue7d2"+
    "\0\ue808\0\ue83e\0\ue874\0\u0a56\0\u0a56\0\ue8aa\0\u0a56\0\u0a56"+
    "\0\ue8e0\0\u0a56\0\ue916\0\ue94c\0\ue982\0\ue9b8\0\ue9ee\0\uea24"+
    "\0\uea5a\0\u061e\0\u0a56\0\uea90\0\u061e\0\ueac6\0\u0a56\0\u0a56"+
    "\0\u0a56\0\ueafc\0\ueb32\0\ueb68\0\ueb9e\0\uebd4\0\uec0a\0\uec40"+
    "\0\uec76\0\u061e\0\uecac\0\uece2\0\ued18\0\u0a56\0\u0a56\0\u0a56"+
    "\0\u061e\0\ued4e\0\ued84\0\uedba\0\uedf0\0\u061e\0\uee26\0\uee5c"+
    "\0\uee92\0\ueec8\0\u061e\0\ueefe\0\uef34\0\u0a56\0\uef6a\0\uefa0"+
    "\0\uefd6\0\uf00c\0\uf042\0\uf078\0\uf0ae\0\u0a56\0\uf0e4\0\uf11a"+
    "\0\uf150\0\uf186\0\u0a56\0\uf1bc\0\u0a56\0\uf1f2\0\u0a56\0\u0a56"+
    "\0\u0a56\0\uf228\0\uf25e\0\u061e\0\uf294\0\uf2ca\0\uf300\0\uf336"+
    "\0\uf36c\0\u0a56\0\u0a56\0\u0a56\0\uf3a2\0\uf3d8\0\uf40e\0\u0a56"+
    "\0\uf444\0\uf47a\0\u061e\0\uf4b0\0\u0a56\0\u0a56\0\u0a56\0\uf4e6"+
    "\0\uf51c\0\uf552\0\uf588\0\u0a56\0\uf5be\0\uf5f4\0\uf62a\0\uf660"+
    "\0\uf696\0\u0a56\0\uf6cc\0\uf702\0\uf738\0\uf76e\0\uf7a4\0\uf7da"+
    "\0\uf810\0\uf846\0\uf87c\0\uf8b2\0\uf8e8\0\u0a56\0\u0a56\0\u0a56"+
    "\0\u0a56\0\uf91e\0\u0a56\0\uf954\0\uf98a\0\uf9c0\0\u061e\0\uf9f6"+
    "\0\u0a56\0\ufa2c\0\u061e\0\ufa62\0\ufa98\0\uface\0\u0a56\0\u061e"+
    "\0\u0a56\0\ufb04\0\ufb3a\0\ufb70\0\u0a56\0\ufba6\0\u061e\0\ufbdc"+
    "\0\ufc12\0\ufc48\0\ufc7e\0\ufcb4\0\u061e\0\u061e\0\u061e\0\u061e"+
    "\0\ufcea\0\u0a56\0\u0a56\0\ufd20\0\u0a56\0\u0a56\0\ufd56\0\ufd8c"+
    "\0\ufdc2\0\ufdf8\0\u0a56\0\ufe2e\0\ufe64\0\ufe9a\0\ufed0\0\uff06"+
    "\0\uff3c\0\uff72\0\u0a56\0\uffa8\0\u0a56\0\u0a56\0\u061e\0\uffde"+
    "\0\u0a56\1\24\1\112\1\200\1\266\1\354\1\u0122\0\u0a56"+
    "\1\u0158\1\u018e\0\u0a56\0\u0a56\1\u01c4\0\u0a56\0\u0a56\0\u0a56"+
    "\0\u0a56\1\u01fa\1\u0230\0\u0a56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1556];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\5"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\3\11\1\44\1\42\1\45\1\46\1\42\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\6\1\11\1\42\1\5\1\6\1\61\1\62\1\10"+
    "\1\11\1\12\1\13\1\5\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\3\11\1\44\1\42\1\45"+
    "\1\46\1\42\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\6\1\11\1\42\1\63"+
    "\2\6\2\64\1\63\1\65\14\63\1\66\6\63\1\64"+
    "\20\63\2\64\5\63\1\60\1\6\2\64\1\4\1\67"+
    "\64\4\73\0\1\11\33\0\3\11\20\0\1\11\6\0"+
    "\1\11\1\70\32\0\3\11\20\0\1\11\3\0\5\71"+
    "\1\72\52\71\2\0\2\71\2\0\7\73\1\72\50\73"+
    "\2\0\2\73\12\0\1\42\1\74\2\42\1\75\1\76"+
    "\1\77\1\42\1\100\2\42\1\101\1\102\1\103\2\42"+
    "\1\104\2\42\1\105\3\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\106\5\42\1\107\4\42\1\110\1\42\1\111"+
    "\1\112\1\42\1\104\1\113\1\42\1\114\3\42\3\0"+
    "\5\42\14\0\1\42\12\0\5\42\1\115\1\42\1\116"+
    "\1\117\1\42\1\120\1\42\1\121\1\122\2\42\1\104"+
    "\1\123\2\42\1\124\2\42\3\0\1\125\1\126\3\42"+
    "\14\0\1\42\12\0\1\127\1\42\1\130\6\42\1\131"+
    "\1\42\1\132\1\133\1\134\1\135\1\42\1\104\1\136"+
    "\1\42\1\137\3\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\140\1\42\1\141\6\42\1\142\2\42\1\143\1\42"+
    "\1\144\1\42\1\104\1\145\3\42\1\146\1\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\147\1\150\1\151\1\152"+
    "\1\153\1\42\1\154\2\42\1\155\6\42\1\104\1\156"+
    "\1\42\1\157\1\42\1\160\1\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\161\1\42\1\162\6\42\1\163\6\42"+
    "\1\104\1\164\1\42\1\165\1\42\1\166\1\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\167\17\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\170\1\42\1\171"+
    "\15\42\1\104\1\172\1\42\1\173\3\42\3\0\5\42"+
    "\14\0\1\42\12\0\5\42\1\174\1\175\1\42\1\176"+
    "\2\42\1\177\4\42\1\200\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\201\6\42\1\202\2\42\1\203"+
    "\1\204\2\42\1\104\1\205\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\206\5\42\1\207\2\42\1\210\2\42"+
    "\1\211\3\42\1\104\1\212\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\213\1\42\1\214\3\42\1\215\2\42"+
    "\1\216\1\42\1\217\2\42\1\220\1\42\1\104\1\221"+
    "\1\42\1\222\3\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\223\1\42\1\224\6\42\1\225\6\42\1\104\1\226"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\2\42\1\227"+
    "\6\42\1\230\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\231\1\42\1\232\6\42\1\233\3\42"+
    "\1\234\2\42\1\104\1\235\3\42\1\236\1\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\42\1\237\1\42\1\240"+
    "\1\241\2\42\1\242\1\243\2\42\1\244\1\245\2\42"+
    "\1\246\1\104\2\42\1\247\1\250\2\42\3\0\5\42"+
    "\14\0\1\42\12\0\11\42\1\251\2\42\1\252\1\42"+
    "\1\253\1\42\1\104\1\254\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\3\42\1\255\1\42\1\256\2\42\1\257"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\260\15\42\1\104\1\261\1\42\1\262\3\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\263\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\2\42\1\264\3\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\265\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\2\42\1\266\3\42"+
    "\3\0\5\42\14\0\1\42\52\0\1\267\65\0\1\270"+
    "\14\0\1\6\66\0\1\271\1\62\65\0\2\64\1\0"+
    "\1\272\23\0\1\64\20\0\2\64\1\0\1\273\5\0"+
    "\2\64\3\0\2\64\1\0\1\272\23\0\1\64\20\0"+
    "\2\64\7\0\2\64\17\0\1\274\53\0\1\275\33\0"+
    "\3\275\20\0\1\275\13\0\1\42\1\276\16\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\42\1\277"+
    "\3\42\1\300\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\6\42\1\301\1\302\10\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\6\42\1\303\11\42"+
    "\1\104\4\42\1\304\1\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\305\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\306\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\3\42\1\307\1\310"+
    "\1\311\7\42\1\312\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\20\313\1\104\16\313"+
    "\13\0\2\313\12\0\4\42\1\314\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\315\4\42"+
    "\1\316\2\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\317\17\42\1\104\1\320\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\321\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\6\42\1\322\1\42\1\323"+
    "\3\42\1\324\1\325\1\42\1\326\1\104\2\42\1\327"+
    "\1\330\2\42\3\0\5\42\14\0\1\42\12\0\14\42"+
    "\1\331\3\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\332\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\333\1\42\1\334\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\335\3\42"+
    "\1\336\1\42\1\337\1\340\10\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\341\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\14\42\1\342"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\343\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\3\42\1\344\14\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\345\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\2\42\1\346\3\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\42\1\347\2\42\1\350\4\42\1\351\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\42\1\352"+
    "\4\42\1\353\3\42\1\354\5\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\355\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\42\1\356"+
    "\16\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\357\6\42\1\104\1\360\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\2\42\1\361\3\42"+
    "\3\0\5\42\14\0\1\42\12\0\5\42\1\362\3\42"+
    "\1\363\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\364\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\3\42\1\365\11\42\1\366\1\42"+
    "\1\367\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\370\6\42\1\371\3\42\1\104\6\42\3\0"+
    "\1\42\1\372\3\42\14\0\1\42\12\0\20\42\1\104"+
    "\3\42\1\373\2\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\374\17\42\1\104\2\42\1\375\3\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\376\1\42\1\377\11\42\1\u0100"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\3\42\1\u0101\14\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\3\42\1\u0102\14\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\3\42\1\u0103"+
    "\2\42\3\0\5\42\14\0\1\42\12\0\14\42\1\u0104"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u0105\1\u0106\1\42\1\u0107\1\u0108\3\42\1\u0109\1\42"+
    "\1\u010a\2\42\1\u010b\2\42\1\104\6\42\3\0\1\u010c"+
    "\4\42\14\0\1\42\12\0\1\u010d\1\42\1\u010e\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\u010f"+
    "\13\42\1\u0110\3\42\1\104\1\u0111\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\12\42\1\u0112\5\42\1\104\6\42"+
    "\3\0\2\42\1\u0113\2\42\14\0\1\42\12\0\14\42"+
    "\1\u0114\3\42\1\104\2\42\1\u0115\3\42\3\0\5\42"+
    "\14\0\1\42\12\0\3\42\1\u0116\13\42\1\u0117\1\104"+
    "\3\42\1\u0118\2\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u0119\7\42\1\104\3\42\1\u011a\2\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u011b\13\42\1\104"+
    "\4\42\1\u011c\1\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\42\1\u011d\1\42\1\u011e\1\u011f\1\u0120\7\42\1\u0121"+
    "\1\42\1\u0122\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\5\42\1\u0123\1\42\1\u0124\10\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\1\42"+
    "\1\u0125\4\42\3\0\5\42\14\0\1\42\12\0\3\42"+
    "\1\u0126\14\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u0127\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\14\42\1\u0128\1\u0129\2\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u012a"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\12\42\1\u012b\5\42\1\104\6\42\3\0\1\42\1\u012c"+
    "\3\42\14\0\1\42\12\0\4\42\1\u012d\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\3\42\1\u012e\2\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u012f\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\3\42\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134"+
    "\1\42\1\u0135\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\20\313\1\104\1\u0136\15\313"+
    "\13\0\2\313\12\0\10\42\1\u0137\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\7\42\1\u0138\10\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u0139\15\42\1\104\1\u013a\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\1\u013b\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\15\42\1\u013c\2\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u013d\3\42"+
    "\1\u013e\1\u013f\2\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\1\u0140\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\14\42\1\u0141\3\42\1\104\1\u0142"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u0143"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u0144\1\u0145\1\u0146\1\u0147\1\u0148\1\u0149\1\u014a\1\u014b"+
    "\1\u014c\2\42\1\u014d\1\u014e\1\u014f\2\42\1\104\1\42"+
    "\1\u0150\1\42\1\u0151\2\42\3\0\5\42\14\0\1\42"+
    "\12\0\12\42\1\u0152\5\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\2\42\1\u0153\3\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u0154\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\5\42"+
    "\1\u0155\11\42\1\u0156\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u0157\4\42\1\u0158\2\42\1\u0159\2\42"+
    "\1\u015a\4\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u015b\7\42\1\104\3\42\1\u015c\2\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\42\1\u015d\16\42"+
    "\1\104\1\42\1\u015e\4\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\u015f\17\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\12\42\1\u0160\5\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\42\1\u0161\16\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\13\42\1\u0162"+
    "\4\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u0163\7\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u0164\10\42\1\u0165\6\42\1\104\1\u0166"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u0167"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\42\1\u0168\16\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u0169\1\42\1\u016a\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\16\42\1\u016b"+
    "\1\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u016c\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\13\42\1\u016d\4\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\6\42\1\u016e\3\42\1\u016f"+
    "\5\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\6\42\3\0\3\42\1\u0170\1\42\14\0"+
    "\1\42\12\0\4\42\1\u0171\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u0172\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u0173"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u0174\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u0175\6\42\1\u0176\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\14\42\1\u0177"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\1\u0178\5\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\u0179\1\42\1\u017a\6\42\1\u017b\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u017c"+
    "\1\u017d\1\u017e\2\42\1\u017f\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\5\42\1\u0180\6\42\1\u0181"+
    "\3\42\1\104\3\42\1\u0182\2\42\3\0\5\42\14\0"+
    "\1\42\12\0\6\42\1\u0183\1\u0184\10\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\15\42\1\u0185\2\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\4\42\1\u0186\1\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u0187\15\42\1\104\1\u0188\5\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u0189\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\5\42\1\u018a"+
    "\12\42\1\104\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\u018b\33\0\3\u018b\20\0\1\u018b\13\0\2\42\1\u018c"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u018d\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\11\42\1\u018e\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\u018f\17\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u0190\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\u0191"+
    "\17\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\16\42\1\u0192\1\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u0193\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\1\u0194\5\42"+
    "\3\0\5\42\14\0\1\42\12\0\16\42\1\u0195\1\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\42"+
    "\1\u0196\16\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\15\42\1\u0197\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\5\42\1\u0198\12\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\42\1\u0199\3\42"+
    "\1\u019a\12\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\u019b\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u019c\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u019d\1\u019e"+
    "\5\42\1\u019f\4\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\14\42\1\u01a0\3\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\15\42\1\u01a1\2\42\1\104"+
    "\2\42\1\u01a2\3\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\1\u01a3\5\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u01a4\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\3\42\1\u01a5\14\42\1\104\3\42"+
    "\1\u01a6\2\42\3\0\5\42\14\0\1\42\12\0\14\42"+
    "\1\u01a7\3\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\15\42\1\u01a8\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\14\42\1\u01a9\3\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\17\42\1\u01aa\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u01ab"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\u01ac\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u01ad\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\1\u01ae\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u01af\6\42\1\u01b0\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\u01b1"+
    "\17\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u01b2\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u01b3\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u01b4\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\5\42\1\u01b5\3\0\5\42\14\0\1\42\12\0\6\42"+
    "\1\u01b6\11\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u01b7\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\13\42\1\u01b8\4\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u01b9\13\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u01ba\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\42\1\u01bb\10\42\1\u01bc\5\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\5\42\1\u01bd\12\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u01be\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u01bf\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\12\42\1\u01c0\5\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u01c1\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\15\42"+
    "\1\u01c2\2\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\15\42\1\u01c3\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\4\42\1\u01c4\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\3\42"+
    "\1\u01c5\2\42\3\0\5\42\14\0\1\42\12\0\4\42"+
    "\1\u01c6\13\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u01c7\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\11\42\1\u01c8\6\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u01c9\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u01ca\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u01cb\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\1\u01cc\1\42\1\u01cd"+
    "\3\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u01ce"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u01cf\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u01d0\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u01d1\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u01d2"+
    "\13\42\1\104\2\42\1\u01d3\3\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u01d4\17\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\4\42\1\u01d5\1\42\1\u01d6\11\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\3\42\1\u01d7\2\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u01d8\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\2\42\1\u01d9\3\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\42\1\u01da\16\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\42"+
    "\1\u01db\16\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u01dc\3\42\1\u01dd\3\42\1\u01de\3\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u01df\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\3\42\1\u01e0\14\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\10\42\1\u01e1\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u01e2\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\4\42"+
    "\1\u01e3\13\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\u01e4\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\14\42\1\u01e5\3\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u01e6\13\42"+
    "\1\u01e7\6\42\3\0\5\42\14\0\1\42\12\0\1\42"+
    "\1\u01e8\16\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\17\42\1\u01e9\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u01ea\1\42\1\u01eb\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\u01ec\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\11\42\1\u01ed\3\42"+
    "\1\u01ee\2\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u01ef\1\42\1\u01f0\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\u01f1\17\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\42\1\u01f2"+
    "\2\42\1\u01f3\13\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u01f4\6\42\1\u01f5\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\2\42\1\u01f6\3\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u01f7\2\42\1\u01f8\14\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\11\42\1\u01f9\6\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u01fa\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\15\42"+
    "\1\u01fb\2\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\u01fc\17\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\4\42\1\u01fd\1\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\2\42\1\u01fe"+
    "\3\42\3\0\5\42\14\0\1\42\12\0\11\42\1\u01ff"+
    "\6\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u0200\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u0201\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u0202\14\42\1\u0203\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u0204"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\2\42\1\u0205\3\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\1\u0206\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\3\42\1\u0207\1\u0208\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u0209"+
    "\6\42\1\u020a\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u020b\17\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\4\42\1\u020c\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\20\313"+
    "\1\u020d\16\313\13\0\2\313\12\0\2\42\1\u020e\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u020f\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\u0210\17\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\2\42\1\u0211\3\42\3\0"+
    "\5\42\14\0\1\42\12\0\17\42\1\u0212\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\5\42\1\u0213\12\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\u0214"+
    "\17\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u0215\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u0216\12\42\1\u0217\2\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\3\42\1\u0218\2\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u0219\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u021a\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\6\42\1\u021b\11\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\6\42\1\u021c"+
    "\11\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u021d\15\42\1\104\1\u021e\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\15\42\1\u021f\2\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\15\42\1\u0220\2\42"+
    "\1\104\1\u0221\5\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\2\42\1\u0222\3\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u0223\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u0224\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u0225"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u0226\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u0227\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\2\42\1\u0228\3\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\u0229\1\42\1\u022a"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u022b\2\42\1\u022c\3\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\u022d\17\42\1\104\1\u022e"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\16\42\1\u022f"+
    "\1\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u0230\7\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u0231\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u0232\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\6\42\1\u0233"+
    "\11\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u0234\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\12\42\1\u0235\5\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u0236\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\u0237\1\42"+
    "\1\u0238\15\42\1\104\5\42\1\u0239\3\0\5\42\14\0"+
    "\1\42\12\0\11\42\1\u023a\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\5\42\1\u023b"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\u023c\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\6\42\1\u023d\11\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\16\42"+
    "\1\u023e\1\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\5\42\1\u023f\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\1\u0240\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u0241\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u0242\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u0243"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\42\1\u0244\16\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u0245\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\2\42\1\u0246"+
    "\3\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u0247"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u0248\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u0249\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u024a\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u024b"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u024c\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u024d\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\3\42\1\u024e\14\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u024f\13\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\16\42"+
    "\1\u0250\1\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u0251\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\10\42\1\u0252\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\15\42\1\u0253\2\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\6\42"+
    "\1\u0254\11\42\1\104\5\42\1\u0255\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u0256\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\12\42\1\u0257\5\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u0258"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u0259\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u025a\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u025b\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u025c"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u025d\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\12\42\1\u025e\5\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\1\u025f\5\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u0260\15\42"+
    "\1\104\2\42\1\u0261\3\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u0262\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\4\42\1\u0263\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\2\42"+
    "\1\u0264\3\42\3\0\5\42\14\0\1\42\12\0\4\42"+
    "\1\u0265\13\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\1\u0266\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u0267\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\u018b\33\0\3\u018b\13\0"+
    "\1\u0268\4\0\1\u018b\13\0\3\42\1\u0269\1\42\1\u026a"+
    "\12\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u026b\7\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\12\42\1\u026c\5\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u026d\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\14\42\1\u026e"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u026f\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u0270\17\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\14\42\1\u0271\3\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\1\u0272"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u0273"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u0274\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\5\42\1\u0275\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u0276\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\u0277\17\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\u0278"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\u0279\1\42"+
    "\1\u027a\6\42\1\u027b\2\42\1\u027c\3\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\1\u027d"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\11\42\1\u027e"+
    "\6\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u027f\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u0280\17\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\3\42\1\u0281\2\42"+
    "\3\0\5\42\14\0\1\42\12\0\15\42\1\u0282\2\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\4\42"+
    "\1\u0283\13\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\2\42\1\u0284\3\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u0285\17\42\1\104\1\u0286\1\42"+
    "\1\u0287\3\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u0288\15\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\2\42\1\u0289\3\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\4\42\1\u028a\1\42"+
    "\3\0\5\42\14\0\1\42\12\0\15\42\1\u028b\2\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\14\42"+
    "\1\u028c\3\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\1\u028d\1\u028e\1\u028f\1\u0290\1\313"+
    "\1\u0291\1\u0292\2\313\1\u0293\2\313\1\u0294\3\313\1\104"+
    "\1\u0295\1\u0296\1\u0297\1\u0298\12\313\13\0\2\313\12\0"+
    "\14\42\1\u0299\3\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\14\42\1\u029a\3\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\13\42\1\u029b\4\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\15\42\1\u029c"+
    "\2\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\3\42\1\u029d\14\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u029e\3\42\1\u029f\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u02a0"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u02a1\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\u02a2\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\1\u02a3\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\2\42\1\u02a4\3\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u02a5\13\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u02a6\15\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\u02a7\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\4\42\1\u02a8\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u02a9\13\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u02aa\15\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\4\42\1\u02ab\1\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u02ac\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\11\42\1\u02ad\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\5\42"+
    "\1\u02ae\12\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\15\42\1\u02af\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\2\42\1\u02b0\3\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u02b1\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\42"+
    "\1\u02b2\16\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\u02b3\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\14\42\1\u02b4\3\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\14\42\1\u02b5\3\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u02b6\15\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u02b7\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\42\1\u02b8\16\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u02b9\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u02ba\15\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\u02bb\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\2\42\1\u02bc\3\42"+
    "\3\0\5\42\14\0\1\42\12\0\6\42\1\u02bd\11\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\4\42"+
    "\1\u02be\13\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u02bf\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\u02c0\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\42\1\u02c1\16\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u02c2\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\14\42"+
    "\1\u02c3\3\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\20\313\1\104\11\313\1\u02c4\4\313"+
    "\13\0\2\313\12\0\16\42\1\u02c5\1\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\1\u02c6"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\20\42\1\u02c7"+
    "\6\42\3\0\5\42\14\0\1\42\5\0\1\313\4\0"+
    "\20\313\1\104\1\u02c8\15\313\13\0\2\313\12\0\20\42"+
    "\1\104\3\42\1\u02c9\2\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\u02ca\17\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u02cb\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\16\42\1\u02cc\1\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\11\42\1\u02cd"+
    "\6\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u02ce\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\11\42\1\u02cf\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u02d0\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\3\42\1\u02d1\2\42\3\0\5\42\14\0\1\42\12\0"+
    "\12\42\1\u02d2\5\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\17\42\1\u02d3\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\15\42\1\u02d4\2\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\5\42\1\u02d5\1\u02d6"+
    "\11\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u02d7\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\3\42\1\u02d8\2\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u02d9\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u02da"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\7\42\1\u02db\10\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u02dc\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u02dd\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u02de"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\4\42\1\u02df\13\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u02e0\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u02e1\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\u02e2\17\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\6\42\3\0\1\42\1\u02e3\3\42\14\0\1\42"+
    "\12\0\1\42\1\u02e4\16\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\15\42\1\u02e5\2\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\11\42\1\u02e6\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\1\313\1\u02e7\16\313\1\104\16\313\13\0\2\313"+
    "\12\0\14\42\1\u02e8\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\10\42\1\u02e9\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u02ea\13\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\3\42"+
    "\1\u02eb\14\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\1\u02ec\17\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u02ed\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\15\42\1\u02ee\2\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u02ef"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\u02f0\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u02f1\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\12\42\1\u02f2\5\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u02f3\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\1\u02f4\5\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u02f5\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\u02f6\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u02f7\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u02f8\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\14\42\1\u02f9"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\4\42\1\u02fa\7\42\1\u02fb\3\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\13\42\1\u02fc\4\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\14\42\1\u02fd"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\3\42\1\u02fe\2\42\3\0\5\42\14\0"+
    "\1\42\12\0\14\42\1\u02ff\3\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u0300\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u0301"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u0302\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u0303\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\11\42\1\u0304\6\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\11\42\1\u0305\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\7\42"+
    "\1\u0306\10\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u0307\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\6\42\1\u0308\11\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\15\42\1\u0309\2\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u030a\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u030b\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\12\42\1\u030c\5\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\5\42\1\u030d\12\42"+
    "\1\u030e\6\42\3\0\5\42\14\0\1\42\12\0\1\u030f"+
    "\17\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\4\42\1\u0310\13\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\7\313\1\u0311\10\313\1\104"+
    "\16\313\13\0\2\313\12\0\11\42\1\u0312\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\15\42\1\u0313"+
    "\2\42\1\u0314\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\12\42\1\u0315\5\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\14\42\1\u0316\3\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u0317\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\5\42\1\u0318\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\5\42\1\u0319\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\5\42\1\u031a\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\1\u031b\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\14\42\1\u031c\3\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\1\u031d\5\42"+
    "\3\0\5\42\14\0\1\42\12\0\14\42\1\u031e\3\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\13\42"+
    "\1\u031f\4\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\u0320\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\10\42\1\u0321\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\42\1\u0322\16\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\2\42\1\u0323\3\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u0324\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u0325\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u0326\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\5\42"+
    "\1\u0327\12\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\u0328\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u0329\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\12\42\1\u032a\5\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\15\42"+
    "\1\u032b\2\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\u032c\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\14\42\1\u032d\3\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\u032e\17\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u032f"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\14\42\1\u0330\3\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\15\42\1\u0331\2\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u0332\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u0333"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u0334\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u0335\2\42\1\u0336\12\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\11\42\1\u0337"+
    "\6\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\4\42\1\u0338\13\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\5\42\1\u0339\12\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\6\42\1\u033a\11\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u033b"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\42\1\u033c\16\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u033d\6\42\1\u033e\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u033f\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\14\42"+
    "\1\u0340\3\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\15\42\1\u0341\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\u0342\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\42\1\u0343\16\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\5\313"+
    "\1\u0344\12\313\1\104\16\313\13\0\2\313\12\0\11\42"+
    "\1\u0345\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u0346\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\10\42\1\u0347\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\1\u0348"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\15\42\1\u0349"+
    "\2\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\12\42\1\u034a\5\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\5\42\1\u034b\12\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u034c\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u034d"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\4\42\1\u034e\13\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u034f\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u0350\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u0351"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u0352\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u0353\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\6\313\1\u0354\11\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\1\u0355"+
    "\17\313\1\104\1\u0356\15\313\13\0\2\313\5\0\1\313"+
    "\4\0\7\313\1\u0357\10\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\2\313\1\u0358\15\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\2\313\1\u0359\1\313"+
    "\1\u035a\13\313\1\104\2\313\1\u035b\13\313\13\0\2\313"+
    "\5\0\1\313\4\0\2\313\1\u035c\6\313\1\u035d\6\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\13\313"+
    "\1\u035e\4\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u035f\15\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\13\313\1\u0360\4\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\14\313\1\u0361\3\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\10\313"+
    "\1\u0362\7\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\20\313\1\104\2\313\1\u0363\13\313\13\0\2\313"+
    "\12\0\20\42\1\104\1\u0364\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u0365\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\6\42\1\u0366\11\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u0367"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\6\42\1\u0368\11\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u0369\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\1\313\1\u036a"+
    "\16\313\1\104\16\313\13\0\2\313\12\0\14\42\1\u036b"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\14\42\1\u036c\3\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\11\42\1\u036d\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u036e\3\42\1\u036f"+
    "\11\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u0370\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\u0371\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u0372\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\11\42\1\u0373\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u0374\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\u0375\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\12\42\1\u0376\5\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u0377\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\16\42"+
    "\1\u0378\1\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\1\u0379\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\11\42\1\u037a\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\u037b\17\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u037c\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u037d\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u037e\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\10\42\1\u037f\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\5\42\1\u0380\12\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\u0381"+
    "\17\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u0382\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u0383\17\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\12\42\1\u0384\5\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\20\313"+
    "\1\104\3\313\1\u0385\12\313\13\0\2\313\12\0\2\42"+
    "\1\u0386\15\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\5\42\1\u0387\12\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u0388\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\20\313\1\104"+
    "\2\313\1\u0389\13\313\13\0\2\313\12\0\14\42\1\u038a"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\15\42\1\u038b\2\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\1\313\1\u038c\16\313\1\104"+
    "\1\313\1\u038d\14\313\13\0\2\313\5\0\1\313\4\0"+
    "\13\313\1\u038e\4\313\1\104\16\313\13\0\2\313\12\0"+
    "\1\u038f\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\u0390\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\6\42\1\u0391\11\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\15\42\1\u0392\2\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u0393\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u0394\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u0395\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\11\42\1\u0396\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\12\42"+
    "\1\u0397\5\42\1\u0398\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\15\42\1\u0399\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u039a\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u039b\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u039c"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\42\1\u039d\16\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\11\42\1\u039e\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u039f\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\5\42\1\u03a0"+
    "\12\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u03a1\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\11\42\1\u03a2\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u03a3\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\14\42\1\u03a4"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u03a5\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\u03a6\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\42\1\u03a7\16\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\15\42\1\u03a8\2\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u03a9"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u03aa\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\u03ab\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u03ac\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\20\313\1\104"+
    "\1\u03ad\15\313\13\0\2\313\12\0\1\u03ae\17\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\12\42\1\u03af"+
    "\5\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u03b0\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\15\42\1\u03b1\2\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\1\313\1\u03b2"+
    "\7\313\1\u03b3\6\313\1\104\16\313\13\0\2\313\12\0"+
    "\14\42\1\u03b4\3\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\14\42\1\u03b5\3\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u03b6\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\3\42\1\u03b7\2\42\3\0\5\42\14\0\1\42\12\0"+
    "\7\42\1\u03b8\10\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\6\42\1\u03b9\11\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\42\1\u03ba\16\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u03bb"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u03bc\7\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\7\42\1\u03bd\10\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u03be\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\5\42\1\u03bf"+
    "\12\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u03c0\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u03c1\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u03c2\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\5\42\1\u03c3"+
    "\12\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\6\42\1\u03c4\11\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u03c5\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u03c6\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\u03c7\17\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u03c8\15\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u03c9\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\16\42\1\u03ca\1\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u03cb\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\1\313\1\u03cc\16\313\1\104\16\313\13\0\2\313"+
    "\12\0\12\42\1\u03cd\5\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\5\42\1\u03ce\12\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\1\u03cf"+
    "\17\313\1\104\16\313\13\0\2\313\12\0\10\42\1\u03d0"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u03d1\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\7\313\1\u03d2\10\313\1\104"+
    "\16\313\13\0\2\313\12\0\14\42\1\u03d3\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u03d4"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\4\42\1\u03d5\1\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\3\42\1\u03d6\2\42\3\0"+
    "\5\42\14\0\1\42\12\0\5\42\1\u03d7\12\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\10\42\1\u03d8"+
    "\7\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\15\42\1\u03d9\2\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\11\42\1\u03da\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u03db\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u03dc"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u03dd\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u03de\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\11\42\1\u03df\6\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\15\42\1\u03e0"+
    "\2\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\12\42\1\u03e1\5\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\4\42\1\u03e2\1\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u03e3\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\3\42\1\u03e4"+
    "\14\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u03e5\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\5\42\1\u0336\12\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\13\42\1\u03e6\4\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\11\42\1\u03e7"+
    "\6\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u03e8\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\20\42\1\104\2\42\1\u03e9\3\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u03ea\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\u03eb\17\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\20\313\1\104\2\313\1\u03ec\13\313\13\0\2\313"+
    "\12\0\4\42\1\u03ed\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\2\313\1\u03ee\15\313"+
    "\1\104\16\313\13\0\2\313\12\0\10\42\1\u03ef\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\4\42"+
    "\1\u03f0\13\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\2\42\1\u03f1\3\42\3\0\5\42"+
    "\14\0\1\42\12\0\15\42\1\u03f2\2\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u03f3\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\2\42\1\u03f4\3\42\3\0\5\42\14\0\1\42"+
    "\12\0\3\42\1\u03f5\14\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\11\42\1\u03f6\6\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\u03f7\1\42\1\u03f8"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u03f9\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\42\1\u03fa\16\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u03fb\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\5\0\1\313\4\0"+
    "\6\313\1\u03fc\11\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\15\313\1\u03fd\2\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\20\313\1\104\3\313\1\u03fe"+
    "\12\313\13\0\2\313\5\0\1\313\4\0\1\u03ff\17\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\14\313"+
    "\1\u0400\3\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\1\u0401\17\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\1\u0402\13\313\1\u0403\3\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\17\313\1\u0404\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\15\313\1\u0405"+
    "\2\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\7\313\1\u0406\10\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\1\u0407\1\u0408\2\313\1\u0409\13\313\1\104"+
    "\1\313\1\u040a\14\313\13\0\2\313\5\0\1\313\4\0"+
    "\20\313\1\u040b\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\11\313\1\u040c\6\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\5\313\1\u040d\12\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\15\313\1\u040e\2\313\1\104"+
    "\16\313\13\0\2\313\12\0\10\42\1\u040f\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\11\42\1\u0410"+
    "\6\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u0411\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\u0412\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\12\42\1\u0413\5\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\20\313\1\104\1\u0414"+
    "\15\313\13\0\2\313\12\0\20\42\1\104\3\42\1\u0415"+
    "\2\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u0416"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u0417\7\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\6\42\1\u0418\11\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\2\42\1\u0419"+
    "\3\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\3\42\1\u041a\2\42\3\0\5\42\14\0\1\42\12\0"+
    "\7\42\1\u041b\10\42\1\104\1\u041c\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\14\42\1\u041d\3\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u041e\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\u041f"+
    "\17\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u0420\7\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\16\42\1\u0421\1\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u0422\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\4\42\1\u0423"+
    "\13\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\4\42\1\u0424\13\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\42\1\u0425\16\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u0426\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\42\1\u0427"+
    "\2\42\1\u0428\13\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\15\42\1\u0429\2\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u042a\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\5\0\1\313\4\0"+
    "\2\313\1\u042b\15\313\1\104\16\313\13\0\2\313\12\0"+
    "\20\42\1\u042c\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u042d\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\42\1\u042e\16\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\2\313\1\u042f"+
    "\15\313\1\104\16\313\13\0\2\313\12\0\20\42\1\104"+
    "\1\u0430\5\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u0431\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\20\313\1\104\1\u0432\15\313\13\0"+
    "\2\313\5\0\1\313\4\0\14\313\1\u0433\3\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\20\313\1\u0434"+
    "\16\313\13\0\2\313\12\0\15\42\1\u0435\2\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\u0436\17\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u0437\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\6\42\1\u0438\11\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u0439\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u043a\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\11\42\1\u043b"+
    "\6\42\1\104\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\1\313\1\u043c\3\313\1\u043d\2\313\1\u043e"+
    "\1\u043f\3\313\1\u0440\2\313\1\104\16\313\13\0\2\313"+
    "\12\0\2\42\1\u0441\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\4\42\1\u0442\1\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\1\u0443"+
    "\5\42\3\0\5\42\14\0\1\42\12\0\1\u0444\17\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\1\42"+
    "\1\u0445\16\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\12\42\1\u0446\5\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\7\42\1\u0447\10\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\42\1\u0448\16\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\13\42"+
    "\1\u0449\4\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\20\313\1\104\1\u044a\15\313\13\0"+
    "\2\313\12\0\4\42\1\u044b\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\15\42\1\u044c\2\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\6\42\1\u044d"+
    "\11\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\4\42\1\u044e\13\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\6\42\1\u044f\11\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u0450\10\42\1\u0451"+
    "\2\42\1\104\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\10\313\1\u0452\7\313\1\104\16\313\13\0"+
    "\2\313\12\0\4\42\1\u0453\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u0454\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\5\0\1\313\4\0"+
    "\20\313\1\104\1\u0455\15\313\13\0\2\313\5\0\1\313"+
    "\4\0\6\313\1\u0456\11\313\1\104\16\313\13\0\2\313"+
    "\12\0\20\42\1\104\1\u0457\5\42\3\0\5\42\14\0"+
    "\1\42\12\0\12\42\1\u0458\5\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u0459\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\5\42\1\u045a"+
    "\12\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u045b\6\42\1\u045c\6\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\5\42\1\u045d\3\42\1\u045e"+
    "\6\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u045f\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u0460\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u0461\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\5\42\1\u0462"+
    "\12\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u0463\7\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\7\42\1\u0464\10\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u0465\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u0466"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\6\42\1\u0467\11\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\15\42\1\u0468\2\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\6\42\1\u0469\11\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\12\42\1\u046a"+
    "\5\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\u046b\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\20\313\1\104\1\u046c\15\313\13\0\2\313"+
    "\12\0\2\42\1\u046d\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\15\313\1\u046e\2\313"+
    "\1\104\16\313\13\0\2\313\12\0\12\42\1\u046f\5\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\12\42"+
    "\1\u0470\5\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\1\u0471\17\313\1\104\16\313\13\0"+
    "\2\313\12\0\20\42\1\104\1\u0472\5\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u0473\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\1\u0474\5\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\104\6\42"+
    "\3\0\2\42\1\u0475\2\42\14\0\1\42\12\0\20\42"+
    "\1\u0476\6\42\3\0\5\42\14\0\1\42\12\0\6\42"+
    "\1\u0477\11\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\12\42\1\u0478\5\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\10\42\1\u0479\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\11\42\1\u047a\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u047b\15\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\5\42\1\u047c\12\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\15\42\1\u047d\2\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\11\42\1\u047e\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u047f\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u0480\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\104\3\42\1\u0481\2\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u0482\13\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\4\42"+
    "\1\u0483\13\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\10\313\1\u0484\7\313\1\104\16\313"+
    "\13\0\2\313\12\0\2\42\1\u0485\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\4\313"+
    "\1\u0486\13\313\1\104\16\313\13\0\2\313\12\0\5\42"+
    "\1\u0487\12\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u0488\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\5\42\1\u0489\12\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\14\42\1\u048a\3\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\1\u048b\5\42\3\0\5\42\14\0\1\42\12\0"+
    "\10\42\1\u048c\7\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\4\42\1\u048d\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\1\42\1\u048e\16\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\4\42\1\u048f\1\42\3\0\5\42\14\0\1\42\12\0"+
    "\2\42\1\u0490\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\15\313\1\u0491\2\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\3\313\1\u0492"+
    "\14\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\15\313\1\u0493\2\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\13\313\1\u0494\4\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\14\313\1\u0495\3\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\14\313\1\u0496"+
    "\3\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\11\313\1\u0497\6\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\4\313\1\u0498\13\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\2\313\1\u0499\15\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\11\313\1\u049a"+
    "\6\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\6\313\1\u049b\11\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\2\313\1\u049c\15\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\20\313\1\104\2\313\1\u049d"+
    "\13\313\13\0\2\313\5\0\1\313\4\0\14\313\1\u049e"+
    "\3\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\3\313\1\u049f\14\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\4\313\1\u04a0\13\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\4\313\1\u04a1\13\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\4\313\1\u04a2"+
    "\13\313\1\104\16\313\13\0\2\313\12\0\20\42\1\104"+
    "\3\42\1\u04a3\2\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\1\u04a4\5\42\3\0\5\42\14\0\1\42"+
    "\12\0\15\42\1\u04a5\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\6\313\1\u04a6\11\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\20\313"+
    "\1\104\2\313\1\u04a7\13\313\13\0\2\313\12\0\12\42"+
    "\1\u04a8\5\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\14\42\1\u04a9\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\20\42\1\u04aa\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u04ab\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u04ac\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\12\42"+
    "\1\u04ad\5\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u04ae\10\42\1\u04af\2\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\12\42\1\u04b0\5\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\4\42\1\u04b1\1\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u04b2\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u04b3\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\20\42\1\u04b4\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u04b5\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u04b6\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\u04b7\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\6\42\1\u04b8\11\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\14\313\1\u04b9\3\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\1\313"+
    "\1\u04ba\16\313\1\104\16\313\13\0\2\313\12\0\4\42"+
    "\1\u04bb\13\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\20\313\1\104\2\313\1\u04bc\13\313"+
    "\13\0\2\313\12\0\10\42\1\u04bd\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\1\42\1\u04be\16\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\20\313\1\104\3\313\1\u04bf\12\313\13\0\2\313"+
    "\5\0\1\313\4\0\11\313\1\u04c0\6\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\20\313\1\104\1\313"+
    "\1\u04c1\14\313\13\0\2\313\12\0\20\42\1\u04c2\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\4\42\1\u04c3\13\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u04c4\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\u04c5\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\4\42\1\u04c6\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u04c7\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u04c8\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\20\313\1\104\1\u04c9\15\313\13\0"+
    "\2\313\5\0\1\313\4\0\20\313\1\104\2\313\1\u04ca"+
    "\13\313\13\0\2\313\5\0\1\313\4\0\1\u04cb\17\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\4\313"+
    "\1\u04cc\13\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\11\313\1\u04cd\6\313\1\104\16\313\13\0\2\313"+
    "\12\0\10\42\1\u04ce\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\4\42\1\u04cf\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u04d0\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\u04d1\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u04d2\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\20\313\1\104\2\313\1\u04d3\13\313"+
    "\13\0\2\313\12\0\1\u04d4\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u04d5\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u04d6"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u04d7\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\4\313\1\u04d8\13\313\1\104"+
    "\16\313\13\0\2\313\12\0\2\42\1\u04d9\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\5\0\1\313\4\0"+
    "\10\313\1\u04da\7\313\1\104\16\313\13\0\2\313\12\0"+
    "\20\42\1\104\2\42\1\u04db\3\42\3\0\5\42\14\0"+
    "\1\42\12\0\10\42\1\u04dc\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u04dd\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u04de"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\6\42\1\u04df\11\42\1\u04e0\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\42\1\u04e1\16\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\2\42\1\u04e2\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\2\42\1\u04e3"+
    "\15\42\1\104\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\1\313\1\u04e4\16\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\20\313\1\104\2\313\1\u04e5"+
    "\13\313\13\0\2\313\5\0\1\313\4\0\20\313\1\104"+
    "\2\313\1\u04e6\13\313\13\0\2\313\12\0\16\42\1\u04e7"+
    "\1\42\1\104\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\15\313\1\u04e8\2\313\1\104\16\313\13\0"+
    "\2\313\12\0\20\42\1\104\2\42\1\u04e9\3\42\3\0"+
    "\5\42\14\0\1\42\12\0\15\42\1\u04ea\2\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\20\42\1\104"+
    "\1\42\1\u04eb\4\42\3\0\5\42\14\0\1\42\12\0"+
    "\1\u04ec\17\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\1\313\1\u04ed\16\313\1\104\16\313"+
    "\13\0\2\313\12\0\20\42\1\u04ee\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\12\42\1\u04ef\5\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u04f0\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\2\42"+
    "\1\u04f1\15\42\1\104\4\42\1\u04f2\1\42\3\0\5\42"+
    "\14\0\1\42\12\0\2\42\1\u04f3\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\12\42\1\u04f4\5\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\12\42"+
    "\1\u04f5\5\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\2\42\1\u04f6\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\11\42\1\u04f7\6\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\2\42\1\u04f8\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\11\313\1\u04f9\6\313\1\104\16\313\13\0\2\313"+
    "\12\0\14\42\1\u04fa\3\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\1\u04fb\17\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u04fc\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\12\42\1\u04fd"+
    "\5\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\11\42\1\u04fe\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\1\u04ff\17\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\20\313\1\104\2\313"+
    "\1\u0500\13\313\13\0\2\313\5\0\1\313\4\0\20\313"+
    "\1\104\2\313\1\u0501\13\313\13\0\2\313\5\0\1\313"+
    "\4\0\20\313\1\104\1\u0502\15\313\13\0\2\313\5\0"+
    "\1\313\4\0\1\313\1\u0503\16\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\4\313\1\u0504\13\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\10\313\1\u0505"+
    "\7\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\14\313\1\u0506\3\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\4\313\1\u0507\13\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\6\313\1\u0508\11\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\11\313\1\u0509"+
    "\6\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\14\313\1\u050a\3\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\11\313\1\u050b\6\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\1\u050c\17\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\2\313\1\u050d\15\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\14\313"+
    "\1\u050e\3\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\11\313\1\u050f\6\313\1\104\16\313\13\0\2\313"+
    "\12\0\2\42\1\u0510\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\10\42\1\u0511\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\2\313"+
    "\1\u0512\15\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\10\313\1\u0513\7\313\1\104\16\313\13\0\2\313"+
    "\12\0\2\42\1\u0514\15\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\11\313\1\u0515\6\313"+
    "\1\104\16\313\13\0\2\313\12\0\2\42\1\u0516\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\15\313\1\u0517\2\313\1\104\16\313\13\0\2\313"+
    "\12\0\1\u0518\17\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\10\313\1\u0519\7\313\1\104"+
    "\16\313\13\0\2\313\12\0\20\42\1\u051a\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\12\313\1\u051b"+
    "\5\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\20\313\1\104\1\u051c\15\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u051d\15\313\1\104\16\313\13\0\2\313"+
    "\12\0\11\42\1\u051e\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\3\313\1\u051f\14\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\4\313"+
    "\1\u0520\13\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u0521\15\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\3\313\1\u0522\14\313\1\104\16\313"+
    "\13\0\2\313\12\0\11\42\1\u0523\6\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\12\42\1\u0524\5\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u0525\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\11\42\1\u0526\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\6\42\1\u0527\5\42\1\u0528\3\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\12\42"+
    "\1\u0529\5\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\10\313\1\u052a\7\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\17\313\1\u052b\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\20\313\1\104"+
    "\3\313\1\u052c\12\313\13\0\2\313\5\0\1\313\4\0"+
    "\2\313\1\u052d\15\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\10\313\1\u052e\7\313\1\104\16\313\13\0"+
    "\2\313\12\0\2\42\1\u052f\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\2\313\1\u0530"+
    "\15\313\1\104\16\313\13\0\2\313\12\0\1\42\1\u0531"+
    "\16\42\1\104\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\4\313\1\u0532\13\313\1\104\16\313\13\0"+
    "\2\313\12\0\4\42\1\u0533\13\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\20\42\1\104\6\42\3\0"+
    "\2\42\1\u0534\2\42\14\0\1\42\5\0\1\313\4\0"+
    "\14\313\1\u0535\3\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\4\313\1\u0536\13\313\1\104\16\313\13\0"+
    "\2\313\12\0\10\42\1\u0537\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\12\42\1\u0538\5\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\12\42\1\u0539"+
    "\5\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\5\42\1\u053a\12\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\7\313\1\u053b\10\313\1\104"+
    "\16\313\13\0\2\313\12\0\2\42\1\u053c\15\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\14\42\1\u053d"+
    "\3\42\1\104\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\20\313\1\104\1\u053e\15\313\13\0\2\313"+
    "\5\0\1\313\4\0\10\313\1\u053f\7\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\2\313\1\u0540\15\313"+
    "\1\104\16\313\13\0\2\313\12\0\4\42\1\u0541\13\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\20\313\1\104\2\313\1\u0542\13\313\13\0\2\313"+
    "\12\0\10\42\1\u0543\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\4\42\1\u0544\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\20\313"+
    "\1\104\1\u0545\15\313\13\0\2\313\5\0\1\313\4\0"+
    "\5\313\1\u0546\12\313\1\104\16\313\13\0\2\313\12\0"+
    "\2\42\1\u0547\15\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\6\42\1\u0548\11\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\14\42\1\u0549\3\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\42\1\u054a"+
    "\16\42\1\104\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\4\313\1\u054b\13\313\1\104\16\313\13\0"+
    "\2\313\12\0\5\42\1\u054c\12\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\12\0\4\42\1\u054d\13\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\6\42\1\u054e"+
    "\11\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\1\u054f\5\42\3\0\5\42\14\0\1\42"+
    "\12\0\4\42\1\u0550\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\4\313\1\u0551\13\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\1\u0552"+
    "\17\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\14\313\1\u0553\3\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\16\313\1\u0554\1\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\12\313\1\u0555\5\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\1\u0556\17\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\2\313"+
    "\1\u0557\15\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u0558\15\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\7\313\1\u0559\10\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\10\313\1\u055a\7\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\4\313"+
    "\1\u055b\13\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\12\313\1\u055c\5\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\11\313\1\u055d\6\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\3\313\1\u055e\14\313"+
    "\1\104\16\313\13\0\2\313\12\0\10\42\1\u055f\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\1\313\1\u0560\16\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\4\313\1\u0561\13\313\1\104\16\313"+
    "\13\0\2\313\12\0\5\42\1\u0562\12\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\6\313"+
    "\1\u0563\11\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\11\313\1\u0564\6\313\1\104\16\313\13\0\2\313"+
    "\12\0\15\42\1\u0565\2\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\1\u0566\17\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\20\313\1\104"+
    "\6\313\1\u0567\1\u0568\6\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u0569\15\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\20\313\1\104\3\313\1\u056a\12\313"+
    "\13\0\2\313\5\0\1\313\4\0\20\313\1\u056b\16\313"+
    "\13\0\2\313\12\0\20\42\1\104\6\42\3\0\2\42"+
    "\1\u056c\2\42\14\0\1\42\5\0\1\313\4\0\11\313"+
    "\1\u056d\6\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\4\313\1\u056e\13\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\2\313\1\u056f\15\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\20\313\1\104\1\u0570"+
    "\15\313\13\0\2\313\12\0\7\42\1\u0571\10\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\12\42\1\u0572"+
    "\5\42\1\104\6\42\3\0\5\42\14\0\1\42\12\0"+
    "\20\42\1\104\1\u0573\5\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\4\313\1\u0574\13\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\20\313\1\u0575\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\2\313\1\u0576\15\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\20\313"+
    "\1\104\3\313\1\u0577\12\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u0578\15\313\1\104\16\313\13\0\2\313"+
    "\12\0\5\42\1\u0579\12\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\6\313\1\u057a\11\313"+
    "\1\104\16\313\13\0\2\313\12\0\1\u057b\17\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\5\0\1\313\4\0"+
    "\3\313\1\u057c\14\313\1\104\16\313\13\0\2\313\12\0"+
    "\11\42\1\u057d\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\12\0\2\42\1\u057e\15\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\20\313\1\104"+
    "\1\u057f\15\313\13\0\2\313\5\0\1\313\4\0\14\313"+
    "\1\u0580\3\313\1\104\16\313\13\0\2\313\12\0\6\42"+
    "\1\u0581\11\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\11\313\1\u0582\6\313\1\104\16\313"+
    "\13\0\2\313\12\0\5\42\1\u0583\12\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\20\313"+
    "\1\104\2\313\1\u0584\13\313\13\0\2\313\5\0\1\313"+
    "\4\0\4\313\1\u0585\13\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\5\313\1\u0586\12\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\2\313\1\u0587\15\313"+
    "\1\104\16\313\13\0\2\313\12\0\6\42\1\u0588\11\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u0589\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\20\313\1\104\3\313\1\u058a\12\313"+
    "\13\0\2\313\5\0\1\313\4\0\4\313\1\u058b\13\313"+
    "\1\104\16\313\13\0\2\313\12\0\11\42\1\u058c\6\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\u058d\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\5\313\1\u058e\12\313\1\104\16\313\13\0\2\313"+
    "\12\0\11\42\1\u058f\6\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\12\0\11\42\1\u0590\6\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\10\42\1\u0591\7\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\11\42"+
    "\1\u0592\6\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\2\313\1\u0593\15\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\4\313\1\u0594\13\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\20\313"+
    "\1\104\3\313\1\u0595\12\313\13\0\2\313\5\0\1\313"+
    "\4\0\1\313\1\u0596\16\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\2\313\1\u0597\15\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\2\313\1\u0598\15\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\2\313"+
    "\1\u0599\15\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\10\313\1\u059a\7\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\15\313\1\u059b\2\313\1\104\16\313"+
    "\13\0\2\313\12\0\4\42\1\u059c\13\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\11\313"+
    "\1\u059d\6\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u059e\15\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\20\313\1\104\3\313\1\u059f\12\313"+
    "\13\0\2\313\5\0\1\313\4\0\20\313\1\104\3\313"+
    "\1\u05a0\12\313\13\0\2\313\5\0\1\313\4\0\3\313"+
    "\1\u05a1\14\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\20\313\1\104\6\313\1\u05a2\1\u05a3\1\u05a4\5\313"+
    "\13\0\2\313\12\0\2\42\1\u05a5\15\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\5\0\1\313\4\0\15\313"+
    "\1\u05a6\2\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u05a7\15\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\20\313\1\104\5\313\1\u05a8\10\313"+
    "\13\0\2\313\5\0\1\313\4\0\11\313\1\u05a9\6\313"+
    "\1\104\16\313\13\0\2\313\12\0\2\42\1\u05aa\15\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\10\42"+
    "\1\u05ab\7\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\2\313\1\u05ac\15\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\20\313\1\104\6\313"+
    "\1\u05ad\1\u05ae\1\u05af\5\313\13\0\2\313\5\0\1\313"+
    "\4\0\11\313\1\u05b0\6\313\1\104\16\313\13\0\2\313"+
    "\12\0\4\42\1\u05b1\13\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\20\313\1\104\2\313"+
    "\1\u05b2\13\313\13\0\2\313\12\0\20\42\1\104\1\u05b3"+
    "\5\42\3\0\5\42\14\0\1\42\5\0\1\313\4\0"+
    "\15\313\1\u05b4\2\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\20\313\1\104\1\u05b5\15\313\13\0\2\313"+
    "\12\0\20\42\1\u05b6\6\42\3\0\5\42\14\0\1\42"+
    "\5\0\1\313\4\0\6\313\1\u05b7\11\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\10\313\1\u05b8\7\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\2\313"+
    "\1\u05b9\15\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\5\313\1\u05ba\12\313\1\104\16\313\13\0\2\313"+
    "\12\0\20\42\1\u05bb\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\20\42\1\104\1\u05bc\5\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\3\313\1\u05bd\14\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\20\313\1\104"+
    "\1\u05be\15\313\13\0\2\313\12\0\1\42\1\u05bf\16\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\5\0\1\313"+
    "\4\0\15\313\1\u05c0\2\313\1\104\2\313\1\u05c1\13\313"+
    "\13\0\2\313\12\0\20\42\1\104\1\u05c2\5\42\3\0"+
    "\5\42\14\0\1\42\12\0\10\42\1\u05c3\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\12\0\1\u05c4\17\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\20\42"+
    "\1\104\1\u05c5\5\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\2\313\1\u05c6\15\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\4\313\1\u05c7\13\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\12\313\1\u05c8"+
    "\5\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\20\313\1\104\4\313\1\u05c9\11\313\13\0\2\313\5\0"+
    "\1\313\4\0\20\313\1\104\3\313\1\u05ca\12\313\13\0"+
    "\2\313\5\0\1\313\4\0\14\313\1\u05cb\3\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\11\313\1\u05cc"+
    "\6\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\2\313\1\u05cd\15\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\20\313\1\104\2\313\1\u05ce\13\313\13\0"+
    "\2\313\12\0\6\42\1\u05cf\11\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\2\313\1\u05d0"+
    "\15\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\10\313\1\u05d1\7\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\10\313\1\u05d2\7\313\1\104\16\313\13\0"+
    "\2\313\12\0\5\42\1\u05d3\12\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\10\313\1\u05d4"+
    "\7\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\4\313\1\u05d5\13\313\1\104\16\313\13\0\2\313\12\0"+
    "\11\42\1\u05d6\6\42\1\104\6\42\3\0\5\42\14\0"+
    "\1\42\5\0\1\313\4\0\4\313\1\u05d7\13\313\1\104"+
    "\16\313\13\0\2\313\12\0\10\42\1\u05d8\7\42\1\104"+
    "\6\42\3\0\5\42\14\0\1\42\5\0\1\313\4\0"+
    "\15\313\1\u05d9\2\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\1\313\1\u05da\16\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\2\313\1\u05db\15\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\4\313\1\u05dc"+
    "\13\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\14\313\1\u05dd\3\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\1\313\1\u05de\16\313\1\104\16\313\13\0"+
    "\2\313\12\0\10\42\1\u05df\7\42\1\104\6\42\3\0"+
    "\5\42\14\0\1\42\5\0\1\313\4\0\20\313\1\104"+
    "\2\313\1\u05e0\13\313\13\0\2\313\5\0\1\313\4\0"+
    "\14\313\1\u05e1\3\313\1\104\16\313\13\0\2\313\12\0"+
    "\20\42\1\u05e2\6\42\3\0\5\42\14\0\1\42\5\0"+
    "\1\313\4\0\20\313\1\104\1\u05e3\15\313\13\0\2\313"+
    "\5\0\1\313\4\0\3\313\1\u05e4\14\313\1\104\16\313"+
    "\13\0\2\313\12\0\10\42\1\u05e5\7\42\1\104\6\42"+
    "\3\0\5\42\14\0\1\42\12\0\12\42\1\u05e6\5\42"+
    "\1\104\6\42\3\0\5\42\14\0\1\42\12\0\15\42"+
    "\1\u05e7\2\42\1\104\6\42\3\0\5\42\14\0\1\42"+
    "\12\0\10\42\1\u05e8\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\1\u05e9\17\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\4\313\1\u05ea"+
    "\13\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\5\313\1\u05eb\12\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\4\313\1\u05ec\13\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\6\313\1\u05ed\11\313\1\104"+
    "\16\313\13\0\2\313\5\0\1\313\4\0\4\313\1\u05ee"+
    "\13\313\1\104\16\313\13\0\2\313\5\0\1\313\4\0"+
    "\4\313\1\u05ef\13\313\1\104\16\313\13\0\2\313\5\0"+
    "\1\313\4\0\2\313\1\u05f0\15\313\1\104\16\313\13\0"+
    "\2\313\12\0\20\42\1\104\1\u05f1\5\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\20\313\1\104\1\u05f2"+
    "\15\313\13\0\2\313\5\0\1\313\4\0\20\313\1\104"+
    "\1\u05f3\15\313\13\0\2\313\5\0\1\313\4\0\2\313"+
    "\1\u05f4\15\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\20\313\1\104\1\u05f5\15\313\13\0\2\313\5\0"+
    "\1\313\4\0\4\313\1\u05f6\13\313\1\104\16\313\13\0"+
    "\2\313\5\0\1\313\4\0\1\u05f7\17\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\2\313\1\u05f8\15\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\20\313"+
    "\1\104\1\313\1\u05f9\14\313\13\0\2\313\5\0\1\313"+
    "\4\0\3\313\1\u05fa\14\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\15\313\1\u05fb\2\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\2\313\1\u05fc\15\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\5\313"+
    "\1\u05fd\12\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\6\313\1\u05fe\11\313\1\104\16\313\13\0\2\313"+
    "\12\0\10\42\1\u05ff\7\42\1\104\6\42\3\0\5\42"+
    "\14\0\1\42\5\0\1\313\4\0\15\313\1\u0600\2\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\14\313"+
    "\1\u0601\3\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\15\313\1\u0602\2\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\2\313\1\u0603\15\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\12\313\1\u0604\5\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\6\313"+
    "\1\u0605\11\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u0606\15\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\2\313\1\u0607\15\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\14\313\1\u0608\3\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\20\313"+
    "\1\104\1\u0609\15\313\13\0\2\313\5\0\1\313\4\0"+
    "\20\313\1\104\1\u060a\15\313\13\0\2\313\5\0\1\313"+
    "\4\0\14\313\1\u060b\3\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\2\313\1\u060c\15\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\11\313\1\u060d\6\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\14\313"+
    "\1\u060e\3\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\14\313\1\u060f\3\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\14\313\1\u0610\3\313\1\104\16\313"+
    "\13\0\2\313\5\0\1\313\4\0\14\313\1\u0611\3\313"+
    "\1\104\16\313\13\0\2\313\5\0\1\313\4\0\4\313"+
    "\1\u0612\13\313\1\104\16\313\13\0\2\313\5\0\1\313"+
    "\4\0\2\313\1\u0613\15\313\1\104\16\313\13\0\2\313"+
    "\5\0\1\313\4\0\6\313\1\u0614\11\313\1\104\16\313"+
    "\13\0\2\313";

  private static int [] zzUnpackTrans() {
    int [] result = new int[66150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\3\11\2\1\1\11\34\1\7\11\4\1\2\11"+
    "\3\1\1\11\2\0\1\11\1\0\10\1\1\0\73\1"+
    "\1\0\66\1\2\11\3\0\1\11\316\1\1\0\40\1"+
    "\1\0\72\1\1\0\4\1\1\0\40\1\1\0\56\1"+
    "\1\0\73\1\1\0\51\1\1\0\35\1\1\0\6\1"+
    "\1\0\50\1\1\0\35\1\1\0\5\1\1\0\55\1"+
    "\1\0\125\1\1\0\15\1\1\0\144\1\1\0\6\1"+
    "\1\0\31\1\1\0\7\1\1\0\66\1\1\0\12\1"+
    "\1\0\63\1\1\0\11\1\1\0\2\1\1\0\12\1"+
    "\1\0\16\1\1\0\16\1\1\0\15\1\1\0\53\1"+
    "\1\0\120\1\1\0\11\1\1\0\27\1\1\0\50\1"+
    "\1\0\4\1\1\0\46\1\1\0\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1556];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  @SuppressWarnings("unused")
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	public static TablaSimbolos tablaSimbolosLexico = new TablaSimbolos();
	public static TablaSimbolos tablaSimbolos = new TablaSimbolos();
	FileWriter fw = null;
	PrintWriter pw = null;
	FileWriter fw2 = null;
	PrintWriter pw2 = null;
	FileWriter fw3 = null;
	PrintWriter pw3 = null;
	
	final int yyline() {
		return yyline + 1;
    }
    
    public void toString(String Token) {
		try {
				fw = new FileWriter("src/salidas/out.txt", true);
				pw = new PrintWriter(fw);
				pw.println(Token+ " | " +yytext());
				
				fw2 = new FileWriter("src/salidas/tabla_simbolos.txt",true);
				
				if(Token == "TOK_IDENTIFIER"){
					pw2 = new PrintWriter(fw2);
					pw2.println(Token+ " | " +yytext());
				}
		} catch (Exception e){
				e.printStackTrace();
		} finally {
			try {
				if (null != fw) {
					fw.close();
					fw2.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
    
    public void manejoErrores(String Error){
		try {
				fw3 = new FileWriter("src/salidas/errores_lex.txt", true);
				pw3 = new PrintWriter(fw3);
				pw3.println(Error);
				System.err.println(Error);
		} catch (Exception e){
				e.printStackTrace();
		} finally {
			try {
				if (null != fw) {
					fw3.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
	
	public void pictureString(){
		System.out.println("TOK_PIC_TEXT");
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 316: 
          { System.out.println("TOK_INITIALIZE");toString("TOK_INITIALIZE");return new Symbol(sym.TOK_INITIALIZE,yyline+1, yycolumn+1,yytext());
          }
        case 370: break;
        case 80: 
          { System.out.println("TOK_TAPE");toString("TOK_TAPE");return new Symbol(sym.TOK_TAPE,yyline+1, yycolumn+1,yytext());
          }
        case 371: break;
        case 50: 
          { System.out.println("TOK_AND");toString("TOK_AND");return new Symbol(sym.TOK_AND,yyline+1, yycolumn+1,yytext());
          }
        case 372: break;
        case 329: 
          { System.out.println("TOK_DAY_OF_WEEK");toString("TOK_DAY_OF_WEEK");return new Symbol(sym.TOK_DAY_OF_WEEK,yyline+1, yycolumn+1,yytext());
          }
        case 373: break;
        case 202: 
          { System.out.println("TOK_CONSOLE");toString("TOK_CONSOLE");return new Symbol(sym.TOK_CONSOLE,yyline+1, yycolumn+1,yytext());
          }
        case 374: break;
        case 338: 
          { System.out.println("TOK_END_UNSTRING");toString("TOK_END_UNSTRING");return new Symbol(sym.TOK_END_UNSTRING,yyline+1, yycolumn+1,yytext());
          }
        case 375: break;
        case 172: 
          { System.out.println("TOK_SCREEN");toString("TOK_SCREEN");return new Symbol(sym.TOK_SCREEN,yyline+1, yycolumn+1,yytext());
          }
        case 376: break;
        case 332: 
          { System.out.println("TOK_DEBUG_SUB_2");toString("TOK_DEBUG_SUB_2");return new Symbol(sym.TOK_DEBUG_SUB_2,yyline+1, yycolumn+1,yytext());
          }
        case 377: break;
        case 118: 
          { System.out.println("TOK_AFTER");toString("TOK_AFTER");return new Symbol(sym.TOK_AFTER,yyline+1, yycolumn+1,yytext());
          }
        case 378: break;
        case 185: 
          { System.out.println("TOK_FILLER");toString("TOK_FILLER");return new Symbol(sym.TOK_FILLER,yyline+1, yycolumn+1,yytext());
          }
        case 379: break;
        case 54: 
          { System.out.println("TOK_ESI");toString("TOK_ESI");return new Symbol(sym.TOK_ESI,yyline+1, yycolumn+1,yytext());
          }
        case 380: break;
        case 6: 
          { System.out.println("TOK_PERIOD");toString("TOK_PERIOD");return new Symbol(sym.TOK_PERIOD,yyline+1, yycolumn+1,yytext());
          }
        case 381: break;
        case 226: 
          { System.out.println("TOK_REPLACE");toString("TOK_REPLACE");return new Symbol(sym.TOK_REPLACE,yyline+1, yycolumn+1,yytext());
          }
        case 382: break;
        case 320: 
          { System.out.println("TOK_END_COMPUTE");toString("TOK_END_COMPUTE");return new Symbol(sym.TOK_END_COMPUTE,yyline+1, yycolumn+1,yytext());
          }
        case 383: break;
        case 258: 
          { System.out.println("TOK_SENTENCE");toString("TOK_SENTENCE");return new Symbol(sym.TOK_SENTENCE,yyline+1, yycolumn+1,yytext());
          }
        case 384: break;
        case 60: 
          { System.out.println("TOK_TOP");toString("TOK_TOP");return new Symbol(sym.TOK_TOP,yyline+1, yycolumn+1,yytext());
          }
        case 385: break;
        case 111: 
          { System.out.println("TOK_WHEN");toString("TOK_WHEN");return new Symbol(sym.TOK_WHEN,yyline+1, yycolumn+1,yytext());
          }
        case 386: break;
        case 77: 
          { System.out.println("TOK_ELSE");toString("TOK_ELSE");return new Symbol(sym.TOK_ELSE,yyline+1, yycolumn+1,yytext());
          }
        case 387: break;
        case 76: 
          { System.out.println("TOK_COMP");toString("TOK_COMP");return new Symbol(sym.TOK_COMP,yyline+1, yycolumn+1,yytext());
          }
        case 388: break;
        case 8: 
          { System.out.println("TOK_MINUS");toString("TOK_MINUS");return new Symbol(sym.TOK_MINUS,yyline+1, yycolumn+1,yytext());
          }
        case 389: break;
        case 28: 
          { System.out.println("TOK_PH");toString("TOK_PH");return new Symbol(sym.TOK_PH,yyline+1, yycolumn+1,yytext());
          }
        case 390: break;
        case 25: 
          { System.out.println("TOK_CF");toString("TOK_CF");return new Symbol(sym.TOK_CF,yyline+1, yycolumn+1,yytext());
          }
        case 391: break;
        case 61: 
          { System.out.println("TOK_SET");toString("TOK_SET");return new Symbol(sym.TOK_SET,yyline+1, yycolumn+1,yytext());
          }
        case 392: break;
        case 342: 
          { System.out.println("TOK_DECLARATIVES");toString("TOK_DECLARATIVES");return new Symbol(sym.TOK_DECLARATIVES,yyline+1, yycolumn+1,yytext());
          }
        case 393: break;
        case 275: 
          { System.out.println("TOK_ASCENDING");toString("TOK_ASCENDING");return new Symbol(sym.TOK_ASCENDING,yyline+1, yycolumn+1,yytext());
          }
        case 394: break;
        case 7: 
          { System.out.println("TOK_IDENTIFIER"); toString("TOK_IDENTIFIER");tablaSimbolosLexico.add(yytext(), "TOK_IDENTIFIER"); return new Symbol(sym.TOK_IDENTIFIER,yyline+1, yycolumn+1,yytext());
          }
        case 395: break;
        case 291: 
          { System.out.println("TOK_REDEFINES");toString("TOK_REDEFINES");return new Symbol(sym.TOK_REDEFINES,yyline+1, yycolumn+1,yytext());
          }
        case 396: break;
        case 52: 
          { System.out.println("TOK_ARE");toString("TOK_ARE");return new Symbol(sym.TOK_ARE,yyline+1, yycolumn+1,yytext());
          }
        case 397: break;
        case 346: 
          { System.out.println("TOK_LINE_COUNTER");toString("TOK_LINE_COUNTER");return new Symbol(sym.TOK_LINE_COUNTER,yyline+1, yycolumn+1,yytext());
          }
        case 398: break;
        case 71: 
          { System.out.println("TOK_AREA");toString("TOK_AREA");return new Symbol(sym.TOK_AREA,yyline+1, yycolumn+1,yytext());
          }
        case 399: break;
        case 113: 
          { System.out.println("TOK_UNIT");toString("TOK_UNIT");return new Symbol(sym.TOK_UNIT,yyline+1, yycolumn+1,yytext());
          }
        case 400: break;
        case 94: 
          { System.out.println("TOK_SORT");toString("TOK_SORT");return new Symbol(sym.TOK_SORT,yyline+1, yycolumn+1,yytext());
          }
        case 401: break;
        case 13: 
          { System.out.println("TOK_SEMICOLON");toString("TOK_SEMICOLON");return new Symbol(sym.TOK_SEMICOLON,yyline+1, yycolumn+1,yytext());
          }
        case 402: break;
        case 138: 
          { System.out.println("TOK_GROUP");toString("TOK_GROUP");return new Symbol(sym.TOK_GROUP,yyline+1, yycolumn+1,yytext());
          }
        case 403: break;
        case 345: 
          { System.out.println("TOK_FILE_CONTROL");toString("TOK_FILE_CONTROL");return new Symbol(sym.TOK_FILE_CONTROL,yyline+1, yycolumn+1,yytext());
          }
        case 404: break;
        case 212: 
          { System.out.println("TOK_SEGMENT");toString("TOK_SEGMENT");return new Symbol(sym.TOK_SEGMENT,yyline+1, yycolumn+1,yytext());
          }
        case 405: break;
        case 136: 
          { System.out.println("TOK_INPUT");toString("TOK_INPUT");return new Symbol(sym.TOK_INPUT,yyline+1, yycolumn+1,yytext());
          }
        case 406: break;
        case 221: 
          { System.out.println("TOK_INVALID");toString("TOK_INVALID");return new Symbol(sym.TOK_INVALID,yyline+1, yycolumn+1,yytext());
          }
        case 407: break;
        case 336: 
          { System.out.println("TOK_END_EVALUATE");toString("TOK_END_EVALUATE");return new Symbol(sym.TOK_END_EVALUATE,yyline+1, yycolumn+1,yytext());
          }
        case 408: break;
        case 200: 
          { System.out.println("TOK_CONTENT");toString("TOK_CONTENT");return new Symbol(sym.TOK_CONTENT,yyline+1, yycolumn+1,yytext());
          }
        case 409: break;
        case 132: 
          { System.out.println("TOK_SPACE");toString("TOK_SPACE");return new Symbol(sym.TOK_SPACE,yyline+1, yycolumn+1,yytext());
          }
        case 410: break;
        case 85: 
          { System.out.println("TOK_THAN");toString("TOK_THAN");return new Symbol(sym.TOK_THAN,yyline+1, yycolumn+1,yytext());
          }
        case 411: break;
        case 3: 
          { System.out.println("TOK_ASTERISK");toString("TOK_ASTERISK");return new Symbol(sym.TOK_ASTERISK,yyline+1, yycolumn+1,yytext());
          }
        case 412: break;
        case 66: 
          { System.out.println("TOK_FOR");toString("TOK_FOR");return new Symbol(sym.TOK_FOR,yyline+1, yycolumn+1,yytext());
          }
        case 413: break;
        case 206: 
          { System.out.println("TOK_PERFORM");toString("TOK_PERFORM");return new Symbol(sym.TOK_PERFORM,yyline+1, yycolumn+1,yytext());
          }
        case 414: break;
        case 337: 
          { System.out.println("TOK_END_SUBTRACT");toString("TOK_END_SUBTRACT");return new Symbol(sym.TOK_END_SUBTRACT,yyline+1, yycolumn+1,yytext());
          }
        case 415: break;
        case 47: 
          { System.out.println("TOK_LESS_EQ");toString("TOK_LESS_EQ");return new Symbol(sym.TOK_LESS_EQ,yyline+1, yycolumn+1,yytext());
          }
        case 416: break;
        case 167: 
          { System.out.println("TOK_COLUMN");toString("TOK_COLUMN");return new Symbol(sym.TOK_COLUMN,yyline+1, yycolumn+1,yytext());
          }
        case 417: break;
        case 73: 
          { System.out.println("TOK_CALL");toString("TOK_CALL");return new Symbol(sym.TOK_CALL,yyline+1, yycolumn+1,yytext());
          }
        case 418: break;
        case 311: 
          { System.out.println("TOK_DESCENDING");toString("TOK_DESCENDING");return new Symbol(sym.TOK_DESCENDING,yyline+1, yycolumn+1,yytext());
          }
        case 419: break;
        case 235: 
          { System.out.println("TOK_LINKAGE");toString("TOK_LINKAGE");return new Symbol(sym.TOK_LINKAGE,yyline+1, yycolumn+1,yytext());
          }
        case 420: break;
        case 306: 
          { System.out.println("TOK_PROGRAM_ID");toString("TOK_PROGRAM_ID");return new Symbol(sym.TOK_PROGRAM_ID,yyline+1, yycolumn+1,yytext());
          }
        case 421: break;
        case 267: 
          { System.out.println("TOK_GENERATE");toString("TOK_GENERATE");return new Symbol(sym.TOK_GENERATE,yyline+1, yycolumn+1,yytext());
          }
        case 422: break;
        case 318: 
          { System.out.println("TOK_HIGH_VALUE");toString("TOK_HIGH_VALUE");return new Symbol(sym.TOK_HIGH_VALUE,yyline+1, yycolumn+1,yytext());
          }
        case 423: break;
        case 161: 
          { System.out.println("TOK_QUOTE");toString("TOK_QUOTE");return new Symbol(sym.TOK_QUOTE,yyline+1, yycolumn+1,yytext());
          }
        case 424: break;
        case 278: 
          { System.out.println("TOK_CHARACTER");toString("TOK_CHARACTER");return new Symbol(sym.TOK_CHARACTER,yyline+1, yycolumn+1,yytext());
          }
        case 425: break;
        case 75: 
          { System.out.println("TOK_CORR");toString("TOK_CORR");return new Symbol(sym.TOK_CORR,yyline+1, yycolumn+1,yytext());
          }
        case 426: break;
        case 254: 
          { System.out.println("TOK_TERMINAL");toString("TOK_TERMINAL");return new Symbol(sym.TOK_TERMINAL,yyline+1, yycolumn+1,yytext());
          }
        case 427: break;
        case 29: 
          { System.out.println("TOK_TO");toString("TOK_TO");return new Symbol(sym.TOK_TO,yyline+1, yycolumn+1,yytext());
          }
        case 428: break;
        case 152: 
          { System.out.println("TOK_ORDER");toString("TOK_ORDER");return new Symbol(sym.TOK_ORDER,yyline+1, yycolumn+1,yytext());
          }
        case 429: break;
        case 38: 
          { System.out.println("TOK_RD");toString("TOK_RD");return new Symbol(sym.TOK_RD,yyline+1, yycolumn+1,yytext());
          }
        case 430: break;
        case 84: 
          { System.out.println("TOK_TRUE");toString("TOK_TRUE");return new Symbol(sym.TOK_TRUE,yyline+1, yycolumn+1,yytext());
          }
        case 431: break;
        case 20: 
          { System.out.println("TOK_PIC_TEXT");
    	toString("TOK_PIC_TEXT");
    	yybegin(YYINITIAL);
    	return new Symbol(sym.TOK_PIC_TEXT,yyline+1, yycolumn+1,yytext());
          }
        case 432: break;
        case 361: 
          { System.out.println("TOK_LINAGE_COUNTER");toString("TOK_LINAGE_COUNTER");return new Symbol(sym.TOK_LINAGE_COUNTER,yyline+1, yycolumn+1,yytext());
          }
        case 433: break;
        case 40: 
          { System.out.println("TOK_RH");toString("TOK_RH");return new Symbol(sym.TOK_RH,yyline+1, yycolumn+1,yytext());
          }
        case 434: break;
        case 265: 
          { System.out.println("TOK_INDICATE");toString("TOK_INDICATE");return new Symbol(sym.TOK_INDICATE,yyline+1, yycolumn+1,yytext());
          }
        case 435: break;
        case 255: 
          { System.out.println("TOK_TRAILING");toString("TOK_TRAILING");return new Symbol(sym.TOK_TRAILING,yyline+1, yycolumn+1,yytext());
          }
        case 436: break;
        case 356: 
          { System.out.println("TOK_REVERSE_VIDEO");toString("TOK_REVERSE_VIDEO");return new Symbol(sym.TOK_REVERSE_VIDEO,yyline+1, yycolumn+1,yytext());
          }
        case 437: break;
        case 164: 
          { System.out.println("TOK_ASSIGN");toString("TOK_ASSIGN");return new Symbol(sym.TOK_ASSIGN,yyline+1, yycolumn+1,yytext());
          }
        case 438: break;
        case 366: 
          { System.out.println("TOK_ALPHABETIC_UPPER");toString("TOK_ALPHABETIC_UPPER");return new Symbol(sym.TOK_ALPHABETIC_UPPER,yyline+1, yycolumn+1,yytext());
          }
        case 439: break;
        case 308: 
          { System.out.println("TOK_STANDARD_1");toString("TOK_STANDARD_1");return new Symbol(sym.TOK_STANDARD_1,yyline+1, yycolumn+1,yytext());
          }
        case 440: break;
        case 117: 
          { System.out.println("TOK_JUST");toString("TOK_JUST");return new Symbol(sym.TOK_JUST,yyline+1, yycolumn+1,yytext());
          }
        case 441: break;
        case 104: 
          { System.out.println("TOK_REEL");toString("TOK_REEL");return new Symbol(sym.TOK_REEL,yyline+1, yycolumn+1,yytext());
          }
        case 442: break;
        case 228: 
          { System.out.println("TOK_RESERVE");toString("TOK_RESERVE");return new Symbol(sym.TOK_RESERVE,yyline+1, yycolumn+1,yytext());
          }
        case 443: break;
        case 98: 
          { System.out.println("TOK_DOWN");toString("TOK_DOWN");return new Symbol(sym.TOK_DOWN,yyline+1, yycolumn+1,yytext());
          }
        case 444: break;
        case 83: 
          { System.out.println("TOK_TIME");toString("TOK_TIME");return new Symbol(sym.TOK_TIME,yyline+1, yycolumn+1,yytext());
          }
        case 445: break;
        case 162: 
          { System.out.println("TOK_ACCEPT");toString("TOK_ACCEPT");return new Symbol(sym.TOK_ACCEPT,yyline+1, yycolumn+1,yytext());
          }
        case 446: break;
        case 79: 
          { System.out.println("TOK_PAGE");toString("TOK_PAGE");return new Symbol(sym.TOK_PAGE,yyline+1, yycolumn+1,yytext());
          }
        case 447: break;
        case 63: 
          { System.out.println("TOK_DAY");toString("TOK_DAY");return new Symbol(sym.TOK_DAY,yyline+1, yycolumn+1,yytext());
          }
        case 448: break;
        case 253: 
          { System.out.println("TOK_TALLYING");toString("TOK_TALLYING");return new Symbol(sym.TOK_TALLYING,yyline+1, yycolumn+1,yytext());
          }
        case 449: break;
        case 121: 
          { System.out.println("TOK_CLASS");toString("TOK_CLASS");return new Symbol(sym.TOK_CLASS,yyline+1, yycolumn+1,yytext());
          }
        case 450: break;
        case 355: 
          { System.out.println("TOK_DECIMAL_POINT");toString("TOK_DECIMAL_POINT");return new Symbol(sym.TOK_DECIMAL_POINT,yyline+1, yycolumn+1,yytext());
          }
        case 451: break;
        case 129: 
          { System.out.println("TOK_PURGE");toString("TOK_PURGE");return new Symbol(sym.TOK_PURGE,yyline+1, yycolumn+1,yytext());
          }
        case 452: break;
        case 14: 
          { System.out.println("TOK_LPAREN");toString("TOK_LPAREN");return new Symbol(sym.TOK_LPAREN,yyline+1, yycolumn+1,yytext());
          }
        case 453: break;
        case 105: 
          { System.out.println("TOK_LAST");toString("TOK_LAST");return new Symbol(sym.TOK_LAST,yyline+1, yycolumn+1,yytext());
          }
        case 454: break;
        case 272: 
          { System.out.println("TOK_UNSTRING");toString("TOK_UNSTRING");return new Symbol(sym.TOK_UNSTRING,yyline+1, yycolumn+1,yytext());
          }
        case 455: break;
        case 225: 
          { System.out.println("TOK_RECEIVE");toString("TOK_RECEIVE");return new Symbol(sym.TOK_RECEIVE,yyline+1, yycolumn+1,yytext());
          }
        case 456: break;
        case 260: 
          { System.out.println("TOK_STANDARD");toString("TOK_STANDARD");return new Symbol(sym.TOK_STANDARD,yyline+1, yycolumn+1,yytext());
          }
        case 457: break;
        case 91: 
          { System.out.println("TOK_STOP");toString("TOK_STOP");return new Symbol(sym.TOK_STOP,yyline+1, yycolumn+1,yytext());
          }
        case 458: break;
        case 103: 
          { System.out.println("TOK_READ");toString("TOK_READ");return new Symbol(sym.TOK_READ,yyline+1, yycolumn+1,yytext());
          }
        case 459: break;
        case 101: 
          { System.out.println("TOK_FILE");toString("TOK_FILE");return new Symbol(sym.TOK_FILE,yyline+1, yycolumn+1,yytext());
          }
        case 460: break;
        case 88: 
          { System.out.println("TOK_TYPE");toString("TOK_TYPE");return new Symbol(sym.TOK_TYPE,yyline+1, yycolumn+1,yytext());
          }
        case 461: break;
        case 196: 
          { System.out.println("TOK_BOTTOM");toString("TOK_BOTTOM");return new Symbol(sym.TOK_BOTTOM,yyline+1, yycolumn+1,yytext());
          }
        case 462: break;
        case 163: 
          { System.out.println("TOK_ACCESS");toString("TOK_ACCESS");return new Symbol(sym.TOK_ACCESS,yyline+1, yycolumn+1,yytext());
          }
        case 463: break;
        case 178: 
          { System.out.println("TOK_DETAIL");toString("TOK_DETAIL");return new Symbol(sym.TOK_DETAIL,yyline+1, yycolumn+1,yytext());
          }
        case 464: break;
        case 292: 
          { System.out.println("TOK_REFERENCE");toString("TOK_REFERENCE");return new Symbol(sym.TOK_REFERENCE,yyline+1, yycolumn+1,yytext());
          }
        case 465: break;
        case 211: 
          { System.out.println("TOK_SECTION");toString("TOK_SECTION");return new Symbol(sym.TOK_SECTION,yyline+1, yycolumn+1,yytext());
          }
        case 466: break;
        case 123: 
          { System.out.println("TOK_COBOL");toString("TOK_COBOL");return new Symbol(sym.TOK_COBOL,yyline+1, yycolumn+1,yytext());
          }
        case 467: break;
        case 12: 
          { System.out.println("TOK_COMMA");toString("TOK_COMMA");return new Symbol(sym.TOK_COMMA,yyline+1, yycolumn+1,yytext());
          }
        case 468: break;
        case 195: 
          { System.out.println("TOK_BINARY");toString("TOK_BINARY");return new Symbol(sym.TOK_BINARY,yyline+1, yycolumn+1,yytext());
          }
        case 469: break;
        case 298: 
          { System.out.println("TOK_ALPHABETIC");toString("TOK_ALPHABETIC");return new Symbol(sym.TOK_ALPHABETIC,yyline+1, yycolumn+1,yytext());
          }
        case 470: break;
        case 23: 
          { System.out.println("TOK_AT");toString("TOK_AT");return new Symbol(sym.TOK_AT,yyline+1, yycolumn+1,yytext());
          }
        case 471: break;
        case 133: 
          { System.out.println("TOK_START");toString("TOK_START");return new Symbol(sym.TOK_START,yyline+1, yycolumn+1,yytext());
          }
        case 472: break;
        case 240: 
          { System.out.println("TOK_ALPHABET");toString("TOK_ALPHABET");return new Symbol(sym.TOK_ALPHABET,yyline+1, yycolumn+1,yytext());
          }
        case 473: break;
        case 16: 
          { System.out.println("TOK_GREATER");toString("TOK_GREATER");return new Symbol(sym.TOK_GREATER,yyline+1, yycolumn+1,yytext());
          }
        case 474: break;
        case 151: 
          { System.out.println("TOK_OTHER");toString("TOK_OTHER");return new Symbol(sym.TOK_OTHER,yyline+1, yycolumn+1,yytext());
          }
        case 475: break;
        case 169: 
          { System.out.println("TOK_ENABLE");toString("TOK_ENABLE");return new Symbol(sym.TOK_ENABLE,yyline+1, yycolumn+1,yytext());
          }
        case 476: break;
        case 203: 
          { System.out.println("TOK_COMPUTE");toString("TOK_COMPUTE");return new Symbol(sym.TOK_COMPUTE,yyline+1, yycolumn+1,yytext());
          }
        case 477: break;
        case 180: 
          { System.out.println("TOK_DIVIDE");toString("TOK_DIVIDE");return new Symbol(sym.TOK_DIVIDE,yyline+1, yycolumn+1,yytext());
          }
        case 478: break;
        case 160: 
          { System.out.println("TOK_QUEUE");toString("TOK_QUEUE");return new Symbol(sym.TOK_QUEUE,yyline+1, yycolumn+1,yytext());
          }
        case 479: break;
        case 191: 
          { System.out.println("TOK_LENGTH");toString("TOK_LENGTH");return new Symbol(sym.TOK_LENGTH,yyline+1, yycolumn+1,yytext());
          }
        case 480: break;
        case 281: 
          { System.out.println("TOK_END_WRITE");toString("TOK_END_WRITE");return new Symbol(sym.TOK_END_WRITE,yyline+1, yycolumn+1,yytext());
          }
        case 481: break;
        case 72: 
          { System.out.println("TOK_ALSO");toString("TOK_ALSO");return new Symbol(sym.TOK_ALSO,yyline+1, yycolumn+1,yytext());
          }
        case 482: break;
        case 227: 
          { System.out.println("TOK_REPORTS");toString("TOK_REPORTS");return new Symbol(sym.TOK_REPORTS,yyline+1, yycolumn+1,yytext());
          }
        case 483: break;
        case 177: 
          { System.out.println("TOK_SOURCE");toString("TOK_SOURCE");return new Symbol(sym.TOK_SOURCE,yyline+1, yycolumn+1,yytext());
          }
        case 484: break;
        case 293: 
          { System.out.println("TOK_REMAINDER");toString("TOK_REMAINDER");return new Symbol(sym.TOK_REMAINDER,yyline+1, yycolumn+1,yytext());
          }
        case 485: break;
        case 100: 
          { System.out.println("TOK_INTO");toString("TOK_INTO");return new Symbol(sym.TOK_INTO,yyline+1, yycolumn+1,yytext());
          }
        case 486: break;
        case 184: 
          { System.out.println("TOK_GLOBAL");toString("TOK_GLOBAL");return new Symbol(sym.TOK_GLOBAL,yyline+1, yycolumn+1,yytext());
          }
        case 487: break;
        case 108: 
          { System.out.println("TOK_LOCK");toString("TOK_LOCK");return new Symbol(sym.TOK_LOCK,yyline+1, yycolumn+1,yytext());
          }
        case 488: break;
        case 149: 
          { System.out.println("TOK_BLINK");toString("TOK_BLINK");return new Symbol(sym.TOK_BLINK,yyline+1, yycolumn+1,yytext());
          }
        case 489: break;
        case 290: 
          { System.out.println("TOK_REPORTING");toString("TOK_REPORTING");return new Symbol(sym.TOK_REPORTING,yyline+1, yycolumn+1,yytext());
          }
        case 490: break;
        case 233: 
          { System.out.println("TOK_ROUNDED");toString("TOK_ROUNDED");return new Symbol(sym.TOK_ROUNDED,yyline+1, yycolumn+1,yytext());
          }
        case 491: break;
        case 158: 
          { System.out.println("TOK_UNTIL");toString("TOK_UNTIL");return new Symbol(sym.TOK_UNTIL,yyline+1, yycolumn+1,yytext());
          }
        case 492: break;
        case 301: 
          { System.out.println("TOK_END_STRING");toString("TOK_END_STRING");return new Symbol(sym.TOK_END_STRING,yyline+1, yycolumn+1,yytext());
          }
        case 493: break;
        case 241: 
          { System.out.println("TOK_CODE_SET");toString("TOK_CODE_SET");return new Symbol(sym.TOK_CODE_SET,yyline+1, yycolumn+1,yytext());
          }
        case 494: break;
        case 343: 
          { System.out.println("TOK_INPUT_OUTPUT");toString("TOK_INPUT_OUTPUT");return new Symbol(sym.TOK_INPUT_OUTPUT,yyline+1, yycolumn+1,yytext());
          }
        case 495: break;
        case 367: 
          { System.out.println("TOK_FOREGROUND_COLOR");toString("TOK_FOREGROUND_COLOR");return new Symbol(sym.TOK_FOREGROUND_COLOR,yyline+1, yycolumn+1,yytext());
          }
        case 496: break;
        case 234: 
          { System.out.println("TOK_LEADING");toString("TOK_LEADING");return new Symbol(sym.TOK_LEADING,yyline+1, yycolumn+1,yytext());
          }
        case 497: break;
        case 193: 
          { System.out.println("TOK_LIMITS");toString("TOK_LIMITS");return new Symbol(sym.TOK_LIMITS,yyline+1, yycolumn+1,yytext());
          }
        case 498: break;
        case 109: 
          { System.out.println("TOK_OPEN");toString("TOK_OPEN");return new Symbol(sym.TOK_OPEN,yyline+1, yycolumn+1,yytext());
          }
        case 499: break;
        case 64: 
          { System.out.println("TOK_NOT");toString("TOK_NOT");return new Symbol(sym.TOK_NOT,yyline+1, yycolumn+1,yytext());
          }
        case 500: break;
        case 285: 
          { System.out.println("TOK_DEPENDING");toString("TOK_DEPENDING");return new Symbol(sym.TOK_DEPENDING,yyline+1, yycolumn+1,yytext());
          }
        case 501: break;
        case 215: 
          { System.out.println("TOK_DISPLAY");toString("TOK_DISPLAY");return new Symbol(sym.TOK_DISPLAY,yyline+1, yycolumn+1,yytext());
          }
        case 502: break;
        case 30: 
          { System.out.println("TOK_SD");toString("TOK_SD");return new Symbol(sym.TOK_SD,yyline+1, yycolumn+1,yytext());
          }
        case 503: break;
        case 27: 
          { System.out.println("TOK_PF");toString("TOK_PF");return new Symbol(sym.TOK_PF,yyline+1, yycolumn+1,yytext());
          }
        case 504: break;
        case 174: 
          { System.out.println("TOK_SELECT");toString("TOK_SELECT");return new Symbol(sym.TOK_SELECT,yyline+1, yycolumn+1,yytext());
          }
        case 505: break;
        case 125: 
          { System.out.println("TOK_EVERY");toString("TOK_EVERY");return new Symbol(sym.TOK_EVERY,yyline+1, yycolumn+1,yytext());
          }
        case 506: break;
        case 24: 
          { System.out.println("TOK_CD");toString("TOK_CD");return new Symbol(sym.TOK_CD,yyline+1, yycolumn+1,yytext());
          }
        case 507: break;
        case 166: 
          { System.out.println("TOK_CANCEL");toString("TOK_CANCEL");return new Symbol(sym.TOK_CANCEL,yyline+1, yycolumn+1,yytext());
          }
        case 508: break;
        case 127: 
          { System.out.println("TOK_ERROR");toString("TOK_ERROR");return new Symbol(sym.TOK_ERROR,yyline+1, yycolumn+1,yytext());
          }
        case 509: break;
        case 224: 
          { System.out.println("TOK_FOOTING");toString("TOK_FOOTING");return new Symbol(sym.TOK_FOOTING,yyline+1, yycolumn+1,yytext());
          }
        case 510: break;
        case 181: 
          { System.out.println("TOK_NATIVE");toString("TOK_NATIVE");return new Symbol(sym.TOK_NATIVE,yyline+1, yycolumn+1,yytext());
          }
        case 511: break;
        case 153: 
          { System.out.println("TOK_WRITE");toString("TOK_WRITE");return new Symbol(sym.TOK_WRITE,yyline+1, yycolumn+1,yytext());
          }
        case 512: break;
        case 288: 
          { System.out.println("TOK_DEBUGGING");toString("TOK_DEBUGGING");return new Symbol(sym.TOK_DEBUGGING,yyline+1, yycolumn+1,yytext());
          }
        case 513: break;
        case 93: 
          { System.out.println("TOK_SIZE");toString("TOK_SIZE");return new Symbol(sym.TOK_SIZE,yyline+1, yycolumn+1,yytext());
          }
        case 514: break;
        case 26: 
          { System.out.println("TOK_CH");toString("TOK_CH");return new Symbol(sym.TOK_CH,yyline+1, yycolumn+1,yytext());
          }
        case 515: break;
        case 145: 
          { System.out.println("TOK_LABEL");toString("TOK_LABEL");return new Symbol(sym.TOK_LABEL,yyline+1, yycolumn+1,yytext());
          }
        case 516: break;
        case 216: 
          { System.out.println("TOK_DYNAMIC");toString("TOK_DYNAMIC");return new Symbol(sym.TOK_DYNAMIC,yyline+1, yycolumn+1,yytext());
          }
        case 517: break;
        case 262: 
          { System.out.println("TOK_SYMBOLIC");toString("TOK_SYMBOLIC");return new Symbol(sym.TOK_SYMBOLIC,yyline+1, yycolumn+1,yytext());
          }
        case 518: break;
        case 279: 
          { System.out.println("TOK_COLLATING");toString("TOK_COLLATING");return new Symbol(sym.TOK_COLLATING,yyline+1, yycolumn+1,yytext());
          }
        case 519: break;
        case 15: 
          { System.out.println("TOK_RPAREN");toString("TOK_RPAREN");return new Symbol(sym.TOK_RPAREN,yyline+1, yycolumn+1,yytext());
          }
        case 520: break;
        case 4: 
          { System.out.println("TOK_PLUS");toString("TOK_PLUS");return new Symbol(sym.TOK_PLUS,yyline+1, yycolumn+1,yytext());
          }
        case 521: break;
        case 187: 
          { System.out.println("TOK_RECORD");toString("TOK_RECORD");return new Symbol(sym.TOK_RECORD,yyline+1, yycolumn+1,yytext());
          }
        case 522: break;
        case 350: 
          { System.out.println("TOK_COMPUTATIONAL");toString("TOK_COMPUTATIONAL");return new Symbol(sym.TOK_COMPUTATIONAL,yyline+1, yycolumn+1,yytext());
          }
        case 523: break;
        case 114: 
          { System.out.println("TOK_MODE");toString("TOK_MODE");return new Symbol(sym.TOK_MODE,yyline+1, yycolumn+1,yytext());
          }
        case 524: break;
        case 140: 
          { System.out.println("TOK_FINAL");toString("TOK_FINAL");return new Symbol(sym.TOK_FINAL,yyline+1, yycolumn+1,yytext());
          }
        case 525: break;
        case 17: 
          { System.out.println("TOK_LESS");toString("TOK_LESS");return new Symbol(sym.TOK_LESS,yyline+1, yycolumn+1,yytext());
          }
        case 526: break;
        case 299: 
          { System.out.println("TOK_CHARACTERS");toString("TOK_CHARACTERS");return new Symbol(sym.TOK_CHARACTERS,yyline+1, yycolumn+1,yytext());
          }
        case 527: break;
        case 175: 
          { System.out.println("TOK_SPACES");toString("TOK_SPACES");return new Symbol(sym.TOK_SPACES,yyline+1, yycolumn+1,yytext());
          }
        case 528: break;
        case 321: 
          { System.out.println("TOK_END_PERFORM");toString("TOK_END_PERFORM");return new Symbol(sym.TOK_END_PERFORM,yyline+1, yycolumn+1,yytext());
          }
        case 529: break;
        case 231: 
          { System.out.println("TOK_REWRITE");toString("TOK_REWRITE");return new Symbol(sym.TOK_REWRITE,yyline+1, yycolumn+1,yytext());
          }
        case 530: break;
        case 273: 
          { System.out.println("TOK_MULTIPLE");toString("TOK_MULTIPLE");return new Symbol(sym.TOK_MULTIPLE,yyline+1, yycolumn+1,yytext());
          }
        case 531: break;
        case 115: 
          { System.out.println("TOK_MOVE");toString("TOK_MOVE");return new Symbol(sym.TOK_MOVE,yyline+1, yycolumn+1,yytext());
          }
        case 532: break;
        case 32: 
          { System.out.println("TOK_NO");toString("TOK_NO");return new Symbol(sym.TOK_NO,yyline+1, yycolumn+1,yytext());
          }
        case 533: break;
        case 107: 
          { System.out.println("TOK_LINE");toString("TOK_LINE");return new Symbol(sym.TOK_LINE,yyline+1, yycolumn+1,yytext());
          }
        case 534: break;
        case 222: 
          { System.out.println("TOK_INITIAL");toString("TOK_INITIAL");return new Symbol(sym.TOK_INITIAL,yyline+1, yycolumn+1,yytext());
          }
        case 535: break;
        case 238: 
          { System.out.println("TOK_MESSAGE");toString("TOK_MESSAGE");return new Symbol(sym.TOK_MESSAGE,yyline+1, yycolumn+1,yytext());
          }
        case 536: break;
        case 208: 
          { System.out.println("TOK_PROGRAM");toString("TOK_PROGRAM");return new Symbol(sym.TOK_PROGRAM,yyline+1, yycolumn+1,yytext());
          }
        case 537: break;
        case 347: 
          { System.out.println("TOK_ORGANIZATION");toString("TOK_ORGANIZATION");return new Symbol(sym.TOK_ORGANIZATION,yyline+1, yycolumn+1,yytext());
          }
        case 538: break;
        case 335: 
          { System.out.println("TOK_ALPHANUMERIC");toString("TOK_ALPHANUMERIC");return new Symbol(sym.TOK_ALPHANUMERIC,yyline+1, yycolumn+1,yytext());
          }
        case 539: break;
        case 43: 
          { System.out.println("TOK_OF");toString("TOK_OF");return new Symbol(sym.TOK_OF,yyline+1, yycolumn+1,yytext());
          }
        case 540: break;
        case 270: 
          { System.out.println("TOK_OPTIONAL");toString("TOK_OPTIONAL");return new Symbol(sym.TOK_OPTIONAL,yyline+1, yycolumn+1,yytext());
          }
        case 541: break;
        case 1: 
          { System.out.println("Error Lexico "+ (yyline+1) + " " + (yycolumn+1) + " " + yytext());
		try {
			manejoErrores("Linea: " + yyline()+ " Caracter No Permitido: \"" + yytext()+ "\"");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
          }
        case 542: break;
        case 142: 
          { System.out.println("TOK_RESET");toString("TOK_RESET");return new Symbol(sym.TOK_RESET,yyline+1, yycolumn+1,yytext());
          }
        case 543: break;
        case 213: 
          { System.out.println("TOK_SUPRESS");toString("TOK_SUPRESS");return new Symbol(sym.TOK_SUPRESS,yyline+1, yycolumn+1,yytext());
          }
        case 544: break;
        case 326: 
          { System.out.println("TOK_SUB_QUEUE_1");toString("TOK_SUB_QUEUE_1");return new Symbol(sym.TOK_SUB_QUEUE_1,yyline+1, yycolumn+1,yytext());
          }
        case 545: break;
        case 143: 
          { System.out.println("TOK_RERUN");toString("TOK_RERUN");return new Symbol(sym.TOK_RERUN,yyline+1, yycolumn+1,yytext());
          }
        case 546: break;
        case 307: 
          { System.out.println("TOK_SEQUENTIAL");toString("TOK_SEQUENTIAL");return new Symbol(sym.TOK_SEQUENTIAL,yyline+1, yycolumn+1,yytext());
          }
        case 547: break;
        case 99: 
          { System.out.println("TOK_NEXT");toString("TOK_NEXT");return new Symbol(sym.TOK_NEXT,yyline+1, yycolumn+1,yytext());
          }
        case 548: break;
        case 49: 
          { System.out.println("TOK_ADD");toString("TOK_ADD");return new Symbol(sym.TOK_ADD,yyline+1, yycolumn+1,yytext());
          }
        case 549: break;
        case 141: 
          { System.out.println("TOK_FIRST");toString("TOK_FIRST");return new Symbol(sym.TOK_FIRST,yyline+1, yycolumn+1,yytext());
          }
        case 550: break;
        case 122: 
          { System.out.println("TOK_CLOSE");toString("TOK_CLOSE");return new Symbol(sym.TOK_CLOSE,yyline+1, yycolumn+1,yytext());
          }
        case 551: break;
        case 354: 
          { System.out.println("TOK_DATE_COMPILED");toString("TOK_DATE_COMPILED");return new Symbol(sym.TOK_DATE_COMPILED,yyline+1, yycolumn+1,yytext());
          }
        case 552: break;
        case 159: 
          { System.out.println("TOK_MERGE");toString("TOK_MERGE");return new Symbol(sym.TOK_MERGE,yyline+1, yycolumn+1,yytext());
          }
        case 553: break;
        case 42: 
          { System.out.println("TOK_ON");toString("TOK_ON");return new Symbol(sym.TOK_ON,yyline+1, yycolumn+1,yytext());
          }
        case 554: break;
        case 198: 
          { System.out.println("TOK_OUTPUT");toString("TOK_OUTPUT");return new Symbol(sym.TOK_OUTPUT,yyline+1, yycolumn+1,yytext());
          }
        case 555: break;
        case 199: 
          { System.out.println("TOK_MEMORY");toString("TOK_MEMORY");return new Symbol(sym.TOK_MEMORY,yyline+1, yycolumn+1,yytext());
          }
        case 556: break;
        case 353: 
          { System.out.println("TOK_SPECIAL_NAMES");toString("TOK_SPECIAL_NAMES");return new Symbol(sym.TOK_SPECIAL_NAMES,yyline+1, yycolumn+1,yytext());
          }
        case 557: break;
        case 44: 
          { System.out.println("TOK_OR");toString("TOK_OR");return new Symbol(sym.TOK_OR,yyline+1, yycolumn+1,yytext());
          }
        case 558: break;
        case 319: 
          { System.out.println("TOK_CLOCK_UNITS");toString("TOK_CLOCK_UNITS");return new Symbol(sym.TOK_CLOCK_UNITS,yyline+1, yycolumn+1,yytext());
          }
        case 559: break;
        case 286: 
          { System.out.println("TOK_DELIMITED");toString("TOK_DELIMITED");return new Symbol(sym.TOK_DELIMITED,yyline+1, yycolumn+1,yytext());
          }
        case 560: break;
        case 2: 
          { /* no hacer nada */
          }
        case 561: break;
        case 344: 
          { System.out.println("TOK_INSTALLATION");toString("TOK_INSTALLATION");return new Symbol(sym.TOK_INSTALLATION,yyline+1, yycolumn+1,yytext());
          }
        case 562: break;
        case 57: 
          { System.out.println("TOK_EOP");toString("TOK_EOP");return new Symbol(sym.TOK_EOP,yyline+1, yycolumn+1,yytext());
          }
        case 563: break;
        case 259: 
          { System.out.println("TOK_SEQUENCE");toString("TOK_SEQUENCE");return new Symbol(sym.TOK_SEQUENCE,yyline+1, yycolumn+1,yytext());
          }
        case 564: break;
        case 266: 
          { System.out.println("TOK_INITIATE");toString("TOK_INITIATE");return new Symbol(sym.TOK_INITIATE,yyline+1, yycolumn+1,yytext());
          }
        case 565: break;
        case 274: 
          { System.out.println("TOK_MULTIPLY");toString("TOK_MULTIPLY");return new Symbol(sym.TOK_MULTIPLY,yyline+1, yycolumn+1,yytext());
          }
        case 566: break;
        case 106: 
          { System.out.println("TOK_LEFT");toString("TOK_LEFT");return new Symbol(sym.TOK_LEFT,yyline+1, yycolumn+1,yytext());
          }
        case 567: break;
        case 67: 
          { System.out.println("TOK_RUN");toString("TOK_RUN");return new Symbol(sym.TOK_RUN,yyline+1, yycolumn+1,yytext());
          }
        case 568: break;
        case 264: 
          { System.out.println("TOK_NEGATIVE");toString("TOK_NEGATIVE");return new Symbol(sym.TOK_NEGATIVE,yyline+1, yycolumn+1,yytext());
          }
        case 569: break;
        case 65: 
          { System.out.println("TOK_I_O");toString("TOK_I_O");return new Symbol(sym.TOK_I_O,yyline+1, yycolumn+1,yytext());
          }
        case 570: break;
        case 81: 
          { System.out.println("TOK_TEST");toString("TOK_TEST");return new Symbol(sym.TOK_TEST,yyline+1, yycolumn+1,yytext());
          }
        case 571: break;
        case 59: 
          { yybegin(PICTURE_STATE); System.out.println("TOK_PICTURE");toString("TOK_PICTURE");return new Symbol(sym.TOK_PICTURE,yyline+1, yycolumn+1,yytext());
          }
        case 572: break;
        case 134: 
          { System.out.println("TOK_DEPTH");toString("TOK_DEPTH");return new Symbol(sym.TOK_DEPTH,yyline+1, yycolumn+1,yytext());
          }
        case 573: break;
        case 315: 
          { System.out.println("TOK_DUPLICATES");toString("TOK_DUPLICATES");return new Symbol(sym.TOK_DUPLICATES,yyline+1, yycolumn+1,yytext());
          }
        case 574: break;
        case 294: 
          { System.out.println("TOK_LOW_VALUE");toString("TOK_LOW_VALUE");return new Symbol(sym.TOK_LOW_VALUE,yyline+1, yycolumn+1,yytext());
          }
        case 575: break;
        case 135: 
          { System.out.println("TOK_VALUE");toString("TOK_VALUE");return new Symbol(sym.TOK_VALUE,yyline+1, yycolumn+1,yytext());
          }
        case 576: break;
        case 68: 
          { System.out.println("TOK_OFF");toString("TOK_OFF");return new Symbol(sym.TOK_OFF,yyline+1, yycolumn+1,yytext());
          }
        case 577: break;
        case 21: 
          { yybegin(YYINITIAL);
          }
        case 578: break;
        case 45: 
          { System.out.println("TOK_UP");toString("TOK_UP");return new Symbol(sym.TOK_UP,yyline+1, yycolumn+1,yytext());
          }
        case 579: break;
        case 246: 
          { System.out.println("TOK_EVALUATE");toString("TOK_EVALUATE");return new Symbol(sym.TOK_EVALUATE,yyline+1, yycolumn+1,yytext());
          }
        case 580: break;
        case 269: 
          { System.out.println("TOK_RELATIVE");toString("TOK_RELATIVE");return new Symbol(sym.TOK_RELATIVE,yyline+1, yycolumn+1,yytext());
          }
        case 581: break;
        case 249: 
          { System.out.println("TOK_EXTERNAL");toString("TOK_EXTERNAL");return new Symbol(sym.TOK_EXTERNAL,yyline+1, yycolumn+1,yytext());
          }
        case 582: break;
        case 324: 
          { System.out.println("TOK_END_OF_PAGE");toString("TOK_END_OF_PAGE");return new Symbol(sym.TOK_END_OF_PAGE,yyline+1, yycolumn+1,yytext());
          }
        case 583: break;
        case 322: 
          { System.out.println("TOK_END_RECEIVE");toString("TOK_END_RECEIVE");return new Symbol(sym.TOK_END_RECEIVE,yyline+1, yycolumn+1,yytext());
          }
        case 584: break;
        case 95: 
          { System.out.println("TOK_SYNC");toString("TOK_SYNC");return new Symbol(sym.TOK_SYNC,yyline+1, yycolumn+1,yytext());
          }
        case 585: break;
        case 369: 
          { System.out.println("TOK_ALPHANUMERIC_EDITED");toString("TOK_ALPHANUMERIC_EDITED");return new Symbol(sym.TOK_ALPHANUMERIC_EDITED,yyline+1, yycolumn+1,yytext());
          }
        case 586: break;
        case 126: 
          { System.out.println("TOK_ENTER");toString("TOK_ENTER");return new Symbol(sym.TOK_ENTER,yyline+1, yycolumn+1,yytext());
          }
        case 587: break;
        case 147: 
          { System.out.println("TOK_LIMIT");toString("TOK_LIMIT");return new Symbol(sym.TOK_LIMIT,yyline+1, yycolumn+1,yytext());
          }
        case 588: break;
        case 155: 
          { System.out.println("TOK_WORDS");toString("TOK_WORDS");return new Symbol(sym.TOK_WORDS,yyline+1, yycolumn+1,yytext());
          }
        case 589: break;
        case 257: 
          { System.out.println("TOK_SEPARATE");toString("TOK_SEPARATE");return new Symbol(sym.TOK_SEPARATE,yyline+1, yycolumn+1,yytext());
          }
        case 590: break;
        case 296: 
          { System.out.println("TOK_UNDERLINE");toString("TOK_UNDERLINE");return new Symbol(sym.TOK_UNDERLINE,yyline+1, yycolumn+1,yytext());
          }
        case 591: break;
        case 171: 
          { System.out.println("TOK_EXTEND");toString("TOK_EXTEND");return new Symbol(sym.TOK_EXTEND,yyline+1, yycolumn+1,yytext());
          }
        case 592: break;
        case 310: 
          { System.out.println("TOK_SORT_MERGE");toString("TOK_SORT_MERGE");return new Symbol(sym.TOK_SORT_MERGE,yyline+1, yycolumn+1,yytext());
          }
        case 593: break;
        case 182: 
          { System.out.println("TOK_NUMBER");toString("TOK_NUMBER");return new Symbol(sym.TOK_NUMBER,yyline+1, yycolumn+1,yytext());
          }
        case 594: break;
        case 131: 
          { System.out.println("TOK_TIMES");toString("TOK_TIMES");return new Symbol(sym.TOK_TIMES,yyline+1, yycolumn+1,yytext());
          }
        case 595: break;
        case 144: 
          { System.out.println("TOK_RIGHT");toString("TOK_RIGHT");return new Symbol(sym.TOK_RIGHT,yyline+1, yycolumn+1,yytext());
          }
        case 596: break;
        case 157: 
          { System.out.println("TOK_USING");toString("TOK_USING");return new Symbol(sym.TOK_USING,yyline+1, yycolumn+1,yytext());
          }
        case 597: break;
        case 348: 
          { System.out.println("TOK_CONFIGURATION");toString("TOK_CONFIGURATION");return new Symbol(sym.TOK_CONFIGURATION,yyline+1, yycolumn+1,yytext());
          }
        case 598: break;
        case 236: 
          { System.out.println("TOK_HEADING");toString("TOK_HEADING");return new Symbol(sym.TOK_HEADING,yyline+1, yycolumn+1,yytext());
          }
        case 599: break;
        case 351: 
          { System.out.println("TOK_COMMUNICATION");toString("TOK_COMMUNICATION");return new Symbol(sym.TOK_COMMUNICATION,yyline+1, yycolumn+1,yytext());
          }
        case 600: break;
        case 339: 
          { System.out.println("TOK_END_MULTIPLY");toString("TOK_END_MULTIPLY");return new Symbol(sym.TOK_END_MULTIPLY,yyline+1, yycolumn+1,yytext());
          }
        case 601: break;
        case 251: 
          { System.out.println("TOK_POSITIVE");toString("TOK_POSITIVE");return new Symbol(sym.TOK_POSITIVE,yyline+1, yycolumn+1,yytext());
          }
        case 602: break;
        case 271: 
          { System.out.println("TOK_OVERFLOW");toString("TOK_OVERFLOW");return new Symbol(sym.TOK_OVERFLOW,yyline+1, yycolumn+1,yytext());
          }
        case 603: break;
        case 360: 
          { System.out.println("TOK_IDENTIFICATION");toString("TOK_IDENTIFICATION");return new Symbol(sym.TOK_IDENTIFICATION,yyline+1, yycolumn+1,yytext());
          }
        case 604: break;
        case 204: 
          { System.out.println("TOK_END_ADD");toString("TOK_END_ADD");return new Symbol(sym.TOK_END_ADD,yyline+1, yycolumn+1,yytext());
          }
        case 605: break;
        case 223: 
          { System.out.println("TOK_FILE_ID");toString("TOK_FILE_ID");return new Symbol(sym.TOK_FILE_ID,yyline+1, yycolumn+1,yytext());
          }
        case 606: break;
        case 214: 
          { System.out.println("TOK_DISABLE");toString("TOK_DISABLE");return new Symbol(sym.TOK_DISABLE,yyline+1, yycolumn+1,yytext());
          }
        case 607: break;
        case 96: 
          { System.out.println("TOK_DATA");toString("TOK_DATA");return new Symbol(sym.TOK_DATA,yyline+1, yycolumn+1,yytext());
          }
        case 608: break;
        case 362: 
          { System.out.println("TOK_SOURCE_COMPUTER");toString("TOK_SOURCE_COMPUTER");return new Symbol(sym.TOK_SOURCE_COMPUTER,yyline+1, yycolumn+1,yytext());
          }
        case 609: break;
        case 309: 
          { System.out.println("TOK_STANDARD_2");toString("TOK_STANDARD_2");return new Symbol(sym.TOK_STANDARD_2,yyline+1, yycolumn+1,yytext());
          }
        case 610: break;
        case 10: 
          { System.out.println("TOK_EQUAL");toString("TOK_EQUAL");return new Symbol(sym.TOK_EQUAL,yyline+1, yycolumn+1,yytext());
          }
        case 611: break;
        case 128: 
          { System.out.println("TOK_ELSIF");toString("TOK_ELSIF");return new Symbol(sym.TOK_ELSIF,yyline+1, yycolumn+1,yytext());
          }
        case 612: break;
        case 56: 
          { System.out.println("TOK_EGI");toString("TOK_EGI");return new Symbol(sym.TOK_EGI,yyline+1, yycolumn+1,yytext());
          }
        case 613: break;
        case 90: 
          { System.out.println("TOK_SEND");toString("TOK_SEND");return new Symbol(sym.TOK_SEND,yyline+1, yycolumn+1,yytext());
          }
        case 614: break;
        case 328: 
          { System.out.println("TOK_SUB_QUEUE_3");toString("TOK_SUB_QUEUE_3");return new Symbol(sym.TOK_SUB_QUEUE_3,yyline+1, yycolumn+1,yytext());
          }
        case 615: break;
        case 74: 
          { System.out.println("TOK_CODE");toString("TOK_CODE");return new Symbol(sym.TOK_CODE,yyline+1, yycolumn+1,yytext());
          }
        case 616: break;
        case 352: 
          { System.out.println("TOK_SEGMENT_LIMIT");toString("TOK_SEGMENT_LIMIT");return new Symbol(sym.TOK_SEGMENT_LIMIT,yyline+1, yycolumn+1,yytext());
          }
        case 617: break;
        case 295: 
          { System.out.println("TOK_HIGHLIGHT");toString("TOK_HIGHLIGHT");return new Symbol(sym.TOK_HIGHLIGHT,yyline+1, yycolumn+1,yytext());
          }
        case 618: break;
        case 170: 
          { System.out.println("TOK_END_IF");toString("TOK_END_IF");return new Symbol(sym.TOK_END_IF,yyline+1, yycolumn+1,yytext());
          }
        case 619: break;
        case 69: 
          { System.out.println("TOK_USE");toString("TOK_USE");return new Symbol(sym.TOK_USE,yyline+1, yycolumn+1,yytext());
          }
        case 620: break;
        case 92: 
          { System.out.println("TOK_SIGN");toString("TOK_SIGN");return new Symbol(sym.TOK_SIGN,yyline+1, yycolumn+1,yytext());
          }
        case 621: break;
        case 168: 
          { System.out.println("TOK_COMMON");toString("TOK_COMMON");return new Symbol(sym.TOK_COMMON,yyline+1, yycolumn+1,yytext());
          }
        case 622: break;
        case 363: 
          { System.out.println("TOK_OBJECT_COMPUTER");toString("TOK_OBJECT_COMPUTER");return new Symbol(sym.TOK_OBJECT_COMPUTER,yyline+1, yycolumn+1,yytext());
          }
        case 623: break;
        case 317: 
          { System.out.println("TOK_REFERENCES");toString("TOK_REFERENCES");return new Symbol(sym.TOK_REFERENCES,yyline+1, yycolumn+1,yytext());
          }
        case 624: break;
        case 22: 
          { System.out.println("TOK_STRING");toString("TOK_STRING");return new Symbol(sym.TOK_STRING,yyline+1, yycolumn+1,yytext());
          }
        case 625: break;
        case 124: 
          { System.out.println("TOK_COUNT");toString("TOK_COUNT");return new Symbol(sym.TOK_COUNT,yyline+1, yycolumn+1,yytext());
          }
        case 626: break;
        case 186: 
          { System.out.println("TOK_RANDOM");toString("TOK_RANDOM");return new Symbol(sym.TOK_RANDOM,yyline+1, yycolumn+1,yytext());
          }
        case 627: break;
        case 210: 
          { System.out.println("TOK_THROUGH");toString("TOK_THROUGH");return new Symbol(sym.TOK_THROUGH,yyline+1, yycolumn+1,yytext());
          }
        case 628: break;
        case 368: 
          { System.out.println("TOK_BACKGROUND_COLOR");toString("TOK_BACKGROUND_COLOR");return new Symbol(sym.TOK_BACKGROUND_COLOR,yyline+1, yycolumn+1,yytext());
          }
        case 629: break;
        case 137: 
          { System.out.println("TOK_INDEX");toString("TOK_INDEX");return new Symbol(sym.TOK_INDEX,yyline+1, yycolumn+1,yytext());
          }
        case 630: break;
        case 282: 
          { System.out.println("TOK_EXCEPTION");toString("TOK_EXCEPTION");return new Symbol(sym.TOK_EXCEPTION,yyline+1, yycolumn+1,yytext());
          }
        case 631: break;
        case 9: 
          { System.out.println("TOK_SLASH");toString("TOK_SLASH");return new Symbol(sym.TOK_SLASH,yyline+1, yycolumn+1,yytext());
          }
        case 632: break;
        case 116: 
          { System.out.println("TOK_ZERO");toString("TOK_ZERO");return new Symbol(sym.TOK_ZERO,yyline+1, yycolumn+1,yytext());
          }
        case 633: break;
        case 41: 
          { System.out.println("TOK_BY");toString("TOK_BY");return new Symbol(sym.TOK_BY,yyline+1, yycolumn+1,yytext());
          }
        case 634: break;
        case 313: 
          { System.out.println("TOK_DEBUG_ITEM");toString("TOK_DEBUG_ITEM");return new Symbol(sym.TOK_DEBUG_ITEM,yyline+1, yycolumn+1,yytext());
          }
        case 635: break;
        case 289: 
          { System.out.println("TOK_REPLACING");toString("TOK_REPLACING");return new Symbol(sym.TOK_REPLACING,yyline+1, yycolumn+1,yytext());
          }
        case 636: break;
        case 229: 
          { System.out.println("TOK_RENAMES");toString("TOK_RENAMES");return new Symbol(sym.TOK_RENAMES,yyline+1, yycolumn+1,yytext());
          }
        case 637: break;
        case 327: 
          { System.out.println("TOK_SUB_QUEUE_2");toString("TOK_SUB_QUEUE_2");return new Symbol(sym.TOK_SUB_QUEUE_2,yyline+1, yycolumn+1,yytext());
          }
        case 638: break;
        case 55: 
          { System.out.println("TOK_END");toString("TOK_END");return new Symbol(sym.TOK_END,yyline+1, yycolumn+1,yytext());
          }
        case 639: break;
        case 244: 
          { System.out.println("TOK_CONTROLS");toString("TOK_CONTROLS");return new Symbol(sym.TOK_CONTROLS,yyline+1, yycolumn+1,yytext());
          }
        case 640: break;
        case 53: 
          { System.out.println("TOK_ALL");toString("TOK_ALL");return new Symbol(sym.TOK_ALL,yyline+1, yycolumn+1,yytext());
          }
        case 641: break;
        case 183: 
          { System.out.println("TOK_GIVING");toString("TOK_GIVING");return new Symbol(sym.TOK_GIVING,yyline+1, yycolumn+1,yytext());
          }
        case 642: break;
        case 256: 
          { System.out.println("TOK_SECURITY");toString("TOK_SECURITY");return new Symbol(sym.TOK_SECURITY,yyline+1, yycolumn+1,yytext());
          }
        case 643: break;
        case 89: 
          { System.out.println("TOK_SAME");toString("TOK_SAME");return new Symbol(sym.TOK_SAME,yyline+1, yycolumn+1,yytext());
          }
        case 644: break;
        case 37: 
          { System.out.println("TOK_FD");toString("TOK_FD");return new Symbol(sym.TOK_FD,yyline+1, yycolumn+1,yytext());
          }
        case 645: break;
        case 97: 
          { System.out.println("TOK_DATE");toString("TOK_DATE");return new Symbol(sym.TOK_DATE,yyline+1, yycolumn+1,yytext());
          }
        case 646: break;
        case 156: 
          { System.out.println("TOK_USAGE");toString("TOK_USAGE");return new Symbol(sym.TOK_USAGE,yyline+1, yycolumn+1,yytext());
          }
        case 647: break;
        case 303: 
          { System.out.println("TOK_END_DIVIDE");toString("TOK_END_DIVIDE");return new Symbol(sym.TOK_END_DIVIDE,yyline+1, yycolumn+1,yytext());
          }
        case 648: break;
        case 35: 
          { System.out.println("TOK_IF");toString("TOK_IF");return new Symbol(sym.TOK_IF,yyline+1, yycolumn+1,yytext());
          }
        case 649: break;
        case 197: 
          { System.out.println("TOK_OCCURS");toString("TOK_OCCURS");return new Symbol(sym.TOK_OCCURS,yyline+1, yycolumn+1,yytext());
          }
        case 650: break;
        case 331: 
          { System.out.println("TOK_DEBUG_SUB_1");toString("TOK_DEBUG_SUB_1");return new Symbol(sym.TOK_DEBUG_SUB_1,yyline+1, yycolumn+1,yytext());
          }
        case 651: break;
        case 268: 
          { System.out.println("TOK_REVERSED");toString("TOK_REVERSED");return new Symbol(sym.TOK_REVERSED,yyline+1, yycolumn+1,yytext());
          }
        case 652: break;
        case 341: 
          { System.out.println("TOK_DATE_WRITTEN");toString("TOK_DATE_WRITTEN");return new Symbol(sym.TOK_DATE_WRITTEN,yyline+1, yycolumn+1,yytext());
          }
        case 653: break;
        case 247: 
          { System.out.println("TOK_END_CALL");toString("TOK_END_CALL");return new Symbol(sym.TOK_END_CALL,yyline+1, yycolumn+1,yytext());
          }
        case 654: break;
        case 82: 
          { System.out.println("TOK_TEXT");toString("TOK_TEXT");return new Symbol(sym.TOK_TEXT,yyline+1, yycolumn+1,yytext());
          }
        case 655: break;
        case 365: 
          { System.out.println("TOK_ALPHABETIC_LOWER");toString("TOK_ALPHABETIC_LOWER");return new Symbol(sym.TOK_ALPHABETIC_LOWER,yyline+1, yycolumn+1,yytext());
          }
        case 656: break;
        case 283: 
          { System.out.println("TOK_PROCEDURE");toString("TOK_PROCEDURE");return new Symbol(sym.TOK_PROCEDURE,yyline+1, yycolumn+1,yytext());
          }
        case 657: break;
        case 207: 
          { System.out.println("TOK_PROCEED");toString("TOK_PROCEED");return new Symbol(sym.TOK_PROCEED,yyline+1, yycolumn+1,yytext());
          }
        case 658: break;
        case 340: 
          { System.out.println("TOK_PAGE_COUNTER");toString("TOK_PAGE_COUNTER");return new Symbol(sym.TOK_PAGE_COUNTER,yyline+1, yycolumn+1,yytext());
          }
        case 659: break;
        case 48: 
          { System.out.println("TOK_FLOAT");toString("TOK_FLOAT");return new Symbol(sym.TOK_FLOAT,yyline+1, yycolumn+1,yytext());
          }
        case 660: break;
        case 280: 
          { System.out.println("TOK_END_START");toString("TOK_END_START");return new Symbol(sym.TOK_END_START,yyline+1, yycolumn+1,yytext());
          }
        case 661: break;
        case 34: 
          { System.out.println("TOK_IN");toString("TOK_IN");return new Symbol(sym.TOK_IN,yyline+1, yycolumn+1,yytext());
          }
        case 662: break;
        case 31: 
          { System.out.println("TOK_DE");toString("TOK_DE");return new Symbol(sym.TOK_DE,yyline+1, yycolumn+1,yytext());
          }
        case 663: break;
        case 323: 
          { System.out.println("TOK_END_REWRITE");toString("TOK_END_REWRITE");return new Symbol(sym.TOK_END_REWRITE,yyline+1, yycolumn+1,yytext());
          }
        case 664: break;
        case 237: 
          { System.out.println("TOK_OMITTED");toString("TOK_OMITTED");return new Symbol(sym.TOK_OMITTED,yyline+1, yycolumn+1,yytext());
          }
        case 665: break;
        case 232: 
          { System.out.println("TOK_REMOVAL");toString("TOK_REMOVAL");return new Symbol(sym.TOK_REMOVAL,yyline+1, yycolumn+1,yytext());
          }
        case 666: break;
        case 358: 
          { System.out.println("TOK_DEBUG_CONTENTS");toString("TOK_DEBUG_CONTENTS");return new Symbol(sym.TOK_DEBUG_CONTENTS,yyline+1, yycolumn+1,yytext());
          }
        case 667: break;
        case 252: 
          { System.out.println("TOK_POSITION");toString("TOK_POSITION");return new Symbol(sym.TOK_POSITION,yyline+1, yycolumn+1,yytext());
          }
        case 668: break;
        case 112: 
          { System.out.println("TOK_UPON");toString("TOK_UPON");return new Symbol(sym.TOK_UPON,yyline+1, yycolumn+1,yytext());
          }
        case 669: break;
        case 263: 
          { System.out.println("TOK_DIVISION");toString("TOK_DIVISION");return new Symbol(sym.TOK_DIVISION,yyline+1, yycolumn+1,yytext());
          }
        case 670: break;
        case 39: 
          { System.out.println("TOK_RF");toString("TOK_RF");return new Symbol(sym.TOK_RF,yyline+1, yycolumn+1,yytext());
          }
        case 671: break;
        case 36: 
          { System.out.println("TOK_GO");toString("TOK_GO");return new Symbol(sym.TOK_GO,yyline+1, yycolumn+1,yytext());
          }
        case 672: break;
        case 230: 
          { System.out.println("TOK_RELEASE");toString("TOK_RELEASE");return new Symbol(sym.TOK_RELEASE,yyline+1, yycolumn+1,yytext());
          }
        case 673: break;
        case 154: 
          { System.out.println("TOK_WHILE");toString("TOK_WHILE");return new Symbol(sym.TOK_WHILE,yyline+1, yycolumn+1,yytext());
          }
        case 674: break;
        case 148: 
          { System.out.println("TOK_BLANK");toString("TOK_BLANK");return new Symbol(sym.TOK_BLANK,yyline+1, yycolumn+1,yytext());
          }
        case 675: break;
        case 102: 
          { System.out.println("TOK_FROM");toString("TOK_FROM");return new Symbol(sym.TOK_FROM,yyline+1, yycolumn+1,yytext());
          }
        case 676: break;
        case 284: 
          { System.out.println("TOK_TERMINATE");toString("TOK_TERMINATE");return new Symbol(sym.TOK_TERMINATE,yyline+1, yycolumn+1,yytext());
          }
        case 677: break;
        case 51: 
          { System.out.println("TOK_ANY");toString("TOK_ANY");return new Symbol(sym.TOK_ANY,yyline+1, yycolumn+1,yytext());
          }
        case 678: break;
        case 58: 
          { System.out.println("TOK_EMI");toString("TOK_EMI");return new Symbol(sym.TOK_EMI,yyline+1, yycolumn+1,yytext());
          }
        case 679: break;
        case 302: 
          { System.out.println("TOK_END_DELETE");toString("TOK_END_DELETE");return new Symbol(sym.TOK_END_DELETE,yyline+1, yycolumn+1,yytext());
          }
        case 680: break;
        case 334: 
          { System.out.println("TOK_I_O_CONTROL");toString("TOK_I_O_CONTROL");return new Symbol(sym.TOK_I_O_CONTROL,yyline+1, yycolumn+1,yytext());
          }
        case 681: break;
        case 194: 
          { System.out.println("TOK_BEFORE");toString("TOK_BEFORE");return new Symbol(sym.TOK_BEFORE,yyline+1, yycolumn+1,yytext());
          }
        case 682: break;
        case 46: 
          { System.out.println("TOK_GREATER_EQ");toString("TOK_GREATER_EQ");return new Symbol(sym.TOK_GREATER_EQ,yyline+1, yycolumn+1,yytext());
          }
        case 683: break;
        case 359: 
          { System.out.println("TOK_NUMERIC_EDITED");toString("TOK_NUMERIC_EDITED");return new Symbol(sym.TOK_NUMERIC_EDITED,yyline+1, yycolumn+1,yytext());
          }
        case 684: break;
        case 325: 
          { System.out.println("TOK_ENVIRONMENT");toString("TOK_ENVIRONMENT");return new Symbol(sym.TOK_ENVIRONMENT,yyline+1, yycolumn+1,yytext());
          }
        case 685: break;
        case 297: 
          { System.out.println("TOK_JUSTIFIED");toString("TOK_JUSTIFIED");return new Symbol(sym.TOK_JUSTIFIED,yyline+1, yycolumn+1,yytext());
          }
        case 686: break;
        case 165: 
          { System.out.println("TOK_AUTHOR");toString("TOK_AUTHOR");return new Symbol(sym.TOK_AUTHOR,yyline+1, yycolumn+1,yytext());
          }
        case 687: break;
        case 205: 
          { System.out.println("TOK_PADDING");toString("TOK_PADDING");return new Symbol(sym.TOK_PADDING,yyline+1, yycolumn+1,yytext());
          }
        case 688: break;
        case 277: 
          { System.out.println("TOK_ALTERNATE");toString("TOK_ALTERNATE");return new Symbol(sym.TOK_ALTERNATE,yyline+1, yycolumn+1,yytext());
          }
        case 689: break;
        case 188: 
          { System.out.println("TOK_REPORT");toString("TOK_REPORT");return new Symbol(sym.TOK_REPORT,yyline+1, yycolumn+1,yytext());
          }
        case 690: break;
        case 86: 
          { System.out.println("TOK_THEN");toString("TOK_THEN");return new Symbol(sym.TOK_THEN,yyline+1, yycolumn+1,yytext());
          }
        case 691: break;
        case 250: 
          { System.out.println("TOK_PRINTING");toString("TOK_PRINTING");return new Symbol(sym.TOK_PRINTING,yyline+1, yycolumn+1,yytext());
          }
        case 692: break;
        case 220: 
          { System.out.println("TOK_INDEXED");toString("TOK_INDEXED");return new Symbol(sym.TOK_INDEXED,yyline+1, yycolumn+1,yytext());
          }
        case 693: break;
        case 349: 
          { System.out.println("TOK_CORRESPONDING");toString("TOK_CORRESPONDING");return new Symbol(sym.TOK_CORRESPONDING,yyline+1, yycolumn+1,yytext());
          }
        case 694: break;
        case 130: 
          { System.out.println("TOK_TABLE");toString("TOK_TABLE");return new Symbol(sym.TOK_TABLE,yyline+1, yycolumn+1,yytext());
          }
        case 695: break;
        case 192: 
          { System.out.println("TOK_LINAGE");toString("TOK_LINAGE");return new Symbol(sym.TOK_LINAGE,yyline+1, yycolumn+1,yytext());
          }
        case 696: break;
        case 261: 
          { System.out.println("TOK_SUBTRACT");toString("TOK_SUBTRACT");return new Symbol(sym.TOK_SUBTRACT,yyline+1, yycolumn+1,yytext());
          }
        case 697: break;
        case 11: 
          { System.out.println("TOK_DOLLAR");toString("TOK_DOLLAR");return new Symbol(sym.TOK_DOLLAR,yyline+1, yycolumn+1,yytext());
          }
        case 698: break;
        case 62: 
          { System.out.println("TOK_SUM");toString("TOK_SUM");return new Symbol(sym.TOK_SUM,yyline+1, yycolumn+1,yytext());
          }
        case 699: break;
        case 217: 
          { System.out.println("TOK_VARYING");toString("TOK_VARYING");return new Symbol(sym.TOK_VARYING,yyline+1, yycolumn+1,yytext());
          }
        case 700: break;
        case 150: 
          { System.out.println("TOK_BLOCK");toString("TOK_BLOCK");return new Symbol(sym.TOK_BLOCK,yyline+1, yycolumn+1,yytext());
          }
        case 701: break;
        case 305: 
          { System.out.println("TOK_PROCEDURES");toString("TOK_PROCEDURES");return new Symbol(sym.TOK_PROCEDURES,yyline+1, yycolumn+1,yytext());
          }
        case 702: break;
        case 179: 
          { System.out.println("TOK_DELETE");toString("TOK_DELETE");return new Symbol(sym.TOK_DELETE,yyline+1, yycolumn+1,yytext());
          }
        case 703: break;
        case 242: 
          { System.out.println("TOK_CONTAINS");toString("TOK_CONTAINS");return new Symbol(sym.TOK_CONTAINS,yyline+1, yycolumn+1,yytext());
          }
        case 704: break;
        case 304: 
          { System.out.println("TOK_END_RETURN");toString("TOK_END_RETURN");return new Symbol(sym.TOK_END_RETURN,yyline+1, yycolumn+1,yytext());
          }
        case 705: break;
        case 312: 
          { System.out.println("TOK_DEBUG_NAME");toString("TOK_DEBUG_NAME");return new Symbol(sym.TOK_DEBUG_NAME,yyline+1, yycolumn+1,yytext());
          }
        case 706: break;
        case 248: 
          { System.out.println("TOK_END_READ");toString("TOK_END_READ");return new Symbol(sym.TOK_END_READ,yyline+1, yycolumn+1,yytext());
          }
        case 707: break;
        case 146: 
          { System.out.println("TOK_LINES");toString("TOK_LINES");return new Symbol(sym.TOK_LINES,yyline+1, yycolumn+1,yytext());
          }
        case 708: break;
        case 201: 
          { System.out.println("TOK_CONTROL");toString("TOK_CONTROL");return new Symbol(sym.TOK_CONTROL,yyline+1, yycolumn+1,yytext());
          }
        case 709: break;
        case 176: 
          { System.out.println("TOK_STATUS");toString("TOK_STATUS");return new Symbol(sym.TOK_STATUS,yyline+1, yycolumn+1,yytext());
          }
        case 710: break;
        case 120: 
          { System.out.println("TOK_ALTER");toString("TOK_ALTER");return new Symbol(sym.TOK_ALTER,yyline+1, yycolumn+1,yytext());
          }
        case 711: break;
        case 189: 
          { System.out.println("TOK_RETURN");toString("TOK_RETURN");return new Symbol(sym.TOK_RETURN,yyline+1, yycolumn+1,yytext());
          }
        case 712: break;
        case 78: 
          { System.out.println("TOK_EXIT");toString("TOK_EXIT");return new Symbol(sym.TOK_EXIT,yyline+1, yycolumn+1,yytext());
          }
        case 713: break;
        case 18: 
          { yybegin(COMMENT_STATE);
          }
        case 714: break;
        case 364: 
          { System.out.println("TOK_WORKING_STORAGE");toString("TOK_WORKING_STORAGE");return new Symbol(sym.TOK_WORKING_STORAGE,yyline+1, yycolumn+1,yytext());
          }
        case 715: break;
        case 119: 
          { System.out.println("TOK_AREAS");toString("TOK_AREAS");return new Symbol(sym.TOK_AREAS,yyline+1, yycolumn+1,yytext());
          }
        case 716: break;
        case 70: 
          { System.out.println("TOK_KEY");toString("TOK_KEY");return new Symbol(sym.TOK_KEY,yyline+1, yycolumn+1,yytext());
          }
        case 717: break;
        case 330: 
          { System.out.println("TOK_DESTINATION");toString("TOK_DESTINATION");return new Symbol(sym.TOK_DESTINATION,yyline+1, yycolumn+1,yytext());
          }
        case 718: break;
        case 218: 
          { System.out.println("TOK_NUMERIC");toString("TOK_NUMERIC");return new Symbol(sym.TOK_NUMERIC,yyline+1, yycolumn+1,yytext());
          }
        case 719: break;
        case 87: 
          { System.out.println("TOK_THRU");toString("TOK_THRU");return new Symbol(sym.TOK_THRU,yyline+1, yycolumn+1,yytext());
          }
        case 720: break;
        case 139: 
          { System.out.println("TOK_FALSE");toString("TOK_FALSE");return new Symbol(sym.TOK_FALSE,yyline+1, yycolumn+1,yytext());
          }
        case 721: break;
        case 190: 
          { System.out.println("TOK_REWIND");toString("TOK_REWIND");return new Symbol(sym.TOK_REWIND,yyline+1, yycolumn+1,yytext());
          }
        case 722: break;
        case 300: 
          { System.out.println("TOK_END_SEARCH");toString("TOK_END_SEARCH");return new Symbol(sym.TOK_END_SEARCH,yyline+1, yycolumn+1,yytext());
          }
        case 723: break;
        case 209: 
          { System.out.println("TOK_POINTER");toString("TOK_POINTER");return new Symbol(sym.TOK_POINTER,yyline+1, yycolumn+1,yytext());
          }
        case 724: break;
        case 333: 
          { System.out.println("TOK_DEBUG_SUB_3");toString("TOK_DEBUG_SUB_3");return new Symbol(sym.TOK_DEBUG_SUB_3,yyline+1, yycolumn+1,yytext());
          }
        case 725: break;
        case 243: 
          { System.out.println("TOK_CONTINUE");toString("TOK_CONTINUE");return new Symbol(sym.TOK_CONTINUE,yyline+1, yycolumn+1,yytext());
          }
        case 726: break;
        case 110: 
          { System.out.println("TOK_WITH");toString("TOK_WITH");return new Symbol(sym.TOK_WITH,yyline+1, yycolumn+1,yytext());
          }
        case 727: break;
        case 173: 
          { System.out.println("TOK_SEARCH");toString("TOK_SEARCH");return new Symbol(sym.TOK_SEARCH,yyline+1, yycolumn+1,yytext());
          }
        case 728: break;
        case 33: 
          { System.out.println("TOK_IS");toString("TOK_IS");return new Symbol(sym.TOK_IS,yyline+1, yycolumn+1,yytext());
          }
        case 729: break;
        case 19: 
          { System.out.println("Error Lexico "+ (yyline+1) + " " + (yycolumn+1) + " " + yytext());
		try {
			manejoErrores("Linea: " + yyline()+ " Caracter No Permitido: \"" + yytext()+ "\"");
			throw new Exception("Linea: " + yyline()+ " Caracter No Permitido: \"" + yytext()+ "\"");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
          }
        case 730: break;
        case 245: 
          { System.out.println("TOK_CURRENCY");toString("TOK_CURRENCY");return new Symbol(sym.TOK_CURRENCY,yyline+1, yycolumn+1,yytext());
          }
        case 731: break;
        case 314: 
          { System.out.println("TOK_DEBUG_LINE");toString("TOK_DEBUG_LINE");return new Symbol(sym.TOK_DEBUG_LINE,yyline+1, yycolumn+1,yytext());
          }
        case 732: break;
        case 219: 
          { System.out.println("TOK_INSPECT");toString("TOK_INSPECT");return new Symbol(sym.TOK_INSPECT,yyline+1, yycolumn+1,yytext());
          }
        case 733: break;
        case 276: 
          { System.out.println("TOK_ADVANCING");toString("TOK_ADVANCING");return new Symbol(sym.TOK_ADVANCING,yyline+1, yycolumn+1,yytext());
          }
        case 734: break;
        case 239: 
          { System.out.println("TOK_MODULES");toString("TOK_MODULES");return new Symbol(sym.TOK_MODULES,yyline+1, yycolumn+1,yytext());
          }
        case 735: break;
        case 357: 
          { System.out.println("TOK_PACKED_DECIMAL");toString("TOK_PACKED_DECIMAL");return new Symbol(sym.TOK_PACKED_DECIMAL,yyline+1, yycolumn+1,yytext());
          }
        case 736: break;
        case 5: 
          { System.out.println("TOK_INTEGER");toString("TOK_INTEGER");return new Symbol(sym.TOK_INTEGER,yyline+1, yycolumn+1,yytext());
          }
        case 737: break;
        case 287: 
          { System.out.println("TOK_DELIMITER");toString("TOK_DELIMITER");return new Symbol(sym.TOK_DELIMITER,yyline+1, yycolumn+1,yytext());
          }
        case 738: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

package sintactico;
import java_cup.runtime.*;
%%
%unicode
%cup
%line
%column

%{	
	final int yyline() {
		return yyline + 1;
    }
%}

	OP_ARITMETICO = "+" | "-" | "/" | "**"
	OP_LOGICO = AND | OR | NOT
	OP_RELACION = "<=" | "<" | "=" | ">=" | ">"
	OP_PSEUDO = "==" ~[\=]* "=="
	PAR_IZQ = "("
	PAR_DER = ")"
	DELIMITADOR = "."
	PUNTUACION = [\,\:]
	PALABRA_RESERVADA = ACCEPT | ACCESS | ACOS | ADD | ADDRESS | ADVANCING | AFTER | ALL | ALPHABET | ALPHABETIC | ALPHABETIC-LOWER | ALPHABETIC-UPPER | ALPHANUMERIC | ALPHANUMERIC-EDITED |	ALSO | ALTER | ALTERNATE | AND | ANNUITY | ANY | APPLY | ARE | AREA | AREAS | AS | ASCENDING | ASIN | ASSIGN | AT | ATAN | AUTHOR | AUTOMATIC | BASIS | BEFORE | BEGINNING | BINARY | BLANK | BLOCK | BOTTOM | BY | CALL | CANCEL | CBL | CDECL | CHAR | CHARACTER | CHARACTERS | CLASS |	CLASS-ID | CLOSE | CODE-SET | COLLATING | COMMA | COMMON | COMP | COMP-1 | COMP-2 | COMP-3 | COMP-4 | COMP-5 | COMPUTATIONAL | COMPUTATIONAL-1 | COMPUTATIONAL-2 | COMPUTATIONAL-3 | COMPUTATIONAL-4 | COMPUTATIONAL-5 | COMPUTE | CONFIGURATION | CONTAINS | CONTENT | CONTINUE | CONVERTING | COPY | CORR | CORRESPONDING | COS | COUNT | CURRENCY | CURRENT-DATE | DATA | DATE | DATE-COMPILED | DATE-OF-INTEGER | DATE-TO-YYYYMMDD | DATE-WRITTEN | DATEVAL | DAY | DAY-OF-INTEGER | DAY-OF-WEEK | DAY-TO-YYYYDDD | DBCS | DEBUGGING | DECIMAL-POINT | DECLARATIVES | DELETE | DELIMITED | DELIMITER | DEPENDING | DESC | DESCENDING | DESCRIPTOR | DISPLAY | DISPLAY-1 | DIVIDE | DIVISION | DOWN | DUPLICATES | DYNAMIC | EBCDIC | EGCS | EJECT | ELSE | END | END-ADD | END-CALL | END-COMPUTE | END-DELETE | END-DIVIDE | END-EVALUATE | END-IF | END-INVOKE | END-MULTIPLY | END-OF-PAGE | END-PERFORM | END-READ | END-RETURN | END-REWRITE | END-SEARCH | END-START | END-STRING | END-SUBTRACT | END-UNSTRING | END-WRITE | ENDING | ENTER | ENTRY | ENVIRONMENT | EOP | EQUAL | ERROR | EVALUATE | EVERY | EXCEPTION | EXIT | EXTEND | EXTERNAL | FACTORIAL | FALSE |	FAR16 | FD | FILE | FILE-CONTROL | FILLER | FIRST | FOOTING | FOR | FORMAT | FROM | FUNCTION | GIVING | GLOBAL | GO | GOBACK | GREATER | I-O |	I-O-CONTROL | ID | IDENTIFICATION | IF | IN | INDEX | INDEXED | INHERITS | INITIAL | INITIALIZE | INPUT | INPUT-OUTPUT | INSERT | INSPECT | INSTALLATION | INTEGER | INTEGER-OF-DATE | INTEGER-OF-DAY | INTEGER-PART | INTO | INVALID | INVOKE | IS | JUST | JUSTIFIED | KANJI | KEY | LABEL | LEADING | LEFT | LENGTH | LESS | LINAGE | LINAGE-COUNTER | LINE | LINES | LINKAGE | LIST | LOCAL-STORAGE | LOCK | LOG | LOG10 | LOWER-CASE | MAP | MAX | MEAN | MEDIAN | MEMORY | MERGE | METACLASS | METHOD | METHOD-ID | MIDRANGE | MIN | MOD | MODE | MODULES | MORE-LABELS | MOVE | MULTIPLE | MULTIPLY | NATIVE | NEGATIVE | NEXT | NEXT-SENTENCE | NO | NODESC | NODESCRIPTOR | NOLIST | NOMAP | NOSOURCE | NOT | NULLS | NUMERIC | NUMERIC-EDITED | NUMVAL | NUMVAL-C | OBJECT | OBJECT-COMPUTER | OCCURS | OF | OFF | OMITTED | ON | OPEN | OPTIONAL | OPTLINK | OR | ORD | ORD-MAX | ORD-MIN | ORDER | ORGANIZATION | OTHER | OUTPUT | OVERFLOW | OVERRIDE | PACKED-DECIMAL | PADDING | PAGE | PASCAL16 | PASSWORD | PERFORM | PIC | PICTURE | POINTER | POSITION | POSITIVE | PRESENT-VALUE | PREVIOUS | PROCEDURE |	PROCEDURE-POINTER | PROCEDURES | PROCEED | PROCESS | PROGRAM |	PROGRAM-ID | RANDOM | RANGE | READ | READY | RECORD | RECORDING | RECORDS |	RECURSIVE | REDEFINES | REEL | REFERENCE | RELATIVE | RELEASE | RELOAD | REM | REMAINDER | REMOVAL | RENAMES | REPLACE | REPLACING | REPOSITORY | RERUN | RESERVE | RESET | RETURN | RETURNING | REVERSE | REVERSED | REWIND | REWRITE | RIGHT | ROUNDED | RUN | S | SAME | SD | SEARCH | SECTION | SECURITY | SELECT | SELF | SENTENCE | SEPARATE | SEQUENCE | SEQUENTIAL | SERVICE | SET | SIGN | SIN | SIZE | SKIP1 | SKIP2 | SKIP3 | SORT | SORT-MERGE | SOURCE | SOURCE-COMPUTER | SPECIAL-NAMES | SQRT | STANDARD | STANDARD-1 | STANDARD-2 | STANDARD-DEVIATION | START | STATUS | STOP | STRING | SUBTRACT | SUM | SUPER | SUPPRESS | SYMBOL | SYMBOLIC | SYNC | SYNCHRONIZED | SYSTEM | TALLYING | TAN | TAPE | TEST | THAN | THEN | THROUGH | THRU | TIME | TIMES | TITLE | TO | TOP | TRACE | TRAILING | TRUE | UNDATE | UNIT | UNSTRING | UNTIL | UP | UPON | UPPER-CASE | USAGE | USE | USING | VALUE | VALUES | VARIANCE | VARYING | WHEN | WHEN-COMPILED | WITH | WORDS | WORKING-STORAGE | WRITE | WRITE-ONLY | YEAR-TO-YYYY | YEARWINDOW | YYYYDDD | YYYYMMDD | ZERO | ZEROES | ZEROS
	CERO = [0]+
	PRIORIDAD = [0-9] [0-9]
	ENTERO = [0]* [1-9] [0-9]*
	NUMERO = [\+\-]? ([0-9]* [\.] [0-9]+ | [0-9]+)
	NO_NUMERICO = "\""[0-9A-Fa-f]+
	STRING = \".*\"|\'.*\' 
	IDENTIFICADOR = [A-Za-z]+ ([\-]+ [A-Za-z0-9]+)*
	
	COMENTARIO = \*.*\n
	finDeLinea = \r|\n|\r\n
	espacioBlanco = {finDeLinea} | [ \t\f]
%%
<YYINITIAL>{
	{OP_ARITMETICO} {
		System.out.println("Se encontro un OPERADOR ARITMETICO");
		return new Symbol(sym.OP_ARITMETICO);
	}
	{OP_LOGICO} {
		System.out.println("Se encontro un OPERADOR LOGICO");
		return new Symbol(sym.OP_LOGICO);
	}
	{OP_RELACION} {
		System.out.println("Se encontro un OPERADOR RELACION");
		return new Symbol(sym.OP_RELACION);
	}
	{OP_PSEUDO} {
		System.out.println("Se encontro un OPERADOR PSEUDO");
		return new Symbol(sym.OP_PSEUDO);
	}
	{PAR_IZQ} {
		System.out.println("Se encontro un PARENTESIS IZQ ( ");
		return new Symbol(sym.PAR_IZQ);
	}
	{PAR_DER} {
		System.out.println("Se encontro un PARENTESIS DER ) ");
		return new Symbol(sym.PAR_DER);
	}
	{DELIMITADOR} {
		System.out.println("Se encontro un DELIMITADOR . ");
		return new Symbol(sym.DELIMITADOR);
	}
	{PUNTUACION} {
		System.out.println("Se encontro un PUNTUACION . ");
		return new Symbol(sym.PUNTUACION);
	}
	{PALABRA_RESERVADA} {
		System.out.println("Se encontro una PALABRA RESERVADA"); 
		return new Symbol(sym.PALABRA_RESERVADA);
	}
	{CERO} { 
		System.out.println("Se encontro un CERO"); 
		return new Symbol(sym.CERO);
	}
	{PRIORIDAD} { 
		System.out.println("Se encontro una PRIORIDAD"); 
		return new Symbol(sym.PRIORIDAD);
	}
	{ENTERO} {
		System.out.println("Se encontro un ENTERO"); 
		return new Symbol(sym.ENTERO);
	}
	{NUMERO} {
		System.out.println("Se encontro un NUMERO"); 
		return new Symbol(sym.NUMERO);
	}
	{NO_NUMERICO} { 
		System.out.println("Se encontro un NO NUMERICO"); 
		return new Symbol(sym.NO_NUMERICO);
	}
	{STRING} { 
		System.out.println("Se encontro un STRING"); 
		return new Symbol(sym.STRING);
	}
	
    {IDENTIFICADOR} { 
    	System.out.println("Se encontro un IDENTIFICADOR");
    }
    {COMENTARIO} { 
		System.out.println("Se encontro un COMENTARIO"); 
	}
    {finDeLinea} { /*Ignorar*/ }
    {espacioBlanco} { /*Ignorar*/ }
    
    . {
		try {
			throw new Exception("Linea: " + yyline()+ " Caracter No Permitido: \"" + yytext()+ "\"");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}